# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig3', [dirname(__file__)])
        except ImportError:
            import _blocks_swig3
            return _blocks_swig3
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig3 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig3
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_epoch()
class float_to_char(object):
    """
    Convert stream of floats to a stream of char.

    Constructor Specific Documentation:

    Build a float to char block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> float_to_char_sptr

        Convert stream of floats to a stream of char.

        Constructor Specific Documentation:

        Build a float to char block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig3.float_to_char_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(float_to_char self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig3.float_to_char_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_char self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig3.float_to_char_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_float_to_char
    __del__ = lambda self : None;
float_to_char_swigregister = _blocks_swig3.float_to_char_swigregister
float_to_char_swigregister(float_to_char)

def float_to_char_make(vlen=1, scale=1.0):
  """
    float_to_char_make(size_t vlen=1, float scale=1.0) -> float_to_char_sptr

    Convert stream of floats to a stream of char.

    Constructor Specific Documentation:

    Build a float to char block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
  return _blocks_swig3.float_to_char_make(vlen, scale)

class float_to_complex(object):
    """
    one or two floats in, complex out

    Constructor Specific Documentation:

    Build a float to complex block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> float_to_complex_sptr

        one or two floats in, complex out

        Constructor Specific Documentation:

        Build a float to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig3.float_to_complex_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_float_to_complex
    __del__ = lambda self : None;
float_to_complex_swigregister = _blocks_swig3.float_to_complex_swigregister
float_to_complex_swigregister(float_to_complex)

def float_to_complex_make(vlen=1):
  """
    float_to_complex_make(size_t vlen=1) -> float_to_complex_sptr

    one or two floats in, complex out

    Constructor Specific Documentation:

    Build a float to complex block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig3.float_to_complex_make(vlen)

class float_to_int(object):
    """
    Convert stream of floats to a stream of ints.

    Constructor Specific Documentation:

    Build a float to int block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> float_to_int_sptr

        Convert stream of floats to a stream of ints.

        Constructor Specific Documentation:

        Build a float to int block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig3.float_to_int_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(float_to_int self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig3.float_to_int_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_int self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig3.float_to_int_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_float_to_int
    __del__ = lambda self : None;
float_to_int_swigregister = _blocks_swig3.float_to_int_swigregister
float_to_int_swigregister(float_to_int)

def float_to_int_make(vlen=1, scale=1.0):
  """
    float_to_int_make(size_t vlen=1, float scale=1.0) -> float_to_int_sptr

    Convert stream of floats to a stream of ints.

    Constructor Specific Documentation:

    Build a float to int block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
  return _blocks_swig3.float_to_int_make(vlen, scale)

class float_to_short(object):
    """
    Convert stream of floats to a stream of shorts.

    Constructor Specific Documentation:

    Build a float to short block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> float_to_short_sptr

        Convert stream of floats to a stream of shorts.

        Constructor Specific Documentation:

        Build a float to short block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig3.float_to_short_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(float_to_short self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig3.float_to_short_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_short self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig3.float_to_short_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_float_to_short
    __del__ = lambda self : None;
float_to_short_swigregister = _blocks_swig3.float_to_short_swigregister
float_to_short_swigregister(float_to_short)

def float_to_short_make(vlen=1, scale=1.0):
  """
    float_to_short_make(size_t vlen=1, float scale=1.0) -> float_to_short_sptr

    Convert stream of floats to a stream of shorts.

    Constructor Specific Documentation:

    Build a float to short block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
  return _blocks_swig3.float_to_short_make(vlen, scale)

class float_to_uchar(object):
    """
    Convert stream of floats to a stream of unsigned chars.

    Constructor Specific Documentation:

    Build a float to uchar block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> float_to_uchar_sptr

        Convert stream of floats to a stream of unsigned chars.

        Constructor Specific Documentation:

        Build a float to uchar block.
        """
        return _blocks_swig3.float_to_uchar_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_float_to_uchar
    __del__ = lambda self : None;
float_to_uchar_swigregister = _blocks_swig3.float_to_uchar_swigregister
float_to_uchar_swigregister(float_to_uchar)

def float_to_uchar_make():
  """
    float_to_uchar_make() -> float_to_uchar_sptr

    Convert stream of floats to a stream of unsigned chars.

    Constructor Specific Documentation:

    Build a float to uchar block.
    """
  return _blocks_swig3.float_to_uchar_make()

class int_to_float(object):
    """
    Convert stream of ints to a stream of floats.

    Constructor Specific Documentation:

    Build an int to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> int_to_float_sptr

        Convert stream of ints to a stream of floats.

        Constructor Specific Documentation:

        Build an int to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig3.int_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(int_to_float self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig3.int_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(int_to_float self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig3.int_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_int_to_float
    __del__ = lambda self : None;
int_to_float_swigregister = _blocks_swig3.int_to_float_swigregister
int_to_float_swigregister(int_to_float)

def int_to_float_make(vlen=1, scale=1.0):
  """
    int_to_float_make(size_t vlen=1, float scale=1.0) -> int_to_float_sptr

    Convert stream of ints to a stream of floats.

    Constructor Specific Documentation:

    Build an int to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
  return _blocks_swig3.int_to_float_make(vlen, scale)

class integrate_ss(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim) -> integrate_ss_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_integrate_ss
    __del__ = lambda self : None;
integrate_ss_swigregister = _blocks_swig3.integrate_ss_swigregister
integrate_ss_swigregister(integrate_ss)

def integrate_ss_make(*args, **kwargs):
  """
    integrate_ss_make(int decim) -> integrate_ss_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
  return _blocks_swig3.integrate_ss_make(*args, **kwargs)

class integrate_ii(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim) -> integrate_ii_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_ii_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_integrate_ii
    __del__ = lambda self : None;
integrate_ii_swigregister = _blocks_swig3.integrate_ii_swigregister
integrate_ii_swigregister(integrate_ii)

def integrate_ii_make(*args, **kwargs):
  """
    integrate_ii_make(int decim) -> integrate_ii_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
  return _blocks_swig3.integrate_ii_make(*args, **kwargs)

class integrate_ff(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim) -> integrate_ff_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_integrate_ff
    __del__ = lambda self : None;
integrate_ff_swigregister = _blocks_swig3.integrate_ff_swigregister
integrate_ff_swigregister(integrate_ff)

def integrate_ff_make(*args, **kwargs):
  """
    integrate_ff_make(int decim) -> integrate_ff_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
  return _blocks_swig3.integrate_ff_make(*args, **kwargs)

class integrate_cc(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim) -> integrate_cc_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_integrate_cc
    __del__ = lambda self : None;
integrate_cc_swigregister = _blocks_swig3.integrate_cc_swigregister
integrate_cc_swigregister(integrate_cc)

def integrate_cc_make(*args, **kwargs):
  """
    integrate_cc_make(int decim) -> integrate_cc_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
    """
  return _blocks_swig3.integrate_cc_make(*args, **kwargs)

class interleave(object):
    """
    interleave N inputs into a single output

    This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from eahc input to the output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a stream interleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block of samples to interleave
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, unsigned int blocksize=1) -> interleave_sptr

        interleave N inputs into a single output

        This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from eahc input to the output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a stream interleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block of samples to interleave
        """
        return _blocks_swig3.interleave_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_interleave
    __del__ = lambda self : None;
interleave_swigregister = _blocks_swig3.interleave_swigregister
interleave_swigregister(interleave)

def interleave_make(*args, **kwargs):
  """
    interleave_make(size_t itemsize, unsigned int blocksize=1) -> interleave_sptr

    interleave N inputs into a single output

    This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from eahc input to the output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a stream interleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block of samples to interleave
    """
  return _blocks_swig3.interleave_make(*args, **kwargs)

class interleaved_short_to_complex(object):
    """
    Convert stream of interleaved shorts to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved short to complex block.

    Args:
        vector_input : 
        swap : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vector_input=False, swap=False):
        """
        make(bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr

        Convert stream of interleaved shorts to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved short to complex block.

        Args:
            vector_input : 
            swap : 
        """
        return _blocks_swig3.interleaved_short_to_complex_make(vector_input, swap)

    make = staticmethod(make)
    def set_swap(self, *args, **kwargs):
        """set_swap(interleaved_short_to_complex self, bool swap)"""
        return _blocks_swig3.interleaved_short_to_complex_set_swap(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_interleaved_short_to_complex
    __del__ = lambda self : None;
interleaved_short_to_complex_swigregister = _blocks_swig3.interleaved_short_to_complex_swigregister
interleaved_short_to_complex_swigregister(interleaved_short_to_complex)

def interleaved_short_to_complex_make(vector_input=False, swap=False):
  """
    interleaved_short_to_complex_make(bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr

    Convert stream of interleaved shorts to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved short to complex block.

    Args:
        vector_input : 
        swap : 
    """
  return _blocks_swig3.interleaved_short_to_complex_make(vector_input, swap)

class interleaved_char_to_complex(object):
    """
    Convert stream of interleaved chars to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved char to complex block.

    Args:
        vector_input : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vector_input=False):
        """
        make(bool vector_input=False) -> interleaved_char_to_complex_sptr

        Convert stream of interleaved chars to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved char to complex block.

        Args:
            vector_input : 
        """
        return _blocks_swig3.interleaved_char_to_complex_make(vector_input)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_interleaved_char_to_complex
    __del__ = lambda self : None;
interleaved_char_to_complex_swigregister = _blocks_swig3.interleaved_char_to_complex_swigregister
interleaved_char_to_complex_swigregister(interleaved_char_to_complex)

def interleaved_char_to_complex_make(vector_input=False):
  """
    interleaved_char_to_complex_make(bool vector_input=False) -> interleaved_char_to_complex_sptr

    Convert stream of interleaved chars to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved char to complex block.

    Args:
        vector_input : 
    """
  return _blocks_swig3.interleaved_char_to_complex_make(vector_input)

class keep_m_in_n(object):
    """
    decimate a stream, keeping  items out of every .

    Constructor Specific Documentation:

    Make a keep m in n block.

    Args:
        itemsize : stream itemsize
        m : number of items to take in block of  items
        n : block size in items
        offset : initial item offset into the stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr

        decimate a stream, keeping  items out of every .

        Constructor Specific Documentation:

        Make a keep m in n block.

        Args:
            itemsize : stream itemsize
            m : number of items to take in block of  items
            n : block size in items
            offset : initial item offset into the stream
        """
        return _blocks_swig3.keep_m_in_n_make(*args, **kwargs)

    make = staticmethod(make)
    def set_m(self, *args, **kwargs):
        """set_m(keep_m_in_n self, int m)"""
        return _blocks_swig3.keep_m_in_n_set_m(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(keep_m_in_n self, int n)"""
        return _blocks_swig3.keep_m_in_n_set_n(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(keep_m_in_n self, int offset)"""
        return _blocks_swig3.keep_m_in_n_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_keep_m_in_n
    __del__ = lambda self : None;
keep_m_in_n_swigregister = _blocks_swig3.keep_m_in_n_swigregister
keep_m_in_n_swigregister(keep_m_in_n)

def keep_m_in_n_make(*args, **kwargs):
  """
    keep_m_in_n_make(size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr

    decimate a stream, keeping  items out of every .

    Constructor Specific Documentation:

    Make a keep m in n block.

    Args:
        itemsize : stream itemsize
        m : number of items to take in block of  items
        n : block size in items
        offset : initial item offset into the stream
    """
  return _blocks_swig3.keep_m_in_n_make(*args, **kwargs)

class keep_one_in_n(object):
    """
    decimate a stream, keeping one item out of every .

    Constructor Specific Documentation:

    Make a keep one in n block.

    Args:
        itemsize : stream itemsize
        n : block size in items
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, int n) -> keep_one_in_n_sptr

        decimate a stream, keeping one item out of every .

        Constructor Specific Documentation:

        Make a keep one in n block.

        Args:
            itemsize : stream itemsize
            n : block size in items
        """
        return _blocks_swig3.keep_one_in_n_make(*args, **kwargs)

    make = staticmethod(make)
    def set_n(self, *args, **kwargs):
        """set_n(keep_one_in_n self, int n)"""
        return _blocks_swig3.keep_one_in_n_set_n(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_keep_one_in_n
    __del__ = lambda self : None;
keep_one_in_n_swigregister = _blocks_swig3.keep_one_in_n_swigregister
keep_one_in_n_swigregister(keep_one_in_n)

def keep_one_in_n_make(*args, **kwargs):
  """
    keep_one_in_n_make(size_t itemsize, int n) -> keep_one_in_n_sptr

    decimate a stream, keeping one item out of every .

    Constructor Specific Documentation:

    Make a keep one in n block.

    Args:
        itemsize : stream itemsize
        n : block size in items
    """
  return _blocks_swig3.keep_one_in_n_make(*args, **kwargs)

class lfsr_32k_source_s(object):
    """
    LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

    This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:

    Make a LFSR 32k source block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> lfsr_32k_source_s_sptr

        LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

        This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:

        Make a LFSR 32k source block.
        """
        return _blocks_swig3.lfsr_32k_source_s_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_lfsr_32k_source_s
    __del__ = lambda self : None;
lfsr_32k_source_s_swigregister = _blocks_swig3.lfsr_32k_source_s_swigregister
lfsr_32k_source_s_swigregister(lfsr_32k_source_s)

def lfsr_32k_source_s_make():
  """
    lfsr_32k_source_s_make() -> lfsr_32k_source_s_sptr

    LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

    This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:

    Make a LFSR 32k source block.
    """
  return _blocks_swig3.lfsr_32k_source_s_make()

class max_ff(object):
    """
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> max_ff_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.max_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_max_ff
    __del__ = lambda self : None;
max_ff_swigregister = _blocks_swig3.max_ff_swigregister
max_ff_swigregister(max_ff)

def max_ff_make(*args, **kwargs):
  """
    max_ff_make(size_t vlen) -> max_ff_sptr

    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.max_ff_make(*args, **kwargs)

class max_ii(object):
    """
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> max_ii_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.max_ii_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_max_ii
    __del__ = lambda self : None;
max_ii_swigregister = _blocks_swig3.max_ii_swigregister
max_ii_swigregister(max_ii)

def max_ii_make(*args, **kwargs):
  """
    max_ii_make(size_t vlen) -> max_ii_sptr

    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.max_ii_make(*args, **kwargs)

class max_ss(object):
    """
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> max_ss_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.max_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_max_ss
    __del__ = lambda self : None;
max_ss_swigregister = _blocks_swig3.max_ss_swigregister
max_ss_swigregister(max_ss)

def max_ss_make(*args, **kwargs):
  """
    max_ss_make(size_t vlen) -> max_ss_sptr

    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.max_ss_make(*args, **kwargs)

class moving_average_cc(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, gr_complex scale, int max_iter=4096) -> moving_average_cc_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_cc self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_cc_length(self)

    def scale(self):
        """
        scale(moving_average_cc self) -> gr_complex

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_cc_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_cc self, int length, gr_complex scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_cc_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_cc self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_cc_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_cc self, gr_complex scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_cc_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_cc
    __del__ = lambda self : None;
moving_average_cc_swigregister = _blocks_swig3.moving_average_cc_swigregister
moving_average_cc_swigregister(moving_average_cc)

def moving_average_cc_make(*args, **kwargs):
  """
    moving_average_cc_make(int length, gr_complex scale, int max_iter=4096) -> moving_average_cc_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
  return _blocks_swig3.moving_average_cc_make(*args, **kwargs)

class moving_average_ff(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, float scale, int max_iter=4096) -> moving_average_ff_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_ff self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_ff_length(self)

    def scale(self):
        """
        scale(moving_average_ff self) -> float

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_ff_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ff self, int length, float scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_ff_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ff self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_ff_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ff self, float scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_ff_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_ff
    __del__ = lambda self : None;
moving_average_ff_swigregister = _blocks_swig3.moving_average_ff_swigregister
moving_average_ff_swigregister(moving_average_ff)

def moving_average_ff_make(*args, **kwargs):
  """
    moving_average_ff_make(int length, float scale, int max_iter=4096) -> moving_average_ff_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
  return _blocks_swig3.moving_average_ff_make(*args, **kwargs)

class moving_average_ii(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, int scale, int max_iter=4096) -> moving_average_ii_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_ii self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_ii_length(self)

    def scale(self):
        """
        scale(moving_average_ii self) -> int

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_ii_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ii self, int length, int scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_ii_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ii self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_ii_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ii self, int scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_ii_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_ii
    __del__ = lambda self : None;
moving_average_ii_swigregister = _blocks_swig3.moving_average_ii_swigregister
moving_average_ii_swigregister(moving_average_ii)

def moving_average_ii_make(*args, **kwargs):
  """
    moving_average_ii_make(int length, int scale, int max_iter=4096) -> moving_average_ii_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
  return _blocks_swig3.moving_average_ii_make(*args, **kwargs)

class moving_average_ss(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, short scale, int max_iter=4096) -> moving_average_ss_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_ss self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_ss_length(self)

    def scale(self):
        """
        scale(moving_average_ss self) -> short

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_ss_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ss self, int length, short scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_ss_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ss self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_ss_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ss self, short scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_ss_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_ss
    __del__ = lambda self : None;
moving_average_ss_swigregister = _blocks_swig3.moving_average_ss_swigregister
moving_average_ss_swigregister(moving_average_ss)

def moving_average_ss_make(*args, **kwargs):
  """
    moving_average_ss_make(int length, short scale, int max_iter=4096) -> moving_average_ss_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
    """
  return _blocks_swig3.moving_average_ss_make(*args, **kwargs)

class multiply_ss(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_ss_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ss
    __del__ = lambda self : None;
multiply_ss_swigregister = _blocks_swig3.multiply_ss_swigregister
multiply_ss_swigregister(multiply_ss)

def multiply_ss_make(vlen=1):
  """
    multiply_ss_make(size_t vlen=1) -> multiply_ss_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.multiply_ss_make(vlen)

class multiply_ii(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_ii_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ii
    __del__ = lambda self : None;
multiply_ii_swigregister = _blocks_swig3.multiply_ii_swigregister
multiply_ii_swigregister(multiply_ii)

def multiply_ii_make(vlen=1):
  """
    multiply_ii_make(size_t vlen=1) -> multiply_ii_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.multiply_ii_make(vlen)

class multiply_ff(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of float values.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_ff_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ff
    __del__ = lambda self : None;
multiply_ff_swigregister = _blocks_swig3.multiply_ff_swigregister
multiply_ff_swigregister(multiply_ff)

def multiply_ff_make(vlen=1):
  """
    multiply_ff_make(size_t vlen=1) -> multiply_ff_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of float values.

    Args:
        vlen : Vector length
    """
  return _blocks_swig3.multiply_ff_make(vlen)

class multiply_cc(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of complex values.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_cc_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of complex values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_cc
    __del__ = lambda self : None;
multiply_cc_swigregister = _blocks_swig3.multiply_cc_swigregister
multiply_cc_swigregister(multiply_cc)

def multiply_cc_make(vlen=1):
  """
    multiply_cc_make(size_t vlen=1) -> multiply_cc_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of complex values.

    Args:
        vlen : Vector length
    """
  return _blocks_swig3.multiply_cc_make(vlen)

class multiply_conjugate_cc(object):
    """
    Multiplies stream 0 by the complex conjugate of stream 1.

    Constructor Specific Documentation:

    Multiplies a streams by the conjugate of a second stream.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_conjugate_cc_sptr

        Multiplies stream 0 by the complex conjugate of stream 1.

        Constructor Specific Documentation:

        Multiplies a streams by the conjugate of a second stream.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_conjugate_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_conjugate_cc
    __del__ = lambda self : None;
multiply_conjugate_cc_swigregister = _blocks_swig3.multiply_conjugate_cc_swigregister
multiply_conjugate_cc_swigregister(multiply_conjugate_cc)

def multiply_conjugate_cc_make(vlen=1):
  """
    multiply_conjugate_cc_make(size_t vlen=1) -> multiply_conjugate_cc_sptr

    Multiplies stream 0 by the complex conjugate of stream 1.

    Constructor Specific Documentation:

    Multiplies a streams by the conjugate of a second stream.

    Args:
        vlen : Vector length
    """
  return _blocks_swig3.multiply_conjugate_cc_make(vlen)

class multiply_const_ss(object):
    """
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ss.

    Args:
        k : multiplicative constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short k) -> multiply_const_ss_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ss.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_ss self) -> short

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ss self, short k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ss
    __del__ = lambda self : None;
multiply_const_ss_swigregister = _blocks_swig3.multiply_const_ss_swigregister
multiply_const_ss_swigregister(multiply_const_ss)

def multiply_const_ss_make(*args, **kwargs):
  """
    multiply_const_ss_make(short k) -> multiply_const_ss_sptr

    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ss.

    Args:
        k : multiplicative constant
    """
  return _blocks_swig3.multiply_const_ss_make(*args, **kwargs)

class multiply_const_ii(object):
    """
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ii.

    Args:
        k : multiplicative constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k) -> multiply_const_ii_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ii.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_ii self) -> int

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ii self, int k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ii
    __del__ = lambda self : None;
multiply_const_ii_swigregister = _blocks_swig3.multiply_const_ii_swigregister
multiply_const_ii_swigregister(multiply_const_ii)

def multiply_const_ii_make(*args, **kwargs):
  """
    multiply_const_ii_make(int k) -> multiply_const_ii_sptr

    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ii.

    Args:
        k : multiplicative constant
    """
  return _blocks_swig3.multiply_const_ii_make(*args, **kwargs)

class multiply_const_ff(object):
    """
    output = input * real constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ff.

    Args:
        k : real multiplicative constant
        vlen : Vector length of incoming stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float k, size_t vlen=1) -> multiply_const_ff_sptr

        output = input * real constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ff.

        Args:
            k : real multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_ff self) -> float

        Return real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ff self, float k)

        Set real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ff
    __del__ = lambda self : None;
multiply_const_ff_swigregister = _blocks_swig3.multiply_const_ff_swigregister
multiply_const_ff_swigregister(multiply_const_ff)

def multiply_const_ff_make(*args, **kwargs):
  """
    multiply_const_ff_make(float k, size_t vlen=1) -> multiply_const_ff_sptr

    output = input * real constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ff.

    Args:
        k : real multiplicative constant
        vlen : Vector length of incoming stream
    """
  return _blocks_swig3.multiply_const_ff_make(*args, **kwargs)

class multiply_const_cc(object):
    """
    output = input * complex constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_cc.

    Args:
        k : complex multiplicative constant
        vlen : Vector length of incoming stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr_complex k, size_t vlen=1) -> multiply_const_cc_sptr

        output = input * complex constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_cc.

        Args:
            k : complex multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_cc self) -> gr_complex

        Return complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_cc self, gr_complex k)

        Set complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_cc
    __del__ = lambda self : None;
multiply_const_cc_swigregister = _blocks_swig3.multiply_const_cc_swigregister
multiply_const_cc_swigregister(multiply_const_cc)

def multiply_const_cc_make(*args, **kwargs):
  """
    multiply_const_cc_make(gr_complex k, size_t vlen=1) -> multiply_const_cc_sptr

    output = input * complex constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_cc.

    Args:
        k : complex multiplicative constant
        vlen : Vector length of incoming stream
    """
  return _blocks_swig3.multiply_const_cc_make(*args, **kwargs)

class multiply_const_vss(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vss.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< short,std::allocator< short > > k) -> multiply_const_vss_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vss.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vss self) -> std::vector< short,std::allocator< short > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vss self, std::vector< short,std::allocator< short > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vss
    __del__ = lambda self : None;
multiply_const_vss_swigregister = _blocks_swig3.multiply_const_vss_swigregister
multiply_const_vss_swigregister(multiply_const_vss)

def multiply_const_vss_make(*args, **kwargs):
  """
    multiply_const_vss_make(std::vector< short,std::allocator< short > > k) -> multiply_const_vss_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vss.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vss_make(*args, **kwargs)

class multiply_const_vii(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vii.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< int,std::allocator< int > > k) -> multiply_const_vii_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vii.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vii self) -> std::vector< int,std::allocator< int > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vii self, std::vector< int,std::allocator< int > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vii
    __del__ = lambda self : None;
multiply_const_vii_swigregister = _blocks_swig3.multiply_const_vii_swigregister
multiply_const_vii_swigregister(multiply_const_vii)

def multiply_const_vii_make(*args, **kwargs):
  """
    multiply_const_vii_make(std::vector< int,std::allocator< int > > k) -> multiply_const_vii_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vii.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vii_make(*args, **kwargs)

class multiply_const_vff(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vff.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float k) -> multiply_const_vff_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vff.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vff self) -> pmt_vector_float

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vff self, pmt_vector_float k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vff
    __del__ = lambda self : None;
multiply_const_vff_swigregister = _blocks_swig3.multiply_const_vff_swigregister
multiply_const_vff_swigregister(multiply_const_vff)

def multiply_const_vff_make(*args, **kwargs):
  """
    multiply_const_vff_make(pmt_vector_float k) -> multiply_const_vff_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vff.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vff_make(*args, **kwargs)

class multiply_const_vcc(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vcc.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat k) -> multiply_const_vcc_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vcc.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vcc self) -> pmt_vector_cfloat

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vcc self, pmt_vector_cfloat k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vcc
    __del__ = lambda self : None;
multiply_const_vcc_swigregister = _blocks_swig3.multiply_const_vcc_swigregister
multiply_const_vcc_swigregister(multiply_const_vcc)

def multiply_const_vcc_make(*args, **kwargs):
  """
    multiply_const_vcc_make(pmt_vector_cfloat k) -> multiply_const_vcc_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vcc.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vcc_make(*args, **kwargs)

class mute_ss(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_ss_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ss_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_ss self) -> bool"""
        return _blocks_swig3.mute_ss_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ss self, bool mute=False)"""
        return _blocks_swig3.mute_ss_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_ss
    __del__ = lambda self : None;
mute_ss_swigregister = _blocks_swig3.mute_ss_swigregister
mute_ss_swigregister(mute_ss)

def mute_ss_make(mute=False):
  """
    mute_ss_make(bool mute=False) -> mute_ss_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_ss_make(mute)

class mute_ii(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_ii_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ii_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_ii self) -> bool"""
        return _blocks_swig3.mute_ii_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ii self, bool mute=False)"""
        return _blocks_swig3.mute_ii_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_ii
    __del__ = lambda self : None;
mute_ii_swigregister = _blocks_swig3.mute_ii_swigregister
mute_ii_swigregister(mute_ii)

def mute_ii_make(mute=False):
  """
    mute_ii_make(bool mute=False) -> mute_ii_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_ii_make(mute)

class mute_ff(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_ff_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ff_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_ff self) -> bool"""
        return _blocks_swig3.mute_ff_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ff self, bool mute=False)"""
        return _blocks_swig3.mute_ff_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_ff
    __del__ = lambda self : None;
mute_ff_swigregister = _blocks_swig3.mute_ff_swigregister
mute_ff_swigregister(mute_ff)

def mute_ff_make(mute=False):
  """
    mute_ff_make(bool mute=False) -> mute_ff_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_ff_make(mute)

class mute_cc(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_cc_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_cc_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_cc self) -> bool"""
        return _blocks_swig3.mute_cc_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_cc self, bool mute=False)"""
        return _blocks_swig3.mute_cc_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_cc
    __del__ = lambda self : None;
mute_cc_swigregister = _blocks_swig3.mute_cc_swigregister
mute_cc_swigregister(mute_cc)

def mute_cc_make(mute=False):
  """
    mute_cc_make(bool mute=False) -> mute_cc_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_cc_make(mute)

class float_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_char)> self) -> float_to_char_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_char)> self, float_to_char p) -> float_to_char_sptr
        """
        this = _blocks_swig3.new_float_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_char_sptr self) -> float_to_char"""
        return _blocks_swig3.float_to_char_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_float_to_char_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(float_to_char_sptr self, size_t vlen=1, float scale=1.0) -> float_to_char_sptr

        Convert stream of floats to a stream of char.

        Constructor Specific Documentation:

        Build a float to char block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig3.float_to_char_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(float_to_char_sptr self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig3.float_to_char_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_char_sptr self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig3.float_to_char_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(float_to_char_sptr self) -> unsigned int"""
        return _blocks_swig3.float_to_char_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_char_sptr self, int which, int delay)
        declare_sample_delay(float_to_char_sptr self, unsigned int delay)
        """
        return _blocks_swig3.float_to_char_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_char_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.float_to_char_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_char_sptr self) -> int"""
        return _blocks_swig3.float_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_char_sptr self) -> double"""
        return _blocks_swig3.float_to_char_sptr_relative_rate(self)

    def start(self):
        """start(float_to_char_sptr self) -> bool"""
        return _blocks_swig3.float_to_char_sptr_start(self)

    def stop(self):
        """stop(float_to_char_sptr self) -> bool"""
        return _blocks_swig3.float_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_char_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.float_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_char_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.float_to_char_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_char_sptr self) -> int"""
        return _blocks_swig3.float_to_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_char_sptr self, int m)"""
        return _blocks_swig3.float_to_char_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_char_sptr self)"""
        return _blocks_swig3.float_to_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_char_sptr self) -> bool"""
        return _blocks_swig3.float_to_char_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_char_sptr self, int m)"""
        return _blocks_swig3.float_to_char_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_char_sptr self) -> int"""
        return _blocks_swig3.float_to_char_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_char_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_char_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_char_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_char_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.float_to_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_char_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_char_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_char_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_char_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.float_to_char_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_char_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_char_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_char_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_char_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_char_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_char_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_char_sptr self) -> float"""
        return _blocks_swig3.float_to_char_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_char_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.float_to_char_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_char_sptr self)"""
        return _blocks_swig3.float_to_char_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_char_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.float_to_char_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_char_sptr self) -> int"""
        return _blocks_swig3.float_to_char_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_char_sptr self) -> int"""
        return _blocks_swig3.float_to_char_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_char_sptr self, int priority) -> int"""
        return _blocks_swig3.float_to_char_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_char_sptr self) -> std::string"""
        return _blocks_swig3.float_to_char_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_char_sptr self) -> std::string"""
        return _blocks_swig3.float_to_char_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_char_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_char_sptr self) -> long"""
        return _blocks_swig3.float_to_char_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_char_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.float_to_char_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_char_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.float_to_char_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_char_sptr self) -> std::string"""
        return _blocks_swig3.float_to_char_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_char_sptr self, std::string name)"""
        return _blocks_swig3.float_to_char_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_char_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.float_to_char_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_char_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_char_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_char_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.float_to_char_sptr_message_subscribers(self, *args, **kwargs)

float_to_char_sptr_swigregister = _blocks_swig3.float_to_char_sptr_swigregister
float_to_char_sptr_swigregister(float_to_char_sptr)

float_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_char = float_to_char.make;

class float_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_complex)> self) -> float_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_complex)> self, float_to_complex p) -> float_to_complex_sptr
        """
        this = _blocks_swig3.new_float_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_complex_sptr self) -> float_to_complex"""
        return _blocks_swig3.float_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_float_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(float_to_complex_sptr self, size_t vlen=1) -> float_to_complex_sptr

        one or two floats in, complex out

        Constructor Specific Documentation:

        Build a float to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig3.float_to_complex_sptr_make(self, vlen)

    def history(self):
        """history(float_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig3.float_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_complex_sptr self, int which, int delay)
        declare_sample_delay(float_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig3.float_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.float_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_complex_sptr self) -> int"""
        return _blocks_swig3.float_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_complex_sptr self) -> double"""
        return _blocks_swig3.float_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(float_to_complex_sptr self) -> bool"""
        return _blocks_swig3.float_to_complex_sptr_start(self)

    def stop(self):
        """stop(float_to_complex_sptr self) -> bool"""
        return _blocks_swig3.float_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.float_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.float_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_complex_sptr self) -> int"""
        return _blocks_swig3.float_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_complex_sptr self, int m)"""
        return _blocks_swig3.float_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_complex_sptr self)"""
        return _blocks_swig3.float_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_complex_sptr self) -> bool"""
        return _blocks_swig3.float_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_complex_sptr self, int m)"""
        return _blocks_swig3.float_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_complex_sptr self) -> int"""
        return _blocks_swig3.float_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_complex_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.float_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_complex_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.float_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_complex_sptr self) -> float"""
        return _blocks_swig3.float_to_complex_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.float_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_complex_sptr self)"""
        return _blocks_swig3.float_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.float_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_complex_sptr self) -> int"""
        return _blocks_swig3.float_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_complex_sptr self) -> int"""
        return _blocks_swig3.float_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig3.float_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.float_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.float_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_complex_sptr self) -> long"""
        return _blocks_swig3.float_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.float_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.float_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.float_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_complex_sptr self, std::string name)"""
        return _blocks_swig3.float_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.float_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.float_to_complex_sptr_message_subscribers(self, *args, **kwargs)

float_to_complex_sptr_swigregister = _blocks_swig3.float_to_complex_sptr_swigregister
float_to_complex_sptr_swigregister(float_to_complex_sptr)

float_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_complex = float_to_complex.make;

class float_to_int_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_int)> self) -> float_to_int_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_int)> self, float_to_int p) -> float_to_int_sptr
        """
        this = _blocks_swig3.new_float_to_int_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_int_sptr self) -> float_to_int"""
        return _blocks_swig3.float_to_int_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_float_to_int_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(float_to_int_sptr self, size_t vlen=1, float scale=1.0) -> float_to_int_sptr

        Convert stream of floats to a stream of ints.

        Constructor Specific Documentation:

        Build a float to int block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig3.float_to_int_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(float_to_int_sptr self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig3.float_to_int_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_int_sptr self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig3.float_to_int_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(float_to_int_sptr self) -> unsigned int"""
        return _blocks_swig3.float_to_int_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_int_sptr self, int which, int delay)
        declare_sample_delay(float_to_int_sptr self, unsigned int delay)
        """
        return _blocks_swig3.float_to_int_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_int_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.float_to_int_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_int_sptr self) -> int"""
        return _blocks_swig3.float_to_int_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_int_sptr self) -> double"""
        return _blocks_swig3.float_to_int_sptr_relative_rate(self)

    def start(self):
        """start(float_to_int_sptr self) -> bool"""
        return _blocks_swig3.float_to_int_sptr_start(self)

    def stop(self):
        """stop(float_to_int_sptr self) -> bool"""
        return _blocks_swig3.float_to_int_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_int_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.float_to_int_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_int_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.float_to_int_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_int_sptr self) -> int"""
        return _blocks_swig3.float_to_int_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_int_sptr self, int m)"""
        return _blocks_swig3.float_to_int_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_int_sptr self)"""
        return _blocks_swig3.float_to_int_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_int_sptr self) -> bool"""
        return _blocks_swig3.float_to_int_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_int_sptr self, int m)"""
        return _blocks_swig3.float_to_int_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_int_sptr self) -> int"""
        return _blocks_swig3.float_to_int_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_int_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_int_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_int_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_int_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.float_to_int_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_int_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_int_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_int_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_int_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.float_to_int_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_int_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_int_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_int_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_int_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_int_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_int_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_int_sptr self) -> float"""
        return _blocks_swig3.float_to_int_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_int_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.float_to_int_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_int_sptr self)"""
        return _blocks_swig3.float_to_int_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_int_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.float_to_int_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_int_sptr self) -> int"""
        return _blocks_swig3.float_to_int_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_int_sptr self) -> int"""
        return _blocks_swig3.float_to_int_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_int_sptr self, int priority) -> int"""
        return _blocks_swig3.float_to_int_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_int_sptr self) -> std::string"""
        return _blocks_swig3.float_to_int_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_int_sptr self) -> std::string"""
        return _blocks_swig3.float_to_int_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_int_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_int_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_int_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_int_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_int_sptr self) -> long"""
        return _blocks_swig3.float_to_int_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_int_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.float_to_int_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_int_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.float_to_int_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_int_sptr self) -> std::string"""
        return _blocks_swig3.float_to_int_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_int_sptr self, std::string name)"""
        return _blocks_swig3.float_to_int_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_int_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.float_to_int_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_int_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_int_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_int_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_int_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_int_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.float_to_int_sptr_message_subscribers(self, *args, **kwargs)

float_to_int_sptr_swigregister = _blocks_swig3.float_to_int_sptr_swigregister
float_to_int_sptr_swigregister(float_to_int_sptr)

float_to_int_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_int = float_to_int.make;

class float_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_short)> self) -> float_to_short_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_short)> self, float_to_short p) -> float_to_short_sptr
        """
        this = _blocks_swig3.new_float_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_short_sptr self) -> float_to_short"""
        return _blocks_swig3.float_to_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_float_to_short_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(float_to_short_sptr self, size_t vlen=1, float scale=1.0) -> float_to_short_sptr

        Convert stream of floats to a stream of shorts.

        Constructor Specific Documentation:

        Build a float to short block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig3.float_to_short_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(float_to_short_sptr self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig3.float_to_short_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_short_sptr self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig3.float_to_short_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(float_to_short_sptr self) -> unsigned int"""
        return _blocks_swig3.float_to_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_short_sptr self, int which, int delay)
        declare_sample_delay(float_to_short_sptr self, unsigned int delay)
        """
        return _blocks_swig3.float_to_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.float_to_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_short_sptr self) -> int"""
        return _blocks_swig3.float_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_short_sptr self) -> double"""
        return _blocks_swig3.float_to_short_sptr_relative_rate(self)

    def start(self):
        """start(float_to_short_sptr self) -> bool"""
        return _blocks_swig3.float_to_short_sptr_start(self)

    def stop(self):
        """stop(float_to_short_sptr self) -> bool"""
        return _blocks_swig3.float_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.float_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.float_to_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_short_sptr self) -> int"""
        return _blocks_swig3.float_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_short_sptr self, int m)"""
        return _blocks_swig3.float_to_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_short_sptr self)"""
        return _blocks_swig3.float_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_short_sptr self) -> bool"""
        return _blocks_swig3.float_to_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_short_sptr self, int m)"""
        return _blocks_swig3.float_to_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_short_sptr self) -> int"""
        return _blocks_swig3.float_to_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_short_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_short_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.float_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_short_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_short_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.float_to_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_short_sptr self) -> float"""
        return _blocks_swig3.float_to_short_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.float_to_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_short_sptr self)"""
        return _blocks_swig3.float_to_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.float_to_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_short_sptr self) -> int"""
        return _blocks_swig3.float_to_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_short_sptr self) -> int"""
        return _blocks_swig3.float_to_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_short_sptr self, int priority) -> int"""
        return _blocks_swig3.float_to_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_short_sptr self) -> std::string"""
        return _blocks_swig3.float_to_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_short_sptr self) -> std::string"""
        return _blocks_swig3.float_to_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_short_sptr self) -> long"""
        return _blocks_swig3.float_to_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.float_to_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.float_to_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_short_sptr self) -> std::string"""
        return _blocks_swig3.float_to_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_short_sptr self, std::string name)"""
        return _blocks_swig3.float_to_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.float_to_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.float_to_short_sptr_message_subscribers(self, *args, **kwargs)

float_to_short_sptr_swigregister = _blocks_swig3.float_to_short_sptr_swigregister
float_to_short_sptr_swigregister(float_to_short_sptr)

float_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_short = float_to_short.make;

class float_to_uchar_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_uchar)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_uchar)> self) -> float_to_uchar_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_uchar)> self, float_to_uchar p) -> float_to_uchar_sptr
        """
        this = _blocks_swig3.new_float_to_uchar_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_uchar_sptr self) -> float_to_uchar"""
        return _blocks_swig3.float_to_uchar_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_float_to_uchar_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(float_to_uchar_sptr self) -> float_to_uchar_sptr

        Convert stream of floats to a stream of unsigned chars.

        Constructor Specific Documentation:

        Build a float to uchar block.
        """
        return _blocks_swig3.float_to_uchar_sptr_make(self)

    def history(self):
        """history(float_to_uchar_sptr self) -> unsigned int"""
        return _blocks_swig3.float_to_uchar_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_uchar_sptr self, int which, int delay)
        declare_sample_delay(float_to_uchar_sptr self, unsigned int delay)
        """
        return _blocks_swig3.float_to_uchar_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_uchar_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.float_to_uchar_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_uchar_sptr self) -> int"""
        return _blocks_swig3.float_to_uchar_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_uchar_sptr self) -> double"""
        return _blocks_swig3.float_to_uchar_sptr_relative_rate(self)

    def start(self):
        """start(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig3.float_to_uchar_sptr_start(self)

    def stop(self):
        """stop(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig3.float_to_uchar_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_uchar_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.float_to_uchar_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_uchar_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.float_to_uchar_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_uchar_sptr self) -> int"""
        return _blocks_swig3.float_to_uchar_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_uchar_sptr self, int m)"""
        return _blocks_swig3.float_to_uchar_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_uchar_sptr self)"""
        return _blocks_swig3.float_to_uchar_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig3.float_to_uchar_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_uchar_sptr self, int m)"""
        return _blocks_swig3.float_to_uchar_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_uchar_sptr self) -> int"""
        return _blocks_swig3.float_to_uchar_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_uchar_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_uchar_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_uchar_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_uchar_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.float_to_uchar_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_uchar_sptr self, int i) -> long"""
        return _blocks_swig3.float_to_uchar_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_uchar_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_uchar_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.float_to_uchar_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_uchar_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_uchar_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_uchar_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_uchar_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_uchar_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.float_to_uchar_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_uchar_sptr self) -> float"""
        return _blocks_swig3.float_to_uchar_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_uchar_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.float_to_uchar_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_uchar_sptr self)"""
        return _blocks_swig3.float_to_uchar_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_uchar_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.float_to_uchar_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_uchar_sptr self) -> int"""
        return _blocks_swig3.float_to_uchar_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_uchar_sptr self) -> int"""
        return _blocks_swig3.float_to_uchar_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_uchar_sptr self, int priority) -> int"""
        return _blocks_swig3.float_to_uchar_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig3.float_to_uchar_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig3.float_to_uchar_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_uchar_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_uchar_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_uchar_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.float_to_uchar_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_uchar_sptr self) -> long"""
        return _blocks_swig3.float_to_uchar_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_uchar_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.float_to_uchar_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_uchar_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.float_to_uchar_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig3.float_to_uchar_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_uchar_sptr self, std::string name)"""
        return _blocks_swig3.float_to_uchar_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_uchar_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.float_to_uchar_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_uchar_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_uchar_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_uchar_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.float_to_uchar_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_uchar_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.float_to_uchar_sptr_message_subscribers(self, *args, **kwargs)

float_to_uchar_sptr_swigregister = _blocks_swig3.float_to_uchar_sptr_swigregister
float_to_uchar_sptr_swigregister(float_to_uchar_sptr)

float_to_uchar_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_uchar = float_to_uchar.make;

class int_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::int_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::int_to_float)> self) -> int_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::int_to_float)> self, int_to_float p) -> int_to_float_sptr
        """
        this = _blocks_swig3.new_int_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(int_to_float_sptr self) -> int_to_float"""
        return _blocks_swig3.int_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_int_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(int_to_float_sptr self, size_t vlen=1, float scale=1.0) -> int_to_float_sptr

        Convert stream of ints to a stream of floats.

        Constructor Specific Documentation:

        Build an int to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig3.int_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(int_to_float_sptr self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig3.int_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(int_to_float_sptr self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig3.int_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(int_to_float_sptr self) -> unsigned int"""
        return _blocks_swig3.int_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(int_to_float_sptr self, int which, int delay)
        declare_sample_delay(int_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig3.int_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(int_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.int_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(int_to_float_sptr self) -> int"""
        return _blocks_swig3.int_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(int_to_float_sptr self) -> double"""
        return _blocks_swig3.int_to_float_sptr_relative_rate(self)

    def start(self):
        """start(int_to_float_sptr self) -> bool"""
        return _blocks_swig3.int_to_float_sptr_start(self)

    def stop(self):
        """stop(int_to_float_sptr self) -> bool"""
        return _blocks_swig3.int_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(int_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.int_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(int_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.int_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(int_to_float_sptr self) -> int"""
        return _blocks_swig3.int_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(int_to_float_sptr self, int m)"""
        return _blocks_swig3.int_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(int_to_float_sptr self)"""
        return _blocks_swig3.int_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(int_to_float_sptr self) -> bool"""
        return _blocks_swig3.int_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(int_to_float_sptr self, int m)"""
        return _blocks_swig3.int_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(int_to_float_sptr self) -> int"""
        return _blocks_swig3.int_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(int_to_float_sptr self, int i) -> long"""
        return _blocks_swig3.int_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(int_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(int_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.int_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(int_to_float_sptr self, int i) -> long"""
        return _blocks_swig3.int_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(int_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(int_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.int_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.int_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.int_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.int_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.int_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.int_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.int_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(int_to_float_sptr self) -> float"""
        return _blocks_swig3.int_to_float_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(int_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.int_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(int_to_float_sptr self)"""
        return _blocks_swig3.int_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(int_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.int_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(int_to_float_sptr self) -> int"""
        return _blocks_swig3.int_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(int_to_float_sptr self) -> int"""
        return _blocks_swig3.int_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(int_to_float_sptr self, int priority) -> int"""
        return _blocks_swig3.int_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(int_to_float_sptr self) -> std::string"""
        return _blocks_swig3.int_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(int_to_float_sptr self) -> std::string"""
        return _blocks_swig3.int_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(int_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.int_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(int_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.int_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(int_to_float_sptr self) -> long"""
        return _blocks_swig3.int_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(int_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.int_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(int_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.int_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(int_to_float_sptr self) -> std::string"""
        return _blocks_swig3.int_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(int_to_float_sptr self, std::string name)"""
        return _blocks_swig3.int_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(int_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.int_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(int_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.int_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(int_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.int_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(int_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.int_to_float_sptr_message_subscribers(self, *args, **kwargs)

int_to_float_sptr_swigregister = _blocks_swig3.int_to_float_sptr_swigregister
int_to_float_sptr_swigregister(int_to_float_sptr)

int_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
int_to_float = int_to_float.make;

class integrate_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_ss)> self) -> integrate_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_ss)> self, integrate_ss p) -> integrate_ss_sptr
        """
        this = _blocks_swig3.new_integrate_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_ss_sptr self) -> integrate_ss"""
        return _blocks_swig3.integrate_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_integrate_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_ss_sptr self, int decim) -> integrate_ss_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.integrate_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_ss_sptr self, int which, int delay)
        declare_sample_delay(integrate_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.integrate_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.integrate_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_ss_sptr self) -> int"""
        return _blocks_swig3.integrate_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_ss_sptr self) -> double"""
        return _blocks_swig3.integrate_ss_sptr_relative_rate(self)

    def start(self):
        """start(integrate_ss_sptr self) -> bool"""
        return _blocks_swig3.integrate_ss_sptr_start(self)

    def stop(self):
        """stop(integrate_ss_sptr self) -> bool"""
        return _blocks_swig3.integrate_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.integrate_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.integrate_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_ss_sptr self) -> int"""
        return _blocks_swig3.integrate_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_ss_sptr self, int m)"""
        return _blocks_swig3.integrate_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_ss_sptr self)"""
        return _blocks_swig3.integrate_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_ss_sptr self) -> bool"""
        return _blocks_swig3.integrate_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_ss_sptr self, int m)"""
        return _blocks_swig3.integrate_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_ss_sptr self) -> int"""
        return _blocks_swig3.integrate_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_ss_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.integrate_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_ss_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.integrate_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_ss_sptr self) -> float"""
        return _blocks_swig3.integrate_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.integrate_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_ss_sptr self)"""
        return _blocks_swig3.integrate_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.integrate_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_ss_sptr self) -> int"""
        return _blocks_swig3.integrate_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_ss_sptr self) -> int"""
        return _blocks_swig3.integrate_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.integrate_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_ss_sptr self) -> long"""
        return _blocks_swig3.integrate_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.integrate_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.integrate_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_ss_sptr self, std::string name)"""
        return _blocks_swig3.integrate_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.integrate_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ss_sptr_message_subscribers(self, *args, **kwargs)

integrate_ss_sptr_swigregister = _blocks_swig3.integrate_ss_sptr_swigregister
integrate_ss_sptr_swigregister(integrate_ss_sptr)

integrate_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ss = integrate_ss.make;

class integrate_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_ii)> self) -> integrate_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_ii)> self, integrate_ii p) -> integrate_ii_sptr
        """
        this = _blocks_swig3.new_integrate_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_ii_sptr self) -> integrate_ii"""
        return _blocks_swig3.integrate_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_integrate_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_ii_sptr self, int decim) -> integrate_ii_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_ii_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.integrate_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_ii_sptr self, int which, int delay)
        declare_sample_delay(integrate_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.integrate_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.integrate_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_ii_sptr self) -> int"""
        return _blocks_swig3.integrate_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_ii_sptr self) -> double"""
        return _blocks_swig3.integrate_ii_sptr_relative_rate(self)

    def start(self):
        """start(integrate_ii_sptr self) -> bool"""
        return _blocks_swig3.integrate_ii_sptr_start(self)

    def stop(self):
        """stop(integrate_ii_sptr self) -> bool"""
        return _blocks_swig3.integrate_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.integrate_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.integrate_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_ii_sptr self) -> int"""
        return _blocks_swig3.integrate_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_ii_sptr self, int m)"""
        return _blocks_swig3.integrate_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_ii_sptr self)"""
        return _blocks_swig3.integrate_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_ii_sptr self) -> bool"""
        return _blocks_swig3.integrate_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_ii_sptr self, int m)"""
        return _blocks_swig3.integrate_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_ii_sptr self) -> int"""
        return _blocks_swig3.integrate_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_ii_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.integrate_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_ii_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.integrate_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_ii_sptr self) -> float"""
        return _blocks_swig3.integrate_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.integrate_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_ii_sptr self)"""
        return _blocks_swig3.integrate_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.integrate_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_ii_sptr self) -> int"""
        return _blocks_swig3.integrate_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_ii_sptr self) -> int"""
        return _blocks_swig3.integrate_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.integrate_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_ii_sptr self) -> long"""
        return _blocks_swig3.integrate_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.integrate_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.integrate_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_ii_sptr self, std::string name)"""
        return _blocks_swig3.integrate_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.integrate_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ii_sptr_message_subscribers(self, *args, **kwargs)

integrate_ii_sptr_swigregister = _blocks_swig3.integrate_ii_sptr_swigregister
integrate_ii_sptr_swigregister(integrate_ii_sptr)

integrate_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ii = integrate_ii.make;

class integrate_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_ff)> self) -> integrate_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_ff)> self, integrate_ff p) -> integrate_ff_sptr
        """
        this = _blocks_swig3.new_integrate_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_ff_sptr self) -> integrate_ff"""
        return _blocks_swig3.integrate_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_integrate_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_ff_sptr self, int decim) -> integrate_ff_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.integrate_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_ff_sptr self, int which, int delay)
        declare_sample_delay(integrate_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.integrate_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.integrate_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_ff_sptr self) -> int"""
        return _blocks_swig3.integrate_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_ff_sptr self) -> double"""
        return _blocks_swig3.integrate_ff_sptr_relative_rate(self)

    def start(self):
        """start(integrate_ff_sptr self) -> bool"""
        return _blocks_swig3.integrate_ff_sptr_start(self)

    def stop(self):
        """stop(integrate_ff_sptr self) -> bool"""
        return _blocks_swig3.integrate_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.integrate_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.integrate_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_ff_sptr self) -> int"""
        return _blocks_swig3.integrate_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_ff_sptr self, int m)"""
        return _blocks_swig3.integrate_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_ff_sptr self)"""
        return _blocks_swig3.integrate_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_ff_sptr self) -> bool"""
        return _blocks_swig3.integrate_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_ff_sptr self, int m)"""
        return _blocks_swig3.integrate_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_ff_sptr self) -> int"""
        return _blocks_swig3.integrate_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_ff_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.integrate_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_ff_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.integrate_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_ff_sptr self) -> float"""
        return _blocks_swig3.integrate_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.integrate_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_ff_sptr self)"""
        return _blocks_swig3.integrate_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.integrate_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_ff_sptr self) -> int"""
        return _blocks_swig3.integrate_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_ff_sptr self) -> int"""
        return _blocks_swig3.integrate_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.integrate_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_ff_sptr self) -> long"""
        return _blocks_swig3.integrate_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.integrate_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.integrate_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig3.integrate_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_ff_sptr self, std::string name)"""
        return _blocks_swig3.integrate_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.integrate_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.integrate_ff_sptr_message_subscribers(self, *args, **kwargs)

integrate_ff_sptr_swigregister = _blocks_swig3.integrate_ff_sptr_swigregister
integrate_ff_sptr_swigregister(integrate_ff_sptr)

integrate_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ff = integrate_ff.make;

class integrate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_cc)> self) -> integrate_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_cc)> self, integrate_cc p) -> integrate_cc_sptr
        """
        this = _blocks_swig3.new_integrate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_cc_sptr self) -> integrate_cc"""
        return _blocks_swig3.integrate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_integrate_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_cc_sptr self, int decim) -> integrate_cc_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
        """
        return _blocks_swig3.integrate_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.integrate_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_cc_sptr self, int which, int delay)
        declare_sample_delay(integrate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.integrate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.integrate_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_cc_sptr self) -> int"""
        return _blocks_swig3.integrate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_cc_sptr self) -> double"""
        return _blocks_swig3.integrate_cc_sptr_relative_rate(self)

    def start(self):
        """start(integrate_cc_sptr self) -> bool"""
        return _blocks_swig3.integrate_cc_sptr_start(self)

    def stop(self):
        """stop(integrate_cc_sptr self) -> bool"""
        return _blocks_swig3.integrate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.integrate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.integrate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_cc_sptr self) -> int"""
        return _blocks_swig3.integrate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_cc_sptr self, int m)"""
        return _blocks_swig3.integrate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_cc_sptr self)"""
        return _blocks_swig3.integrate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_cc_sptr self) -> bool"""
        return _blocks_swig3.integrate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_cc_sptr self, int m)"""
        return _blocks_swig3.integrate_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_cc_sptr self) -> int"""
        return _blocks_swig3.integrate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.integrate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.integrate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.integrate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.integrate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_cc_sptr self) -> float"""
        return _blocks_swig3.integrate_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.integrate_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_cc_sptr self)"""
        return _blocks_swig3.integrate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.integrate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_cc_sptr self) -> int"""
        return _blocks_swig3.integrate_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_cc_sptr self) -> int"""
        return _blocks_swig3.integrate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.integrate_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig3.integrate_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig3.integrate_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.integrate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_cc_sptr self) -> long"""
        return _blocks_swig3.integrate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.integrate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.integrate_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig3.integrate_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_cc_sptr self, std::string name)"""
        return _blocks_swig3.integrate_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.integrate_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.integrate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.integrate_cc_sptr_message_subscribers(self, *args, **kwargs)

integrate_cc_sptr_swigregister = _blocks_swig3.integrate_cc_sptr_swigregister
integrate_cc_sptr_swigregister(integrate_cc_sptr)

integrate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_cc = integrate_cc.make;

class interleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::interleave)> self) -> interleave_sptr
        __init__(boost::shared_ptr<(gr::blocks::interleave)> self, interleave p) -> interleave_sptr
        """
        this = _blocks_swig3.new_interleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(interleave_sptr self) -> interleave"""
        return _blocks_swig3.interleave_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_interleave_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(interleave_sptr self, size_t itemsize, unsigned int blocksize=1) -> interleave_sptr

        interleave N inputs into a single output

        This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from eahc input to the output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a stream interleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block of samples to interleave
        """
        return _blocks_swig3.interleave_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(interleave_sptr self) -> unsigned int"""
        return _blocks_swig3.interleave_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleave_sptr self, int which, int delay)
        declare_sample_delay(interleave_sptr self, unsigned int delay)
        """
        return _blocks_swig3.interleave_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(interleave_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.interleave_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(interleave_sptr self) -> int"""
        return _blocks_swig3.interleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(interleave_sptr self) -> double"""
        return _blocks_swig3.interleave_sptr_relative_rate(self)

    def start(self):
        """start(interleave_sptr self) -> bool"""
        return _blocks_swig3.interleave_sptr_start(self)

    def stop(self):
        """stop(interleave_sptr self) -> bool"""
        return _blocks_swig3.interleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(interleave_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.interleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(interleave_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.interleave_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(interleave_sptr self) -> int"""
        return _blocks_swig3.interleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(interleave_sptr self, int m)"""
        return _blocks_swig3.interleave_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleave_sptr self)"""
        return _blocks_swig3.interleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleave_sptr self) -> bool"""
        return _blocks_swig3.interleave_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(interleave_sptr self, int m)"""
        return _blocks_swig3.interleave_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(interleave_sptr self) -> int"""
        return _blocks_swig3.interleave_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(interleave_sptr self, int i) -> long"""
        return _blocks_swig3.interleave_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleave_sptr self, long max_output_buffer)
        set_max_output_buffer(interleave_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.interleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(interleave_sptr self, int i) -> long"""
        return _blocks_swig3.interleave_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleave_sptr self, long min_output_buffer)
        set_min_output_buffer(interleave_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.interleave_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleave_sptr self, int which) -> float
        pc_input_buffers_full(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleave_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleave_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleave_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleave_sptr self, int which) -> float
        pc_input_buffers_full_var(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleave_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleave_sptr self, int which) -> float
        pc_output_buffers_full(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleave_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleave_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleave_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleave_sptr self, int which) -> float
        pc_output_buffers_full_var(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleave_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(interleave_sptr self) -> float"""
        return _blocks_swig3.interleave_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(interleave_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.interleave_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(interleave_sptr self)"""
        return _blocks_swig3.interleave_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(interleave_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.interleave_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(interleave_sptr self) -> int"""
        return _blocks_swig3.interleave_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(interleave_sptr self) -> int"""
        return _blocks_swig3.interleave_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(interleave_sptr self, int priority) -> int"""
        return _blocks_swig3.interleave_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(interleave_sptr self) -> std::string"""
        return _blocks_swig3.interleave_sptr_name(self)

    def symbol_name(self):
        """symbol_name(interleave_sptr self) -> std::string"""
        return _blocks_swig3.interleave_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(interleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.interleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(interleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.interleave_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(interleave_sptr self) -> long"""
        return _blocks_swig3.interleave_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(interleave_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.interleave_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(interleave_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.interleave_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(interleave_sptr self) -> std::string"""
        return _blocks_swig3.interleave_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(interleave_sptr self, std::string name)"""
        return _blocks_swig3.interleave_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(interleave_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.interleave_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(interleave_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.interleave_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(interleave_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.interleave_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(interleave_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.interleave_sptr_message_subscribers(self, *args, **kwargs)

interleave_sptr_swigregister = _blocks_swig3.interleave_sptr_swigregister
interleave_sptr_swigregister(interleave_sptr)

interleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleave = interleave.make;

class interleaved_short_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> self) -> interleaved_short_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> self, interleaved_short_to_complex p) -> interleaved_short_to_complex_sptr
        """
        this = _blocks_swig3.new_interleaved_short_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(interleaved_short_to_complex_sptr self) -> interleaved_short_to_complex"""
        return _blocks_swig3.interleaved_short_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_interleaved_short_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vector_input=False, swap=False):
        """
        make(interleaved_short_to_complex_sptr self, bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr

        Convert stream of interleaved shorts to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved short to complex block.

        Args:
            vector_input : 
            swap : 
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_make(self, vector_input, swap)

    def set_swap(self, *args, **kwargs):
        """set_swap(interleaved_short_to_complex_sptr self, bool swap)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_swap(self, *args, **kwargs)

    def history(self):
        """history(interleaved_short_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleaved_short_to_complex_sptr self, int which, int delay)
        declare_sample_delay(interleaved_short_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(interleaved_short_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(interleaved_short_to_complex_sptr self) -> double"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_start(self)

    def stop(self):
        """stop(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(interleaved_short_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(interleaved_short_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(interleaved_short_to_complex_sptr self, int m)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleaved_short_to_complex_sptr self)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(interleaved_short_to_complex_sptr self, int m)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(interleaved_short_to_complex_sptr self, int i) -> long"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleaved_short_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaved_short_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(interleaved_short_to_complex_sptr self, int i) -> long"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleaved_short_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaved_short_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(interleaved_short_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(interleaved_short_to_complex_sptr self)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(interleaved_short_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(interleaved_short_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(interleaved_short_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(interleaved_short_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(interleaved_short_to_complex_sptr self) -> long"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(interleaved_short_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(interleaved_short_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(interleaved_short_to_complex_sptr self, std::string name)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(interleaved_short_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.interleaved_short_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(interleaved_short_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(interleaved_short_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(interleaved_short_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.interleaved_short_to_complex_sptr_message_subscribers(self, *args, **kwargs)

interleaved_short_to_complex_sptr_swigregister = _blocks_swig3.interleaved_short_to_complex_sptr_swigregister
interleaved_short_to_complex_sptr_swigregister(interleaved_short_to_complex_sptr)

interleaved_short_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_short_to_complex = interleaved_short_to_complex.make;

class interleaved_char_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleaved_char_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::interleaved_char_to_complex)> self) -> interleaved_char_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::interleaved_char_to_complex)> self, interleaved_char_to_complex p) -> interleaved_char_to_complex_sptr
        """
        this = _blocks_swig3.new_interleaved_char_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(interleaved_char_to_complex_sptr self) -> interleaved_char_to_complex"""
        return _blocks_swig3.interleaved_char_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_interleaved_char_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vector_input=False):
        """
        make(interleaved_char_to_complex_sptr self, bool vector_input=False) -> interleaved_char_to_complex_sptr

        Convert stream of interleaved chars to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved char to complex block.

        Args:
            vector_input : 
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_make(self, vector_input)

    def history(self):
        """history(interleaved_char_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleaved_char_to_complex_sptr self, int which, int delay)
        declare_sample_delay(interleaved_char_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(interleaved_char_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(interleaved_char_to_complex_sptr self) -> double"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_start(self)

    def stop(self):
        """stop(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(interleaved_char_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(interleaved_char_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(interleaved_char_to_complex_sptr self, int m)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleaved_char_to_complex_sptr self)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(interleaved_char_to_complex_sptr self, int m)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(interleaved_char_to_complex_sptr self, int i) -> long"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleaved_char_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaved_char_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(interleaved_char_to_complex_sptr self, int i) -> long"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleaved_char_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaved_char_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(interleaved_char_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(interleaved_char_to_complex_sptr self)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(interleaved_char_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(interleaved_char_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(interleaved_char_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(interleaved_char_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(interleaved_char_to_complex_sptr self) -> long"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(interleaved_char_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(interleaved_char_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(interleaved_char_to_complex_sptr self, std::string name)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(interleaved_char_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.interleaved_char_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(interleaved_char_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(interleaved_char_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(interleaved_char_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.interleaved_char_to_complex_sptr_message_subscribers(self, *args, **kwargs)

interleaved_char_to_complex_sptr_swigregister = _blocks_swig3.interleaved_char_to_complex_sptr_swigregister
interleaved_char_to_complex_sptr_swigregister(interleaved_char_to_complex_sptr)

interleaved_char_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_char_to_complex = interleaved_char_to_complex.make;

class keep_m_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::keep_m_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::keep_m_in_n)> self) -> keep_m_in_n_sptr
        __init__(boost::shared_ptr<(gr::blocks::keep_m_in_n)> self, keep_m_in_n p) -> keep_m_in_n_sptr
        """
        this = _blocks_swig3.new_keep_m_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(keep_m_in_n_sptr self) -> keep_m_in_n"""
        return _blocks_swig3.keep_m_in_n_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_keep_m_in_n_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(keep_m_in_n_sptr self, size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr

        decimate a stream, keeping  items out of every .

        Constructor Specific Documentation:

        Make a keep m in n block.

        Args:
            itemsize : stream itemsize
            m : number of items to take in block of  items
            n : block size in items
            offset : initial item offset into the stream
        """
        return _blocks_swig3.keep_m_in_n_sptr_make(self, *args, **kwargs)

    def set_m(self, *args, **kwargs):
        """set_m(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_m(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(keep_m_in_n_sptr self, int n)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_n(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(keep_m_in_n_sptr self, int offset)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(keep_m_in_n_sptr self) -> unsigned int"""
        return _blocks_swig3.keep_m_in_n_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(keep_m_in_n_sptr self, int which, int delay)
        declare_sample_delay(keep_m_in_n_sptr self, unsigned int delay)
        """
        return _blocks_swig3.keep_m_in_n_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(keep_m_in_n_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.keep_m_in_n_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_m_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(keep_m_in_n_sptr self) -> double"""
        return _blocks_swig3.keep_m_in_n_sptr_relative_rate(self)

    def start(self):
        """start(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig3.keep_m_in_n_sptr_start(self)

    def stop(self):
        """stop(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig3.keep_m_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(keep_m_in_n_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.keep_m_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(keep_m_in_n_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.keep_m_in_n_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_m_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(keep_m_in_n_sptr self)"""
        return _blocks_swig3.keep_m_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig3.keep_m_in_n_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_m_in_n_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(keep_m_in_n_sptr self, int i) -> long"""
        return _blocks_swig3.keep_m_in_n_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(keep_m_in_n_sptr self, long max_output_buffer)
        set_max_output_buffer(keep_m_in_n_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.keep_m_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(keep_m_in_n_sptr self, int i) -> long"""
        return _blocks_swig3.keep_m_in_n_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(keep_m_in_n_sptr self, long min_output_buffer)
        set_min_output_buffer(keep_m_in_n_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.keep_m_in_n_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_m_in_n_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full_avg(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_m_in_n_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full_var(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_m_in_n_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_m_in_n_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full_avg(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_m_in_n_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full_var(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_m_in_n_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_m_in_n_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(keep_m_in_n_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(keep_m_in_n_sptr self)"""
        return _blocks_swig3.keep_m_in_n_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(keep_m_in_n_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.keep_m_in_n_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_m_in_n_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_m_in_n_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(keep_m_in_n_sptr self, int priority) -> int"""
        return _blocks_swig3.keep_m_in_n_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig3.keep_m_in_n_sptr_name(self)

    def symbol_name(self):
        """symbol_name(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig3.keep_m_in_n_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(keep_m_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.keep_m_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(keep_m_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.keep_m_in_n_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(keep_m_in_n_sptr self) -> long"""
        return _blocks_swig3.keep_m_in_n_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(keep_m_in_n_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.keep_m_in_n_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(keep_m_in_n_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.keep_m_in_n_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig3.keep_m_in_n_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(keep_m_in_n_sptr self, std::string name)"""
        return _blocks_swig3.keep_m_in_n_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(keep_m_in_n_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.keep_m_in_n_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(keep_m_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.keep_m_in_n_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(keep_m_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.keep_m_in_n_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(keep_m_in_n_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.keep_m_in_n_sptr_message_subscribers(self, *args, **kwargs)

keep_m_in_n_sptr_swigregister = _blocks_swig3.keep_m_in_n_sptr_swigregister
keep_m_in_n_sptr_swigregister(keep_m_in_n_sptr)

keep_m_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_m_in_n = keep_m_in_n.make;

class keep_one_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::keep_one_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::keep_one_in_n)> self) -> keep_one_in_n_sptr
        __init__(boost::shared_ptr<(gr::blocks::keep_one_in_n)> self, keep_one_in_n p) -> keep_one_in_n_sptr
        """
        this = _blocks_swig3.new_keep_one_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(keep_one_in_n_sptr self) -> keep_one_in_n"""
        return _blocks_swig3.keep_one_in_n_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_keep_one_in_n_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(keep_one_in_n_sptr self, size_t itemsize, int n) -> keep_one_in_n_sptr

        decimate a stream, keeping one item out of every .

        Constructor Specific Documentation:

        Make a keep one in n block.

        Args:
            itemsize : stream itemsize
            n : block size in items
        """
        return _blocks_swig3.keep_one_in_n_sptr_make(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(keep_one_in_n_sptr self, int n)"""
        return _blocks_swig3.keep_one_in_n_sptr_set_n(self, *args, **kwargs)

    def history(self):
        """history(keep_one_in_n_sptr self) -> unsigned int"""
        return _blocks_swig3.keep_one_in_n_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(keep_one_in_n_sptr self, int which, int delay)
        declare_sample_delay(keep_one_in_n_sptr self, unsigned int delay)
        """
        return _blocks_swig3.keep_one_in_n_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(keep_one_in_n_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.keep_one_in_n_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_one_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(keep_one_in_n_sptr self) -> double"""
        return _blocks_swig3.keep_one_in_n_sptr_relative_rate(self)

    def start(self):
        """start(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig3.keep_one_in_n_sptr_start(self)

    def stop(self):
        """stop(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig3.keep_one_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(keep_one_in_n_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.keep_one_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(keep_one_in_n_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.keep_one_in_n_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_one_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(keep_one_in_n_sptr self, int m)"""
        return _blocks_swig3.keep_one_in_n_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(keep_one_in_n_sptr self)"""
        return _blocks_swig3.keep_one_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig3.keep_one_in_n_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(keep_one_in_n_sptr self, int m)"""
        return _blocks_swig3.keep_one_in_n_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_one_in_n_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(keep_one_in_n_sptr self, int i) -> long"""
        return _blocks_swig3.keep_one_in_n_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(keep_one_in_n_sptr self, long max_output_buffer)
        set_max_output_buffer(keep_one_in_n_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.keep_one_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(keep_one_in_n_sptr self, int i) -> long"""
        return _blocks_swig3.keep_one_in_n_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(keep_one_in_n_sptr self, long min_output_buffer)
        set_min_output_buffer(keep_one_in_n_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.keep_one_in_n_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_one_in_n_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full_avg(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_one_in_n_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full_var(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_one_in_n_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_one_in_n_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full_avg(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_one_in_n_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full_var(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.keep_one_in_n_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig3.keep_one_in_n_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(keep_one_in_n_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.keep_one_in_n_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(keep_one_in_n_sptr self)"""
        return _blocks_swig3.keep_one_in_n_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(keep_one_in_n_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.keep_one_in_n_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_one_in_n_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig3.keep_one_in_n_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(keep_one_in_n_sptr self, int priority) -> int"""
        return _blocks_swig3.keep_one_in_n_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig3.keep_one_in_n_sptr_name(self)

    def symbol_name(self):
        """symbol_name(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig3.keep_one_in_n_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(keep_one_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.keep_one_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(keep_one_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.keep_one_in_n_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(keep_one_in_n_sptr self) -> long"""
        return _blocks_swig3.keep_one_in_n_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(keep_one_in_n_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.keep_one_in_n_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(keep_one_in_n_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.keep_one_in_n_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig3.keep_one_in_n_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(keep_one_in_n_sptr self, std::string name)"""
        return _blocks_swig3.keep_one_in_n_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(keep_one_in_n_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.keep_one_in_n_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(keep_one_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.keep_one_in_n_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(keep_one_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.keep_one_in_n_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(keep_one_in_n_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.keep_one_in_n_sptr_message_subscribers(self, *args, **kwargs)

keep_one_in_n_sptr_swigregister = _blocks_swig3.keep_one_in_n_sptr_swigregister
keep_one_in_n_sptr_swigregister(keep_one_in_n_sptr)

keep_one_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_one_in_n = keep_one_in_n.make;

class lfsr_32k_source_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::lfsr_32k_source_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::lfsr_32k_source_s)> self) -> lfsr_32k_source_s_sptr
        __init__(boost::shared_ptr<(gr::blocks::lfsr_32k_source_s)> self, lfsr_32k_source_s p) -> lfsr_32k_source_s_sptr
        """
        this = _blocks_swig3.new_lfsr_32k_source_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s"""
        return _blocks_swig3.lfsr_32k_source_s_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_lfsr_32k_source_s_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s_sptr

        LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

        This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:

        Make a LFSR 32k source block.
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_make(self)

    def history(self):
        """history(lfsr_32k_source_s_sptr self) -> unsigned int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(lfsr_32k_source_s_sptr self, int which, int delay)
        declare_sample_delay(lfsr_32k_source_s_sptr self, unsigned int delay)
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(lfsr_32k_source_s_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(lfsr_32k_source_s_sptr self) -> double"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_relative_rate(self)

    def start(self):
        """start(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_start(self)

    def stop(self):
        """stop(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(lfsr_32k_source_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(lfsr_32k_source_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(lfsr_32k_source_s_sptr self, int m)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(lfsr_32k_source_s_sptr self)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(lfsr_32k_source_s_sptr self, int m)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(lfsr_32k_source_s_sptr self, int i) -> long"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(lfsr_32k_source_s_sptr self, long max_output_buffer)
        set_max_output_buffer(lfsr_32k_source_s_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(lfsr_32k_source_s_sptr self, int i) -> long"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(lfsr_32k_source_s_sptr self, long min_output_buffer)
        set_min_output_buffer(lfsr_32k_source_s_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full_var(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full_var(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(lfsr_32k_source_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(lfsr_32k_source_s_sptr self)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(lfsr_32k_source_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(lfsr_32k_source_s_sptr self, int priority) -> int"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(lfsr_32k_source_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(lfsr_32k_source_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(lfsr_32k_source_s_sptr self) -> long"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(lfsr_32k_source_s_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(lfsr_32k_source_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(lfsr_32k_source_s_sptr self, std::string name)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(lfsr_32k_source_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.lfsr_32k_source_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(lfsr_32k_source_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(lfsr_32k_source_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(lfsr_32k_source_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.lfsr_32k_source_s_sptr_message_subscribers(self, *args, **kwargs)

lfsr_32k_source_s_sptr_swigregister = _blocks_swig3.lfsr_32k_source_s_sptr_swigregister
lfsr_32k_source_s_sptr_swigregister(lfsr_32k_source_s_sptr)

lfsr_32k_source_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lfsr_32k_source_s = lfsr_32k_source_s.make;

class max_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::max_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::max_ff)> self) -> max_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::max_ff)> self, max_ff p) -> max_ff_sptr
        """
        this = _blocks_swig3.new_max_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(max_ff_sptr self) -> max_ff"""
        return _blocks_swig3.max_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_max_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(max_ff_sptr self, size_t vlen) -> max_ff_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.max_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(max_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.max_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(max_ff_sptr self, int which, int delay)
        declare_sample_delay(max_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.max_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(max_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.max_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(max_ff_sptr self) -> int"""
        return _blocks_swig3.max_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(max_ff_sptr self) -> double"""
        return _blocks_swig3.max_ff_sptr_relative_rate(self)

    def start(self):
        """start(max_ff_sptr self) -> bool"""
        return _blocks_swig3.max_ff_sptr_start(self)

    def stop(self):
        """stop(max_ff_sptr self) -> bool"""
        return _blocks_swig3.max_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(max_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.max_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(max_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.max_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(max_ff_sptr self) -> int"""
        return _blocks_swig3.max_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(max_ff_sptr self, int m)"""
        return _blocks_swig3.max_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(max_ff_sptr self)"""
        return _blocks_swig3.max_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(max_ff_sptr self) -> bool"""
        return _blocks_swig3.max_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(max_ff_sptr self, int m)"""
        return _blocks_swig3.max_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(max_ff_sptr self) -> int"""
        return _blocks_swig3.max_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(max_ff_sptr self, int i) -> long"""
        return _blocks_swig3.max_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(max_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.max_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(max_ff_sptr self, int i) -> long"""
        return _blocks_swig3.max_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(max_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.max_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(max_ff_sptr self, int which) -> float
        pc_input_buffers_full(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(max_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(max_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(max_ff_sptr self, int which) -> float
        pc_output_buffers_full(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(max_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(max_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(max_ff_sptr self) -> float"""
        return _blocks_swig3.max_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(max_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.max_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(max_ff_sptr self)"""
        return _blocks_swig3.max_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(max_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.max_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(max_ff_sptr self) -> int"""
        return _blocks_swig3.max_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(max_ff_sptr self) -> int"""
        return _blocks_swig3.max_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(max_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.max_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(max_ff_sptr self) -> std::string"""
        return _blocks_swig3.max_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(max_ff_sptr self) -> std::string"""
        return _blocks_swig3.max_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(max_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.max_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(max_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.max_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(max_ff_sptr self) -> long"""
        return _blocks_swig3.max_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(max_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.max_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(max_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.max_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(max_ff_sptr self) -> std::string"""
        return _blocks_swig3.max_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(max_ff_sptr self, std::string name)"""
        return _blocks_swig3.max_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(max_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.max_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(max_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.max_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(max_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.max_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(max_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.max_ff_sptr_message_subscribers(self, *args, **kwargs)

max_ff_sptr_swigregister = _blocks_swig3.max_ff_sptr_swigregister
max_ff_sptr_swigregister(max_ff_sptr)

max_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ff = max_ff.make;

class max_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::max_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::max_ii)> self) -> max_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::max_ii)> self, max_ii p) -> max_ii_sptr
        """
        this = _blocks_swig3.new_max_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(max_ii_sptr self) -> max_ii"""
        return _blocks_swig3.max_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_max_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(max_ii_sptr self, size_t vlen) -> max_ii_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.max_ii_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(max_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.max_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(max_ii_sptr self, int which, int delay)
        declare_sample_delay(max_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.max_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(max_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.max_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(max_ii_sptr self) -> int"""
        return _blocks_swig3.max_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(max_ii_sptr self) -> double"""
        return _blocks_swig3.max_ii_sptr_relative_rate(self)

    def start(self):
        """start(max_ii_sptr self) -> bool"""
        return _blocks_swig3.max_ii_sptr_start(self)

    def stop(self):
        """stop(max_ii_sptr self) -> bool"""
        return _blocks_swig3.max_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(max_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.max_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(max_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.max_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(max_ii_sptr self) -> int"""
        return _blocks_swig3.max_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(max_ii_sptr self, int m)"""
        return _blocks_swig3.max_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(max_ii_sptr self)"""
        return _blocks_swig3.max_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(max_ii_sptr self) -> bool"""
        return _blocks_swig3.max_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(max_ii_sptr self, int m)"""
        return _blocks_swig3.max_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(max_ii_sptr self) -> int"""
        return _blocks_swig3.max_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(max_ii_sptr self, int i) -> long"""
        return _blocks_swig3.max_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(max_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.max_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(max_ii_sptr self, int i) -> long"""
        return _blocks_swig3.max_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(max_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.max_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(max_ii_sptr self, int which) -> float
        pc_input_buffers_full(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(max_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(max_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(max_ii_sptr self, int which) -> float
        pc_output_buffers_full(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(max_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(max_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(max_ii_sptr self) -> float"""
        return _blocks_swig3.max_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(max_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.max_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(max_ii_sptr self)"""
        return _blocks_swig3.max_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(max_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.max_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(max_ii_sptr self) -> int"""
        return _blocks_swig3.max_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(max_ii_sptr self) -> int"""
        return _blocks_swig3.max_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(max_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.max_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(max_ii_sptr self) -> std::string"""
        return _blocks_swig3.max_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(max_ii_sptr self) -> std::string"""
        return _blocks_swig3.max_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(max_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.max_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(max_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.max_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(max_ii_sptr self) -> long"""
        return _blocks_swig3.max_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(max_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.max_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(max_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.max_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(max_ii_sptr self) -> std::string"""
        return _blocks_swig3.max_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(max_ii_sptr self, std::string name)"""
        return _blocks_swig3.max_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(max_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.max_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(max_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.max_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(max_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.max_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(max_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.max_ii_sptr_message_subscribers(self, *args, **kwargs)

max_ii_sptr_swigregister = _blocks_swig3.max_ii_sptr_swigregister
max_ii_sptr_swigregister(max_ii_sptr)

max_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ii = max_ii.make;

class max_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::max_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::max_ss)> self) -> max_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::max_ss)> self, max_ss p) -> max_ss_sptr
        """
        this = _blocks_swig3.new_max_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(max_ss_sptr self) -> max_ss"""
        return _blocks_swig3.max_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_max_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(max_ss_sptr self, size_t vlen) -> max_ss_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and the output stream will contain the maximum value in the vector.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.max_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(max_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.max_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(max_ss_sptr self, int which, int delay)
        declare_sample_delay(max_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.max_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(max_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.max_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(max_ss_sptr self) -> int"""
        return _blocks_swig3.max_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(max_ss_sptr self) -> double"""
        return _blocks_swig3.max_ss_sptr_relative_rate(self)

    def start(self):
        """start(max_ss_sptr self) -> bool"""
        return _blocks_swig3.max_ss_sptr_start(self)

    def stop(self):
        """stop(max_ss_sptr self) -> bool"""
        return _blocks_swig3.max_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(max_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.max_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(max_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.max_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(max_ss_sptr self) -> int"""
        return _blocks_swig3.max_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(max_ss_sptr self, int m)"""
        return _blocks_swig3.max_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(max_ss_sptr self)"""
        return _blocks_swig3.max_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(max_ss_sptr self) -> bool"""
        return _blocks_swig3.max_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(max_ss_sptr self, int m)"""
        return _blocks_swig3.max_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(max_ss_sptr self) -> int"""
        return _blocks_swig3.max_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(max_ss_sptr self, int i) -> long"""
        return _blocks_swig3.max_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(max_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.max_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(max_ss_sptr self, int i) -> long"""
        return _blocks_swig3.max_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(max_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.max_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(max_ss_sptr self, int which) -> float
        pc_input_buffers_full(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(max_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(max_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(max_ss_sptr self, int which) -> float
        pc_output_buffers_full(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(max_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(max_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.max_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(max_ss_sptr self) -> float"""
        return _blocks_swig3.max_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(max_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.max_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(max_ss_sptr self)"""
        return _blocks_swig3.max_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(max_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.max_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(max_ss_sptr self) -> int"""
        return _blocks_swig3.max_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(max_ss_sptr self) -> int"""
        return _blocks_swig3.max_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(max_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.max_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(max_ss_sptr self) -> std::string"""
        return _blocks_swig3.max_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(max_ss_sptr self) -> std::string"""
        return _blocks_swig3.max_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(max_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.max_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(max_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.max_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(max_ss_sptr self) -> long"""
        return _blocks_swig3.max_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(max_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.max_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(max_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.max_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(max_ss_sptr self) -> std::string"""
        return _blocks_swig3.max_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(max_ss_sptr self, std::string name)"""
        return _blocks_swig3.max_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(max_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.max_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(max_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.max_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(max_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.max_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(max_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.max_ss_sptr_message_subscribers(self, *args, **kwargs)

max_ss_sptr_swigregister = _blocks_swig3.max_ss_sptr_swigregister
max_ss_sptr_swigregister(max_ss_sptr)

max_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ss = max_ss.make;

class moving_average_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_cc)> self) -> moving_average_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_cc)> self, moving_average_cc p) -> moving_average_cc_sptr
        """
        this = _blocks_swig3.new_moving_average_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_cc_sptr self) -> moving_average_cc"""
        return _blocks_swig3.moving_average_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_cc_sptr self, int length, gr_complex scale, int max_iter=4096) -> moving_average_cc_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_cc_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_cc_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_cc_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_cc_sptr self) -> gr_complex

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_cc_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_cc_sptr self, int length, gr_complex scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_cc_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_cc_sptr self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_cc_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_cc_sptr self, gr_complex scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_cc_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.moving_average_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_cc_sptr self, int which, int delay)
        declare_sample_delay(moving_average_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.moving_average_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.moving_average_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_cc_sptr self) -> int"""
        return _blocks_swig3.moving_average_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_cc_sptr self) -> double"""
        return _blocks_swig3.moving_average_cc_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig3.moving_average_cc_sptr_start(self)

    def stop(self):
        """stop(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig3.moving_average_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.moving_average_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.moving_average_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_cc_sptr self) -> int"""
        return _blocks_swig3.moving_average_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_cc_sptr self, int m)"""
        return _blocks_swig3.moving_average_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_cc_sptr self)"""
        return _blocks_swig3.moving_average_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig3.moving_average_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_cc_sptr self, int m)"""
        return _blocks_swig3.moving_average_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_cc_sptr self) -> int"""
        return _blocks_swig3.moving_average_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.moving_average_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.moving_average_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_cc_sptr self) -> float"""
        return _blocks_swig3.moving_average_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.moving_average_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_cc_sptr self)"""
        return _blocks_swig3.moving_average_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.moving_average_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_cc_sptr self) -> int"""
        return _blocks_swig3.moving_average_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_cc_sptr self) -> int"""
        return _blocks_swig3.moving_average_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.moving_average_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_cc_sptr self) -> long"""
        return _blocks_swig3.moving_average_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.moving_average_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.moving_average_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_cc_sptr self, std::string name)"""
        return _blocks_swig3.moving_average_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.moving_average_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_cc_sptr_message_subscribers(self, *args, **kwargs)

moving_average_cc_sptr_swigregister = _blocks_swig3.moving_average_cc_sptr_swigregister
moving_average_cc_sptr_swigregister(moving_average_cc_sptr)

moving_average_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_cc = moving_average_cc.make;

class moving_average_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ff)> self) -> moving_average_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ff)> self, moving_average_ff p) -> moving_average_ff_sptr
        """
        this = _blocks_swig3.new_moving_average_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ff_sptr self) -> moving_average_ff"""
        return _blocks_swig3.moving_average_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_ff_sptr self, int length, float scale, int max_iter=4096) -> moving_average_ff_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_ff_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_ff_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_ff_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_ff_sptr self) -> float

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_ff_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ff_sptr self, int length, float scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_ff_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ff_sptr self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_ff_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ff_sptr self, float scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_ff_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.moving_average_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ff_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.moving_average_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.moving_average_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ff_sptr self) -> int"""
        return _blocks_swig3.moving_average_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ff_sptr self) -> double"""
        return _blocks_swig3.moving_average_ff_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ff_sptr_start(self)

    def stop(self):
        """stop(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.moving_average_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.moving_average_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ff_sptr self) -> int"""
        return _blocks_swig3.moving_average_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ff_sptr self, int m)"""
        return _blocks_swig3.moving_average_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ff_sptr self)"""
        return _blocks_swig3.moving_average_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ff_sptr self, int m)"""
        return _blocks_swig3.moving_average_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ff_sptr self) -> int"""
        return _blocks_swig3.moving_average_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.moving_average_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.moving_average_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ff_sptr self) -> float"""
        return _blocks_swig3.moving_average_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.moving_average_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ff_sptr self)"""
        return _blocks_swig3.moving_average_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.moving_average_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ff_sptr self) -> int"""
        return _blocks_swig3.moving_average_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ff_sptr self) -> int"""
        return _blocks_swig3.moving_average_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.moving_average_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ff_sptr self) -> long"""
        return _blocks_swig3.moving_average_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.moving_average_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.moving_average_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ff_sptr self, std::string name)"""
        return _blocks_swig3.moving_average_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.moving_average_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ff_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ff_sptr_swigregister = _blocks_swig3.moving_average_ff_sptr_swigregister
moving_average_ff_sptr_swigregister(moving_average_ff_sptr)

moving_average_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ff = moving_average_ff.make;

class moving_average_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ii)> self) -> moving_average_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ii)> self, moving_average_ii p) -> moving_average_ii_sptr
        """
        this = _blocks_swig3.new_moving_average_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ii_sptr self) -> moving_average_ii"""
        return _blocks_swig3.moving_average_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_ii_sptr self, int length, int scale, int max_iter=4096) -> moving_average_ii_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_ii_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_ii_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_ii_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_ii_sptr self) -> int

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_ii_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ii_sptr self, int length, int scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_ii_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ii_sptr self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_ii_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ii_sptr self, int scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_ii_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.moving_average_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ii_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.moving_average_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.moving_average_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ii_sptr self) -> int"""
        return _blocks_swig3.moving_average_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ii_sptr self) -> double"""
        return _blocks_swig3.moving_average_ii_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ii_sptr_start(self)

    def stop(self):
        """stop(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.moving_average_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.moving_average_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ii_sptr self) -> int"""
        return _blocks_swig3.moving_average_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ii_sptr self, int m)"""
        return _blocks_swig3.moving_average_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ii_sptr self)"""
        return _blocks_swig3.moving_average_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ii_sptr self, int m)"""
        return _blocks_swig3.moving_average_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ii_sptr self) -> int"""
        return _blocks_swig3.moving_average_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ii_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.moving_average_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ii_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.moving_average_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ii_sptr self) -> float"""
        return _blocks_swig3.moving_average_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.moving_average_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ii_sptr self)"""
        return _blocks_swig3.moving_average_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.moving_average_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ii_sptr self) -> int"""
        return _blocks_swig3.moving_average_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ii_sptr self) -> int"""
        return _blocks_swig3.moving_average_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.moving_average_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ii_sptr self) -> long"""
        return _blocks_swig3.moving_average_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.moving_average_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.moving_average_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ii_sptr self, std::string name)"""
        return _blocks_swig3.moving_average_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.moving_average_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ii_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ii_sptr_swigregister = _blocks_swig3.moving_average_ii_sptr_swigregister
moving_average_ii_sptr_swigregister(moving_average_ii_sptr)

moving_average_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ii = moving_average_ii.make;

class moving_average_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ss)> self) -> moving_average_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ss)> self, moving_average_ss p) -> moving_average_ss_sptr
        """
        this = _blocks_swig3.new_moving_average_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ss_sptr self) -> moving_average_ss"""
        return _blocks_swig3.moving_average_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_moving_average_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_ss_sptr self, int length, short scale, int max_iter=4096) -> moving_average_ss_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        """
        return _blocks_swig3.moving_average_ss_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_ss_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig3.moving_average_ss_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_ss_sptr self) -> short

        Get the scale factor being used.
        """
        return _blocks_swig3.moving_average_ss_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ss_sptr self, int length, short scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig3.moving_average_ss_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ss_sptr self, int length)

        Set the length.
        """
        return _blocks_swig3.moving_average_ss_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ss_sptr self, short scale)

        Set the scale factor.
        """
        return _blocks_swig3.moving_average_ss_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.moving_average_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ss_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.moving_average_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.moving_average_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ss_sptr self) -> int"""
        return _blocks_swig3.moving_average_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ss_sptr self) -> double"""
        return _blocks_swig3.moving_average_ss_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ss_sptr_start(self)

    def stop(self):
        """stop(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.moving_average_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.moving_average_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ss_sptr self) -> int"""
        return _blocks_swig3.moving_average_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ss_sptr self, int m)"""
        return _blocks_swig3.moving_average_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ss_sptr self)"""
        return _blocks_swig3.moving_average_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig3.moving_average_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ss_sptr self, int m)"""
        return _blocks_swig3.moving_average_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ss_sptr self) -> int"""
        return _blocks_swig3.moving_average_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ss_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.moving_average_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ss_sptr self, int i) -> long"""
        return _blocks_swig3.moving_average_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.moving_average_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.moving_average_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ss_sptr self) -> float"""
        return _blocks_swig3.moving_average_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.moving_average_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ss_sptr self)"""
        return _blocks_swig3.moving_average_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.moving_average_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ss_sptr self) -> int"""
        return _blocks_swig3.moving_average_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ss_sptr self) -> int"""
        return _blocks_swig3.moving_average_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.moving_average_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.moving_average_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ss_sptr self) -> long"""
        return _blocks_swig3.moving_average_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.moving_average_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.moving_average_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig3.moving_average_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ss_sptr self, std::string name)"""
        return _blocks_swig3.moving_average_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.moving_average_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.moving_average_ss_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ss_sptr_swigregister = _blocks_swig3.moving_average_ss_sptr_swigregister
moving_average_ss_sptr_swigregister(moving_average_ss_sptr)

moving_average_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ss = moving_average_ss.make;

class multiply_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_ss)> self) -> multiply_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_ss)> self, multiply_ss p) -> multiply_ss_sptr
        """
        this = _blocks_swig3.new_multiply_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_ss_sptr self) -> multiply_ss"""
        return _blocks_swig3.multiply_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_ss_sptr self, size_t vlen=1) -> multiply_ss_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ss_sptr_make(self, vlen)

    def history(self):
        """history(multiply_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_ss_sptr self, int which, int delay)
        declare_sample_delay(multiply_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_ss_sptr self) -> double"""
        return _blocks_swig3.multiply_ss_sptr_relative_rate(self)

    def start(self):
        """start(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_start(self)

    def stop(self):
        """stop(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_ss_sptr self)"""
        return _blocks_swig3.multiply_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_ss_sptr self)"""
        return _blocks_swig3.multiply_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_ss_sptr self) -> long"""
        return _blocks_swig3.multiply_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_ss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_subscribers(self, *args, **kwargs)

multiply_ss_sptr_swigregister = _blocks_swig3.multiply_ss_sptr_swigregister
multiply_ss_sptr_swigregister(multiply_ss_sptr)

multiply_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ss = multiply_ss.make;

class multiply_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_ii)> self) -> multiply_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_ii)> self, multiply_ii p) -> multiply_ii_sptr
        """
        this = _blocks_swig3.new_multiply_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_ii_sptr self) -> multiply_ii"""
        return _blocks_swig3.multiply_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_ii_sptr self, size_t vlen=1) -> multiply_ii_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ii_sptr_make(self, vlen)

    def history(self):
        """history(multiply_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_ii_sptr self, int which, int delay)
        declare_sample_delay(multiply_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_ii_sptr self) -> double"""
        return _blocks_swig3.multiply_ii_sptr_relative_rate(self)

    def start(self):
        """start(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_start(self)

    def stop(self):
        """stop(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_ii_sptr self)"""
        return _blocks_swig3.multiply_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_ii_sptr self)"""
        return _blocks_swig3.multiply_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_ii_sptr self) -> long"""
        return _blocks_swig3.multiply_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_ii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_subscribers(self, *args, **kwargs)

multiply_ii_sptr_swigregister = _blocks_swig3.multiply_ii_sptr_swigregister
multiply_ii_sptr_swigregister(multiply_ii_sptr)

multiply_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ii = multiply_ii.make;

class multiply_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_ff)> self) -> multiply_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_ff)> self, multiply_ff p) -> multiply_ff_sptr
        """
        this = _blocks_swig3.new_multiply_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_ff_sptr self) -> multiply_ff"""
        return _blocks_swig3.multiply_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_ff_sptr self, size_t vlen=1) -> multiply_ff_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_ff_sptr_make(self, vlen)

    def history(self):
        """history(multiply_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_ff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_start(self)

    def stop(self):
        """stop(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_ff_sptr self)"""
        return _blocks_swig3.multiply_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_ff_sptr self)"""
        return _blocks_swig3.multiply_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_subscribers(self, *args, **kwargs)

multiply_ff_sptr_swigregister = _blocks_swig3.multiply_ff_sptr_swigregister
multiply_ff_sptr_swigregister(multiply_ff_sptr)

multiply_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ff = multiply_ff.make;

class multiply_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_cc)> self) -> multiply_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_cc)> self, multiply_cc p) -> multiply_cc_sptr
        """
        this = _blocks_swig3.new_multiply_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_cc_sptr self) -> multiply_cc"""
        return _blocks_swig3.multiply_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_cc_sptr self, size_t vlen=1) -> multiply_cc_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of complex values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_cc_sptr_make(self, vlen)

    def history(self):
        """history(multiply_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_cc_sptr self)"""
        return _blocks_swig3.multiply_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_cc_sptr self)"""
        return _blocks_swig3.multiply_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_cc_sptr_swigregister = _blocks_swig3.multiply_cc_sptr_swigregister
multiply_cc_sptr_swigregister(multiply_cc_sptr)

multiply_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_cc = multiply_cc.make;

class multiply_conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> self) -> multiply_conjugate_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> self, multiply_conjugate_cc p) -> multiply_conjugate_cc_sptr
        """
        this = _blocks_swig3.new_multiply_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_conjugate_cc_sptr self) -> multiply_conjugate_cc"""
        return _blocks_swig3.multiply_conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_conjugate_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_conjugate_cc_sptr self, size_t vlen=1) -> multiply_conjugate_cc_sptr

        Multiplies stream 0 by the complex conjugate of stream 1.

        Constructor Specific Documentation:

        Multiplies a streams by the conjugate of a second stream.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_make(self, vlen)

    def history(self):
        """history(multiply_conjugate_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_conjugate_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_conjugate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_conjugate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_conjugate_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_conjugate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_conjugate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_conjugate_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_conjugate_cc_sptr self)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_conjugate_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_conjugate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_conjugate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_conjugate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_conjugate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_conjugate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_conjugate_cc_sptr self)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_conjugate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_conjugate_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_conjugate_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_conjugate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_conjugate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_conjugate_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_conjugate_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_conjugate_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_conjugate_cc_sptr_swigregister = _blocks_swig3.multiply_conjugate_cc_sptr_swigregister
multiply_conjugate_cc_sptr_swigregister(multiply_conjugate_cc_sptr)

multiply_conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_conjugate_cc = multiply_conjugate_cc.make;

class multiply_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ss)> self) -> multiply_const_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ss)> self, multiply_const_ss p) -> multiply_const_ss_sptr
        """
        this = _blocks_swig3.new_multiply_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_ss_sptr self) -> multiply_const_ss"""
        return _blocks_swig3.multiply_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_ss_sptr self, short k) -> multiply_const_ss_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ss.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_ss_sptr self) -> short

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ss_sptr self, short k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_ss_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_ss_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_start(self)

    def stop(self):
        """stop(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_ss_sptr self)"""
        return _blocks_swig3.multiply_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_ss_sptr self)"""
        return _blocks_swig3.multiply_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_ss_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_ss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_ss_sptr_swigregister = _blocks_swig3.multiply_const_ss_sptr_swigregister
multiply_const_ss_sptr_swigregister(multiply_const_ss_sptr)

multiply_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ss = multiply_const_ss.make;

class multiply_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ii)> self) -> multiply_const_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ii)> self, multiply_const_ii p) -> multiply_const_ii_sptr
        """
        this = _blocks_swig3.new_multiply_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_ii_sptr self) -> multiply_const_ii"""
        return _blocks_swig3.multiply_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_ii_sptr self, int k) -> multiply_const_ii_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ii.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_ii_sptr self) -> int

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ii_sptr self, int k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_ii_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_ii_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_start(self)

    def stop(self):
        """stop(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_ii_sptr self)"""
        return _blocks_swig3.multiply_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_ii_sptr self)"""
        return _blocks_swig3.multiply_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_ii_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_ii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_ii_sptr_swigregister = _blocks_swig3.multiply_const_ii_sptr_swigregister
multiply_const_ii_sptr_swigregister(multiply_const_ii_sptr)

multiply_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ii = multiply_const_ii.make;

class multiply_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ff)> self) -> multiply_const_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ff)> self, multiply_const_ff p) -> multiply_const_ff_sptr
        """
        this = _blocks_swig3.new_multiply_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_ff_sptr self) -> multiply_const_ff"""
        return _blocks_swig3.multiply_const_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_ff_sptr self, float k, size_t vlen=1) -> multiply_const_ff_sptr

        output = input * real constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ff.

        Args:
            k : real multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_ff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_ff_sptr self) -> float

        Return real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ff_sptr self, float k)

        Set real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_start(self)

    def stop(self):
        """stop(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_ff_sptr self)"""
        return _blocks_swig3.multiply_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_ff_sptr self)"""
        return _blocks_swig3.multiply_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_ff_sptr_swigregister = _blocks_swig3.multiply_const_ff_sptr_swigregister
multiply_const_ff_sptr_swigregister(multiply_const_ff_sptr)

multiply_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ff = multiply_const_ff.make;

class multiply_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_cc)> self) -> multiply_const_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_cc)> self, multiply_const_cc p) -> multiply_const_cc_sptr
        """
        this = _blocks_swig3.new_multiply_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_cc_sptr self) -> multiply_const_cc"""
        return _blocks_swig3.multiply_const_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_cc_sptr self, gr_complex k, size_t vlen=1) -> multiply_const_cc_sptr

        output = input * complex constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_cc.

        Args:
            k : complex multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_cc_sptr self) -> gr_complex

        Return complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_cc_sptr self, gr_complex k)

        Set complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_cc_sptr self)"""
        return _blocks_swig3.multiply_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_cc_sptr self)"""
        return _blocks_swig3.multiply_const_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_cc_sptr_swigregister = _blocks_swig3.multiply_const_cc_sptr_swigregister
multiply_const_cc_sptr_swigregister(multiply_const_cc_sptr)

multiply_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_cc = multiply_const_cc.make;

class multiply_const_vss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vss)> self) -> multiply_const_vss_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vss)> self, multiply_const_vss p) -> multiply_const_vss_sptr
        """
        this = _blocks_swig3.new_multiply_const_vss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vss_sptr self) -> multiply_const_vss"""
        return _blocks_swig3.multiply_const_vss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vss_sptr self, std::vector< short,std::allocator< short > > k) -> multiply_const_vss_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vss.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vss_sptr self) -> std::vector< short,std::allocator< short > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vss_sptr self, std::vector< short,std::allocator< short > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vss_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vss_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vss_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vss_sptr self)"""
        return _blocks_swig3.multiply_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vss_sptr self)"""
        return _blocks_swig3.multiply_const_vss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vss_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vss_sptr_swigregister = _blocks_swig3.multiply_const_vss_sptr_swigregister
multiply_const_vss_sptr_swigregister(multiply_const_vss_sptr)

multiply_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vss = multiply_const_vss.make;

class multiply_const_vii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vii)> self) -> multiply_const_vii_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vii)> self, multiply_const_vii p) -> multiply_const_vii_sptr
        """
        this = _blocks_swig3.new_multiply_const_vii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vii_sptr self) -> multiply_const_vii"""
        return _blocks_swig3.multiply_const_vii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > k) -> multiply_const_vii_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vii.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vii_sptr self) -> std::vector< int,std::allocator< int > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vii_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vii_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vii_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vii_sptr self)"""
        return _blocks_swig3.multiply_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vii_sptr self)"""
        return _blocks_swig3.multiply_const_vii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vii_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vii_sptr_swigregister = _blocks_swig3.multiply_const_vii_sptr_swigregister
multiply_const_vii_sptr_swigregister(multiply_const_vii_sptr)

multiply_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vii = multiply_const_vii.make;

class multiply_const_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vff)> self) -> multiply_const_vff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vff)> self, multiply_const_vff p) -> multiply_const_vff_sptr
        """
        this = _blocks_swig3.new_multiply_const_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vff_sptr self) -> multiply_const_vff"""
        return _blocks_swig3.multiply_const_vff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vff_sptr self, pmt_vector_float k) -> multiply_const_vff_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vff.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vff_sptr self) -> pmt_vector_float

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vff_sptr self, pmt_vector_float k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vff_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vff_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vff_sptr self)"""
        return _blocks_swig3.multiply_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vff_sptr self)"""
        return _blocks_swig3.multiply_const_vff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vff_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vff_sptr_swigregister = _blocks_swig3.multiply_const_vff_sptr_swigregister
multiply_const_vff_sptr_swigregister(multiply_const_vff_sptr)

multiply_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vff = multiply_const_vff.make;

class multiply_const_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vcc)> self) -> multiply_const_vcc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vcc)> self, multiply_const_vcc p) -> multiply_const_vcc_sptr
        """
        this = _blocks_swig3.new_multiply_const_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vcc_sptr self) -> multiply_const_vcc"""
        return _blocks_swig3.multiply_const_vcc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vcc_sptr self, pmt_vector_cfloat k) -> multiply_const_vcc_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vcc.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vcc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vcc_sptr self) -> pmt_vector_cfloat

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vcc_sptr self, pmt_vector_cfloat k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vcc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vcc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vcc_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vcc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vcc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vcc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vcc_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vcc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vcc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vcc_sptr self)"""
        return _blocks_swig3.multiply_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vcc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vcc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vcc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vcc_sptr self)"""
        return _blocks_swig3.multiply_const_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vcc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vcc_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vcc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vcc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vcc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vcc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vcc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vcc_sptr_swigregister = _blocks_swig3.multiply_const_vcc_sptr_swigregister
multiply_const_vcc_sptr_swigregister(multiply_const_vcc_sptr)

multiply_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vcc = multiply_const_vcc.make;

class mute_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_ss)> self) -> mute_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_ss)> self, mute_ss p) -> mute_ss_sptr
        """
        this = _blocks_swig3.new_mute_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_ss_sptr self) -> mute_ss"""
        return _blocks_swig3.mute_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_ss_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_ss_sptr self, bool mute=False) -> mute_ss_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ss_sptr_make(self, mute)

    def mute(self):
        """mute(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ss_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ss_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_ss_sptr self, int which, int delay)
        declare_sample_delay(mute_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_ss_sptr self) -> double"""
        return _blocks_swig3.mute_ss_sptr_relative_rate(self)

    def start(self):
        """start(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_start(self)

    def stop(self):
        """stop(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_ss_sptr self, int m)"""
        return _blocks_swig3.mute_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_ss_sptr self)"""
        return _blocks_swig3.mute_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_ss_sptr self, int m)"""
        return _blocks_swig3.mute_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_ss_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_ss_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_ss_sptr self)"""
        return _blocks_swig3.mute_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_ss_sptr self) -> long"""
        return _blocks_swig3.mute_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_ss_sptr self, std::string name)"""
        return _blocks_swig3.mute_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_subscribers(self, *args, **kwargs)

mute_ss_sptr_swigregister = _blocks_swig3.mute_ss_sptr_swigregister
mute_ss_sptr_swigregister(mute_ss_sptr)

mute_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ss = mute_ss.make;

class mute_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_ii)> self) -> mute_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_ii)> self, mute_ii p) -> mute_ii_sptr
        """
        this = _blocks_swig3.new_mute_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_ii_sptr self) -> mute_ii"""
        return _blocks_swig3.mute_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_ii_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_ii_sptr self, bool mute=False) -> mute_ii_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ii_sptr_make(self, mute)

    def mute(self):
        """mute(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ii_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ii_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_ii_sptr self, int which, int delay)
        declare_sample_delay(mute_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_ii_sptr self) -> double"""
        return _blocks_swig3.mute_ii_sptr_relative_rate(self)

    def start(self):
        """start(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_start(self)

    def stop(self):
        """stop(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_ii_sptr self, int m)"""
        return _blocks_swig3.mute_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_ii_sptr self)"""
        return _blocks_swig3.mute_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_ii_sptr self, int m)"""
        return _blocks_swig3.mute_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_ii_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_ii_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_ii_sptr self)"""
        return _blocks_swig3.mute_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_ii_sptr self) -> long"""
        return _blocks_swig3.mute_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_ii_sptr self, std::string name)"""
        return _blocks_swig3.mute_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_subscribers(self, *args, **kwargs)

mute_ii_sptr_swigregister = _blocks_swig3.mute_ii_sptr_swigregister
mute_ii_sptr_swigregister(mute_ii_sptr)

mute_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ii = mute_ii.make;

class mute_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_ff)> self) -> mute_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_ff)> self, mute_ff p) -> mute_ff_sptr
        """
        this = _blocks_swig3.new_mute_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_ff_sptr self) -> mute_ff"""
        return _blocks_swig3.mute_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_ff_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_ff_sptr self, bool mute=False) -> mute_ff_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ff_sptr_make(self, mute)

    def mute(self):
        """mute(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ff_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ff_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_ff_sptr self, int which, int delay)
        declare_sample_delay(mute_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_ff_sptr self) -> double"""
        return _blocks_swig3.mute_ff_sptr_relative_rate(self)

    def start(self):
        """start(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_start(self)

    def stop(self):
        """stop(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_ff_sptr self, int m)"""
        return _blocks_swig3.mute_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_ff_sptr self)"""
        return _blocks_swig3.mute_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_ff_sptr self, int m)"""
        return _blocks_swig3.mute_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_ff_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_ff_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_ff_sptr self)"""
        return _blocks_swig3.mute_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_ff_sptr self) -> long"""
        return _blocks_swig3.mute_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_ff_sptr self, std::string name)"""
        return _blocks_swig3.mute_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_subscribers(self, *args, **kwargs)

mute_ff_sptr_swigregister = _blocks_swig3.mute_ff_sptr_swigregister
mute_ff_sptr_swigregister(mute_ff_sptr)

mute_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ff = mute_ff.make;

class mute_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_cc)> self) -> mute_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_cc)> self, mute_cc p) -> mute_cc_sptr
        """
        this = _blocks_swig3.new_mute_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_cc_sptr self) -> mute_cc"""
        return _blocks_swig3.mute_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_cc_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_cc_sptr self, bool mute=False) -> mute_cc_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_cc_sptr_make(self, mute)

    def mute(self):
        """mute(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_cc_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_cc_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_cc_sptr self, int which, int delay)
        declare_sample_delay(mute_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_cc_sptr self) -> double"""
        return _blocks_swig3.mute_cc_sptr_relative_rate(self)

    def start(self):
        """start(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_start(self)

    def stop(self):
        """stop(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_cc_sptr self, int m)"""
        return _blocks_swig3.mute_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_cc_sptr self)"""
        return _blocks_swig3.mute_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_cc_sptr self, int m)"""
        return _blocks_swig3.mute_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_cc_sptr self, int i) -> long"""
        return _blocks_swig3.mute_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_cc_sptr self, int i) -> long"""
        return _blocks_swig3.mute_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_cc_sptr self)"""
        return _blocks_swig3.mute_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_cc_sptr self) -> long"""
        return _blocks_swig3.mute_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_cc_sptr self, std::string name)"""
        return _blocks_swig3.mute_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_subscribers(self, *args, **kwargs)

mute_cc_sptr_swigregister = _blocks_swig3.mute_cc_sptr_swigregister
mute_cc_sptr_swigregister(mute_cc_sptr)

mute_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_cc = mute_cc.make;



