# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig2', [dirname(__file__)])
        except ImportError:
            import _blocks_swig2
            return _blocks_swig2
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig2 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_epoch()
class abs_ff(object):
    """
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ff.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> abs_ff_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ff.
        """
        return _blocks_swig2.abs_ff_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_abs_ff
    __del__ = lambda self : None;
abs_ff_swigregister = _blocks_swig2.abs_ff_swigregister
abs_ff_swigregister(abs_ff)

def abs_ff_make():
  """
    abs_ff_make() -> abs_ff_sptr

    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ff.
    """
  return _blocks_swig2.abs_ff_make()

class abs_ss(object):
    """
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ss.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> abs_ss_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ss.
        """
        return _blocks_swig2.abs_ss_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_abs_ss
    __del__ = lambda self : None;
abs_ss_swigregister = _blocks_swig2.abs_ss_swigregister
abs_ss_swigregister(abs_ss)

def abs_ss_make():
  """
    abs_ss_make() -> abs_ss_sptr

    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ss.
    """
  return _blocks_swig2.abs_ss_make()

class abs_ii(object):
    """
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ii.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> abs_ii_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ii.
        """
        return _blocks_swig2.abs_ii_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_abs_ii
    __del__ = lambda self : None;
abs_ii_swigregister = _blocks_swig2.abs_ii_swigregister
abs_ii_swigregister(abs_ii)

def abs_ii_make():
  """
    abs_ii_make() -> abs_ii_sptr

    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ii.
    """
  return _blocks_swig2.abs_ii_make()

class add_ff(object):
    """
    output = sum (input_0, input_1, ...)

    Add across all input streams.

    Constructor Specific Documentation:

    Add streams of float values.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_ff_sptr

        output = sum (input_0, input_1, ...)

        Add across all input streams.

        Constructor Specific Documentation:

        Add streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig2.add_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_add_ff
    __del__ = lambda self : None;
add_ff_swigregister = _blocks_swig2.add_ff_swigregister
add_ff_swigregister(add_ff)

def add_ff_make(vlen=1):
  """
    add_ff_make(size_t vlen=1) -> add_ff_sptr

    output = sum (input_0, input_1, ...)

    Add across all input streams.

    Constructor Specific Documentation:

    Add streams of float values.

    Args:
        vlen : Vector length
    """
  return _blocks_swig2.add_ff_make(vlen)

class add_ss(object):
    """
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_ss_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.add_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_add_ss
    __del__ = lambda self : None;
add_ss_swigregister = _blocks_swig2.add_ss_swigregister
add_ss_swigregister(add_ss)

def add_ss_make(vlen=1):
  """
    add_ss_make(size_t vlen=1) -> add_ss_sptr

    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.add_ss_make(vlen)

class add_ii(object):
    """
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_ii_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.add_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_add_ii
    __del__ = lambda self : None;
add_ii_swigregister = _blocks_swig2.add_ii_swigregister
add_ii_swigregister(add_ii)

def add_ii_make(vlen=1):
  """
    add_ii_make(size_t vlen=1) -> add_ii_sptr

    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.add_ii_make(vlen)

class add_cc(object):
    """
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_cc_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.add_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_add_cc
    __del__ = lambda self : None;
add_cc_swigregister = _blocks_swig2.add_cc_swigregister
add_cc_swigregister(add_cc)

def add_cc_make(vlen=1):
  """
    add_cc_make(size_t vlen=1) -> add_cc_sptr

    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.add_cc_make(vlen)

class add_const_bb(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_bb.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned char k) -> add_const_bb_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_bb.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_bb self) -> unsigned char

        Return additive constant.
        """
        return _blocks_swig2.add_const_bb_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_bb self, unsigned char k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_bb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_bb
    __del__ = lambda self : None;
add_const_bb_swigregister = _blocks_swig2.add_const_bb_swigregister
add_const_bb_swigregister(add_const_bb)

def add_const_bb_make(*args, **kwargs):
  """
    add_const_bb_make(unsigned char k) -> add_const_bb_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_bb.

    Args:
        k : additive constant
    """
  return _blocks_swig2.add_const_bb_make(*args, **kwargs)

class add_const_ff(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ff.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float k) -> add_const_ff_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ff.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_ff self) -> float

        Return additive constant.
        """
        return _blocks_swig2.add_const_ff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ff self, float k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_ff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_ff
    __del__ = lambda self : None;
add_const_ff_swigregister = _blocks_swig2.add_const_ff_swigregister
add_const_ff_swigregister(add_const_ff)

def add_const_ff_make(*args, **kwargs):
  """
    add_const_ff_make(float k) -> add_const_ff_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ff.

    Args:
        k : additive constant
    """
  return _blocks_swig2.add_const_ff_make(*args, **kwargs)

class add_const_ss(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ss.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short k) -> add_const_ss_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ss.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_ss self) -> short

        Return additive constant.
        """
        return _blocks_swig2.add_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ss self, short k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_ss
    __del__ = lambda self : None;
add_const_ss_swigregister = _blocks_swig2.add_const_ss_swigregister
add_const_ss_swigregister(add_const_ss)

def add_const_ss_make(*args, **kwargs):
  """
    add_const_ss_make(short k) -> add_const_ss_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ss.

    Args:
        k : additive constant
    """
  return _blocks_swig2.add_const_ss_make(*args, **kwargs)

class add_const_ii(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ii.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k) -> add_const_ii_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ii.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_ii self) -> int

        Return additive constant.
        """
        return _blocks_swig2.add_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ii self, int k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_ii
    __del__ = lambda self : None;
add_const_ii_swigregister = _blocks_swig2.add_const_ii_swigregister
add_const_ii_swigregister(add_const_ii)

def add_const_ii_make(*args, **kwargs):
  """
    add_const_ii_make(int k) -> add_const_ii_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ii.

    Args:
        k : additive constant
    """
  return _blocks_swig2.add_const_ii_make(*args, **kwargs)

class add_const_cc(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_cc.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr_complex k) -> add_const_cc_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_cc.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_cc self) -> gr_complex

        Return additive constant.
        """
        return _blocks_swig2.add_const_cc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_cc self, gr_complex k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_cc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_cc
    __del__ = lambda self : None;
add_const_cc_swigregister = _blocks_swig2.add_const_cc_swigregister
add_const_cc_swigregister(add_const_cc)

def add_const_cc_make(*args, **kwargs):
  """
    add_const_cc_make(gr_complex k) -> add_const_cc_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_cc.

    Args:
        k : additive constant
    """
  return _blocks_swig2.add_const_cc_make(*args, **kwargs)

class add_const_vbb(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vbb.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< unsigned char,std::allocator< unsigned char > > k) -> add_const_vbb_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vbb.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vbb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vbb self) -> std::vector< unsigned char,std::allocator< unsigned char > >

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vbb_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vbb self, std::vector< unsigned char,std::allocator< unsigned char > > k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vbb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vbb
    __del__ = lambda self : None;
add_const_vbb_swigregister = _blocks_swig2.add_const_vbb_swigregister
add_const_vbb_swigregister(add_const_vbb)

def add_const_vbb_make(*args, **kwargs):
  """
    add_const_vbb_make(std::vector< unsigned char,std::allocator< unsigned char > > k) -> add_const_vbb_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vbb.

    Args:
        k : additive constant vector
    """
  return _blocks_swig2.add_const_vbb_make(*args, **kwargs)

class add_const_vff(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vff.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float k) -> add_const_vff_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vff.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vff self) -> pmt_vector_float

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vff self, pmt_vector_float k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vff
    __del__ = lambda self : None;
add_const_vff_swigregister = _blocks_swig2.add_const_vff_swigregister
add_const_vff_swigregister(add_const_vff)

def add_const_vff_make(*args, **kwargs):
  """
    add_const_vff_make(pmt_vector_float k) -> add_const_vff_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vff.

    Args:
        k : additive constant vector
    """
  return _blocks_swig2.add_const_vff_make(*args, **kwargs)

class add_const_vss(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vss.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< short,std::allocator< short > > k) -> add_const_vss_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vss.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vss self) -> std::vector< short,std::allocator< short > >

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vss self, std::vector< short,std::allocator< short > > k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vss
    __del__ = lambda self : None;
add_const_vss_swigregister = _blocks_swig2.add_const_vss_swigregister
add_const_vss_swigregister(add_const_vss)

def add_const_vss_make(*args, **kwargs):
  """
    add_const_vss_make(std::vector< short,std::allocator< short > > k) -> add_const_vss_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vss.

    Args:
        k : additive constant vector
    """
  return _blocks_swig2.add_const_vss_make(*args, **kwargs)

class add_const_vii(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vii.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< int,std::allocator< int > > k) -> add_const_vii_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vii.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vii self) -> std::vector< int,std::allocator< int > >

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vii self, std::vector< int,std::allocator< int > > k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vii
    __del__ = lambda self : None;
add_const_vii_swigregister = _blocks_swig2.add_const_vii_swigregister
add_const_vii_swigregister(add_const_vii)

def add_const_vii_make(*args, **kwargs):
  """
    add_const_vii_make(std::vector< int,std::allocator< int > > k) -> add_const_vii_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vii.

    Args:
        k : additive constant vector
    """
  return _blocks_swig2.add_const_vii_make(*args, **kwargs)

class add_const_vcc(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vcc.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat k) -> add_const_vcc_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vcc.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vcc self) -> pmt_vector_cfloat

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vcc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vcc self, pmt_vector_cfloat k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vcc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vcc
    __del__ = lambda self : None;
add_const_vcc_swigregister = _blocks_swig2.add_const_vcc_swigregister
add_const_vcc_swigregister(add_const_vcc)

def add_const_vcc_make(*args, **kwargs):
  """
    add_const_vcc_make(pmt_vector_cfloat k) -> add_const_vcc_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vcc.

    Args:
        k : additive constant vector
    """
  return _blocks_swig2.add_const_vcc_make(*args, **kwargs)

class and_bb(object):
    """
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> and_bb_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.and_bb_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_and_bb
    __del__ = lambda self : None;
and_bb_swigregister = _blocks_swig2.and_bb_swigregister
and_bb_swigregister(and_bb)

def and_bb_make(vlen=1):
  """
    and_bb_make(size_t vlen=1) -> and_bb_sptr

    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.and_bb_make(vlen)

class and_ss(object):
    """
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> and_ss_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.and_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_and_ss
    __del__ = lambda self : None;
and_ss_swigregister = _blocks_swig2.and_ss_swigregister
and_ss_swigregister(and_ss)

def and_ss_make(vlen=1):
  """
    and_ss_make(size_t vlen=1) -> and_ss_sptr

    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.and_ss_make(vlen)

class and_ii(object):
    """
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> and_ii_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.and_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_and_ii
    __del__ = lambda self : None;
and_ii_swigregister = _blocks_swig2.and_ii_swigregister
and_ii_swigregister(and_ii)

def and_ii_make(vlen=1):
  """
    and_ii_make(size_t vlen=1) -> and_ii_sptr

    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.and_ii_make(vlen)

class and_const_bb(object):
    """
    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_bb.

    Args:
        k : AND constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned char k) -> and_const_bb_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_bb.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(and_const_bb self) -> unsigned char

        Return AND constant.
        """
        return _blocks_swig2.and_const_bb_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_bb self, unsigned char k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_bb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_and_const_bb
    __del__ = lambda self : None;
and_const_bb_swigregister = _blocks_swig2.and_const_bb_swigregister
and_const_bb_swigregister(and_const_bb)

def and_const_bb_make(*args, **kwargs):
  """
    and_const_bb_make(unsigned char k) -> and_const_bb_sptr

    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_bb.

    Args:
        k : AND constant
    """
  return _blocks_swig2.and_const_bb_make(*args, **kwargs)

class and_const_ss(object):
    """
    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ss.

    Args:
        k : AND constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short k) -> and_const_ss_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ss.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(and_const_ss self) -> short

        Return AND constant.
        """
        return _blocks_swig2.and_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ss self, short k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ss
    __del__ = lambda self : None;
and_const_ss_swigregister = _blocks_swig2.and_const_ss_swigregister
and_const_ss_swigregister(and_const_ss)

def and_const_ss_make(*args, **kwargs):
  """
    and_const_ss_make(short k) -> and_const_ss_sptr

    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ss.

    Args:
        k : AND constant
    """
  return _blocks_swig2.and_const_ss_make(*args, **kwargs)

class and_const_ii(object):
    """
    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ii.

    Args:
        k : AND constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k) -> and_const_ii_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ii.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(and_const_ii self) -> int

        Return AND constant.
        """
        return _blocks_swig2.and_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ii self, int k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ii
    __del__ = lambda self : None;
and_const_ii_swigregister = _blocks_swig2.and_const_ii_swigregister
and_const_ii_swigregister(and_const_ii)

def and_const_ii_make(*args, **kwargs):
  """
    and_const_ii_make(int k) -> and_const_ii_sptr

    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ii.

    Args:
        k : AND constant
    """
  return _blocks_swig2.and_const_ii_make(*args, **kwargs)

class argmax_fs(object):
    """
    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> argmax_fs_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_fs_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_argmax_fs
    __del__ = lambda self : None;
argmax_fs_swigregister = _blocks_swig2.argmax_fs_swigregister
argmax_fs_swigregister(argmax_fs)

def argmax_fs_make(*args, **kwargs):
  """
    argmax_fs_make(size_t vlen) -> argmax_fs_sptr

    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.argmax_fs_make(*args, **kwargs)

class argmax_is(object):
    """
    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> argmax_is_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_is_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_argmax_is
    __del__ = lambda self : None;
argmax_is_swigregister = _blocks_swig2.argmax_is_swigregister
argmax_is_swigregister(argmax_is)

def argmax_is_make(*args, **kwargs):
  """
    argmax_is_make(size_t vlen) -> argmax_is_sptr

    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.argmax_is_make(*args, **kwargs)

class argmax_ss(object):
    """
    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> argmax_ss_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_argmax_ss
    __del__ = lambda self : None;
argmax_ss_swigregister = _blocks_swig2.argmax_ss_swigregister
argmax_ss_swigregister(argmax_ss)

def argmax_ss_make(*args, **kwargs):
  """
    argmax_ss_make(size_t vlen) -> argmax_ss_sptr

    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.argmax_ss_make(*args, **kwargs)

class char_to_float(object):
    """
    Convert stream of chars to a stream of float.

    Converts  length vectors of input char samples to floats and applies a scaling factor of

    Constructor Specific Documentation:

    Build a chars to float stream converter block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> char_to_float_sptr

        Convert stream of chars to a stream of float.

        Converts  length vectors of input char samples to floats and applies a scaling factor of

        Constructor Specific Documentation:

        Build a chars to float stream converter block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig2.char_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(char_to_float self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig2.char_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(char_to_float self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig2.char_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_char_to_float
    __del__ = lambda self : None;
char_to_float_swigregister = _blocks_swig2.char_to_float_swigregister
char_to_float_swigregister(char_to_float)

def char_to_float_make(vlen=1, scale=1.0):
  """
    char_to_float_make(size_t vlen=1, float scale=1.0) -> char_to_float_sptr

    Convert stream of chars to a stream of float.

    Converts  length vectors of input char samples to floats and applies a scaling factor of

    Constructor Specific Documentation:

    Build a chars to float stream converter block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
  return _blocks_swig2.char_to_float_make(vlen, scale)

class bin_statistics_f(object):
    """
    control scanning and record frequency domain statistics

    Constructor Specific Documentation:

    Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

    Args:
        vlen : vector length
        msgq : message queue
        tune : a feval_dd callback function
        tune_delay : number of samples for the tune delay
        dwell_delay : number of samples for the dwell delay
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int vlen, msg_queue_sptr msgq, gr::feval_dd * tune, size_t tune_delay, size_t dwell_delay) -> bin_statistics_f_sptr

        control scanning and record frequency domain statistics

        Constructor Specific Documentation:

        Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

        Args:
            vlen : vector length
            msgq : message queue
            tune : a feval_dd callback function
            tune_delay : number of samples for the tune delay
            dwell_delay : number of samples for the dwell delay
        """
        return _blocks_swig2.bin_statistics_f_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_bin_statistics_f
    __del__ = lambda self : None;
bin_statistics_f_swigregister = _blocks_swig2.bin_statistics_f_swigregister
bin_statistics_f_swigregister(bin_statistics_f)

def bin_statistics_f_make(*args, **kwargs):
  """
    bin_statistics_f_make(unsigned int vlen, msg_queue_sptr msgq, gr::feval_dd * tune, size_t tune_delay, size_t dwell_delay) -> bin_statistics_f_sptr

    control scanning and record frequency domain statistics

    Constructor Specific Documentation:

    Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

    Args:
        vlen : vector length
        msgq : message queue
        tune : a feval_dd callback function
        tune_delay : number of samples for the tune delay
        dwell_delay : number of samples for the dwell delay
    """
  return _blocks_swig2.bin_statistics_f_make(*args, **kwargs)

class burst_tagger(object):
    """
    Sets a burst on/off tag based on the value of the trigger input.

    This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

    The signal on stream 0 is retransmitted to output stream 0.

    Constructor Specific Documentation:

    Build a burst tagger gnuradio/blocks.

    Args:
        itemsize : itemsize of the signal stream on input 0.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize) -> burst_tagger_sptr

        Sets a burst on/off tag based on the value of the trigger input.

        This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

        The signal on stream 0 is retransmitted to output stream 0.

        Constructor Specific Documentation:

        Build a burst tagger gnuradio/blocks.

        Args:
            itemsize : itemsize of the signal stream on input 0.
        """
        return _blocks_swig2.burst_tagger_make(*args, **kwargs)

    make = staticmethod(make)
    def set_true_tag(self, *args, **kwargs):
        """
        set_true_tag(burst_tagger self, std::string const & key, bool value)

        For the true burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_set_true_tag(self, *args, **kwargs)

    def set_false_tag(self, *args, **kwargs):
        """
        set_false_tag(burst_tagger self, std::string const & key, bool value)

        For the false burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_set_false_tag(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_burst_tagger
    __del__ = lambda self : None;
burst_tagger_swigregister = _blocks_swig2.burst_tagger_swigregister
burst_tagger_swigregister(burst_tagger)

def burst_tagger_make(*args, **kwargs):
  """
    burst_tagger_make(size_t itemsize) -> burst_tagger_sptr

    Sets a burst on/off tag based on the value of the trigger input.

    This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

    The signal on stream 0 is retransmitted to output stream 0.

    Constructor Specific Documentation:

    Build a burst tagger gnuradio/blocks.

    Args:
        itemsize : itemsize of the signal stream on input 0.
    """
  return _blocks_swig2.burst_tagger_make(*args, **kwargs)

class char_to_short(object):
    """
    Convert stream of chars to a stream of short.

    Converts  length vectors of input char samples to shorts:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> char_to_short_sptr

        Convert stream of chars to a stream of short.

        Converts  length vectors of input char samples to shorts:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.char_to_short_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_char_to_short
    __del__ = lambda self : None;
char_to_short_swigregister = _blocks_swig2.char_to_short_swigregister
char_to_short_swigregister(char_to_short)

def char_to_short_make(vlen=1):
  """
    char_to_short_make(size_t vlen=1) -> char_to_short_sptr

    Convert stream of chars to a stream of short.

    Converts  length vectors of input char samples to shorts:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.char_to_short_make(vlen)

class check_lfsr_32k_s(object):
    """
    sink that checks if its input stream consists of a lfsr_32k sequence.

    This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> check_lfsr_32k_s_sptr

        sink that checks if its input stream consists of a lfsr_32k sequence.

        This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:


        """
        return _blocks_swig2.check_lfsr_32k_s_make()

    make = staticmethod(make)
    def ntotal(self):
        """ntotal(check_lfsr_32k_s self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_ntotal(self)

    def nright(self):
        """nright(check_lfsr_32k_s self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_nright(self)

    def runlength(self):
        """runlength(check_lfsr_32k_s self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_runlength(self)

    __swig_destroy__ = _blocks_swig2.delete_check_lfsr_32k_s
    __del__ = lambda self : None;
check_lfsr_32k_s_swigregister = _blocks_swig2.check_lfsr_32k_s_swigregister
check_lfsr_32k_s_swigregister(check_lfsr_32k_s)

def check_lfsr_32k_s_make():
  """
    check_lfsr_32k_s_make() -> check_lfsr_32k_s_sptr

    sink that checks if its input stream consists of a lfsr_32k sequence.

    This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:


    """
  return _blocks_swig2.check_lfsr_32k_s_make()

class complex_to_interleaved_short(object):
    """
    Convert stream of complex to a stream of interleaved shorts.

    The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

    Constructor Specific Documentation:

    Build a complex to interleaved shorts block.

    Args:
        vector : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vector=False):
        """
        make(bool vector=False) -> complex_to_interleaved_short_sptr

        Convert stream of complex to a stream of interleaved shorts.

        The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

        Constructor Specific Documentation:

        Build a complex to interleaved shorts block.

        Args:
            vector : 
        """
        return _blocks_swig2.complex_to_interleaved_short_make(vector)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_interleaved_short
    __del__ = lambda self : None;
complex_to_interleaved_short_swigregister = _blocks_swig2.complex_to_interleaved_short_swigregister
complex_to_interleaved_short_swigregister(complex_to_interleaved_short)

def complex_to_interleaved_short_make(vector=False):
  """
    complex_to_interleaved_short_make(bool vector=False) -> complex_to_interleaved_short_sptr

    Convert stream of complex to a stream of interleaved shorts.

    The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

    Constructor Specific Documentation:

    Build a complex to interleaved shorts block.

    Args:
        vector : 
    """
  return _blocks_swig2.complex_to_interleaved_short_make(vector)

class complex_to_float(object):
    """
    Convert a stream of gr_complex to 1 or 2 streams of float.

    If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

    Constructor Specific Documentation:

    Build a complex to float block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_float_sptr

        Convert a stream of gr_complex to 1 or 2 streams of float.

        If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

        Constructor Specific Documentation:

        Build a complex to float block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_float_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_float
    __del__ = lambda self : None;
complex_to_float_swigregister = _blocks_swig2.complex_to_float_swigregister
complex_to_float_swigregister(complex_to_float)

def complex_to_float_make(vlen=1):
  """
    complex_to_float_make(size_t vlen=1) -> complex_to_float_sptr

    Convert a stream of gr_complex to 1 or 2 streams of float.

    If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

    Constructor Specific Documentation:

    Build a complex to float block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_float_make(vlen)

class complex_to_real(object):
    """
    Produces the real part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to real part block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_real_sptr

        Produces the real part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to real part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_real_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_real
    __del__ = lambda self : None;
complex_to_real_swigregister = _blocks_swig2.complex_to_real_swigregister
complex_to_real_swigregister(complex_to_real)

def complex_to_real_make(vlen=1):
  """
    complex_to_real_make(size_t vlen=1) -> complex_to_real_sptr

    Produces the real part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to real part block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_real_make(vlen)

class complex_to_imag(object):
    """
    Produces the imaginary part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to imaginary part block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_imag_sptr

        Produces the imaginary part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to imaginary part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_imag_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_imag
    __del__ = lambda self : None;
complex_to_imag_swigregister = _blocks_swig2.complex_to_imag_swigregister
complex_to_imag_swigregister(complex_to_imag)

def complex_to_imag_make(vlen=1):
  """
    complex_to_imag_make(size_t vlen=1) -> complex_to_imag_sptr

    Produces the imaginary part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to imaginary part block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_imag_make(vlen)

class complex_to_mag(object):
    """
    complex in, magnitude out (float)

    Calculates the magnitude of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_mag_sptr

        complex in, magnitude out (float)

        Calculates the magnitude of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag
    __del__ = lambda self : None;
complex_to_mag_swigregister = _blocks_swig2.complex_to_mag_swigregister
complex_to_mag_swigregister(complex_to_mag)

def complex_to_mag_make(vlen=1):
  """
    complex_to_mag_make(size_t vlen=1) -> complex_to_mag_sptr

    complex in, magnitude out (float)

    Calculates the magnitude of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_mag_make(vlen)

class complex_to_mag_squared(object):
    """
    complex in, magnitude squared out (float)

    Calculates the magnitude squared of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude squared block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_mag_squared_sptr

        complex in, magnitude squared out (float)

        Calculates the magnitude squared of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude squared block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_squared_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag_squared
    __del__ = lambda self : None;
complex_to_mag_squared_swigregister = _blocks_swig2.complex_to_mag_squared_swigregister
complex_to_mag_squared_swigregister(complex_to_mag_squared)

def complex_to_mag_squared_make(vlen=1):
  """
    complex_to_mag_squared_make(size_t vlen=1) -> complex_to_mag_squared_sptr

    complex in, magnitude squared out (float)

    Calculates the magnitude squared of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude squared block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_mag_squared_make(vlen)

class complex_to_arg(object):
    """
    complex in, arg (arctan) out (float)

    Constructor Specific Documentation:

    Build a complex to arg block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_arg_sptr

        complex in, arg (arctan) out (float)

        Constructor Specific Documentation:

        Build a complex to arg block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_arg_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_arg
    __del__ = lambda self : None;
complex_to_arg_swigregister = _blocks_swig2.complex_to_arg_swigregister
complex_to_arg_swigregister(complex_to_arg)

def complex_to_arg_make(vlen=1):
  """
    complex_to_arg_make(size_t vlen=1) -> complex_to_arg_sptr

    complex in, arg (arctan) out (float)

    Constructor Specific Documentation:

    Build a complex to arg block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_arg_make(vlen)

class conjugate_cc(object):
    """
    output = complex conjugate of input

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> conjugate_cc_sptr

        output = complex conjugate of input

        Constructor Specific Documentation:


        """
        return _blocks_swig2.conjugate_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_conjugate_cc
    __del__ = lambda self : None;
conjugate_cc_swigregister = _blocks_swig2.conjugate_cc_swigregister
conjugate_cc_swigregister(conjugate_cc)

def conjugate_cc_make():
  """
    conjugate_cc_make() -> conjugate_cc_sptr

    output = complex conjugate of input

    Constructor Specific Documentation:


    """
  return _blocks_swig2.conjugate_cc_make()

class deinterleave(object):
    """
    deinterleave an input block of samples into N outputs.

    This block deinterleaves blocks of samples. For each output connection, the input stream will be deinterleaved successively to the output connections. By default, the block deinterleaves a single input to each output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a deinterleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block to deinterleave
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, unsigned int blocksize=1) -> deinterleave_sptr

        deinterleave an input block of samples into N outputs.

        This block deinterleaves blocks of samples. For each output connection, the input stream will be deinterleaved successively to the output connections. By default, the block deinterleaves a single input to each output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a deinterleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block to deinterleave
        """
        return _blocks_swig2.deinterleave_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_deinterleave
    __del__ = lambda self : None;
deinterleave_swigregister = _blocks_swig2.deinterleave_swigregister
deinterleave_swigregister(deinterleave)

def deinterleave_make(*args, **kwargs):
  """
    deinterleave_make(size_t itemsize, unsigned int blocksize=1) -> deinterleave_sptr

    deinterleave an input block of samples into N outputs.

    This block deinterleaves blocks of samples. For each output connection, the input stream will be deinterleaved successively to the output connections. By default, the block deinterleaves a single input to each output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a deinterleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block to deinterleave
    """
  return _blocks_swig2.deinterleave_make(*args, **kwargs)

class divide_ff(object):
    """
    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> divide_ff_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_divide_ff
    __del__ = lambda self : None;
divide_ff_swigregister = _blocks_swig2.divide_ff_swigregister
divide_ff_swigregister(divide_ff)

def divide_ff_make(vlen=1):
  """
    divide_ff_make(size_t vlen=1) -> divide_ff_sptr

    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.divide_ff_make(vlen)

class divide_ss(object):
    """
    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> divide_ss_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_divide_ss
    __del__ = lambda self : None;
divide_ss_swigregister = _blocks_swig2.divide_ss_swigregister
divide_ss_swigregister(divide_ss)

def divide_ss_make(vlen=1):
  """
    divide_ss_make(size_t vlen=1) -> divide_ss_sptr

    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.divide_ss_make(vlen)

class divide_ii(object):
    """
    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> divide_ii_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_divide_ii
    __del__ = lambda self : None;
divide_ii_swigregister = _blocks_swig2.divide_ii_swigregister
divide_ii_swigregister(divide_ii)

def divide_ii_make(vlen=1):
  """
    divide_ii_make(size_t vlen=1) -> divide_ii_sptr

    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.divide_ii_make(vlen)

class divide_cc(object):
    """
    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> divide_cc_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_divide_cc
    __del__ = lambda self : None;
divide_cc_swigregister = _blocks_swig2.divide_cc_swigregister
divide_cc_swigregister(divide_cc)

def divide_cc_make(vlen=1):
  """
    divide_cc_make(size_t vlen=1) -> divide_cc_sptr

    output = input[0] / input[1] / ... / input[M-1]

    Divide across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.divide_cc_make(vlen)

class abs_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::abs_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::abs_ff)> self) -> abs_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::abs_ff)> self, abs_ff p) -> abs_ff_sptr
        """
        this = _blocks_swig2.new_abs_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(abs_ff_sptr self) -> abs_ff"""
        return _blocks_swig2.abs_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_abs_ff_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(abs_ff_sptr self) -> abs_ff_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ff.
        """
        return _blocks_swig2.abs_ff_sptr_make(self)

    def history(self):
        """history(abs_ff_sptr self) -> unsigned int"""
        return _blocks_swig2.abs_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(abs_ff_sptr self, int which, int delay)
        declare_sample_delay(abs_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig2.abs_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(abs_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.abs_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(abs_ff_sptr self) -> int"""
        return _blocks_swig2.abs_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(abs_ff_sptr self) -> double"""
        return _blocks_swig2.abs_ff_sptr_relative_rate(self)

    def start(self):
        """start(abs_ff_sptr self) -> bool"""
        return _blocks_swig2.abs_ff_sptr_start(self)

    def stop(self):
        """stop(abs_ff_sptr self) -> bool"""
        return _blocks_swig2.abs_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(abs_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.abs_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(abs_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.abs_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(abs_ff_sptr self) -> int"""
        return _blocks_swig2.abs_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(abs_ff_sptr self, int m)"""
        return _blocks_swig2.abs_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(abs_ff_sptr self)"""
        return _blocks_swig2.abs_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(abs_ff_sptr self) -> bool"""
        return _blocks_swig2.abs_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(abs_ff_sptr self, int m)"""
        return _blocks_swig2.abs_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(abs_ff_sptr self) -> int"""
        return _blocks_swig2.abs_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(abs_ff_sptr self, int i) -> long"""
        return _blocks_swig2.abs_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(abs_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.abs_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(abs_ff_sptr self, int i) -> long"""
        return _blocks_swig2.abs_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(abs_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.abs_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(abs_ff_sptr self) -> float"""
        return _blocks_swig2.abs_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(abs_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.abs_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(abs_ff_sptr self)"""
        return _blocks_swig2.abs_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(abs_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.abs_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(abs_ff_sptr self) -> int"""
        return _blocks_swig2.abs_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(abs_ff_sptr self) -> int"""
        return _blocks_swig2.abs_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(abs_ff_sptr self, int priority) -> int"""
        return _blocks_swig2.abs_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(abs_ff_sptr self) -> std::string"""
        return _blocks_swig2.abs_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(abs_ff_sptr self) -> std::string"""
        return _blocks_swig2.abs_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(abs_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.abs_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(abs_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.abs_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(abs_ff_sptr self) -> long"""
        return _blocks_swig2.abs_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(abs_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.abs_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(abs_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.abs_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(abs_ff_sptr self) -> std::string"""
        return _blocks_swig2.abs_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(abs_ff_sptr self, std::string name)"""
        return _blocks_swig2.abs_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(abs_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.abs_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(abs_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.abs_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(abs_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.abs_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(abs_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.abs_ff_sptr_message_subscribers(self, *args, **kwargs)

abs_ff_sptr_swigregister = _blocks_swig2.abs_ff_sptr_swigregister
abs_ff_sptr_swigregister(abs_ff_sptr)

abs_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ff = abs_ff.make;

class abs_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::abs_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::abs_ss)> self) -> abs_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::abs_ss)> self, abs_ss p) -> abs_ss_sptr
        """
        this = _blocks_swig2.new_abs_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(abs_ss_sptr self) -> abs_ss"""
        return _blocks_swig2.abs_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_abs_ss_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(abs_ss_sptr self) -> abs_ss_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ss.
        """
        return _blocks_swig2.abs_ss_sptr_make(self)

    def history(self):
        """history(abs_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.abs_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(abs_ss_sptr self, int which, int delay)
        declare_sample_delay(abs_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.abs_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(abs_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.abs_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(abs_ss_sptr self) -> int"""
        return _blocks_swig2.abs_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(abs_ss_sptr self) -> double"""
        return _blocks_swig2.abs_ss_sptr_relative_rate(self)

    def start(self):
        """start(abs_ss_sptr self) -> bool"""
        return _blocks_swig2.abs_ss_sptr_start(self)

    def stop(self):
        """stop(abs_ss_sptr self) -> bool"""
        return _blocks_swig2.abs_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(abs_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.abs_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(abs_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.abs_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(abs_ss_sptr self) -> int"""
        return _blocks_swig2.abs_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(abs_ss_sptr self, int m)"""
        return _blocks_swig2.abs_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(abs_ss_sptr self)"""
        return _blocks_swig2.abs_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(abs_ss_sptr self) -> bool"""
        return _blocks_swig2.abs_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(abs_ss_sptr self, int m)"""
        return _blocks_swig2.abs_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(abs_ss_sptr self) -> int"""
        return _blocks_swig2.abs_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(abs_ss_sptr self, int i) -> long"""
        return _blocks_swig2.abs_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(abs_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.abs_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(abs_ss_sptr self, int i) -> long"""
        return _blocks_swig2.abs_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(abs_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.abs_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(abs_ss_sptr self) -> float"""
        return _blocks_swig2.abs_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(abs_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.abs_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(abs_ss_sptr self)"""
        return _blocks_swig2.abs_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(abs_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.abs_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(abs_ss_sptr self) -> int"""
        return _blocks_swig2.abs_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(abs_ss_sptr self) -> int"""
        return _blocks_swig2.abs_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(abs_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.abs_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(abs_ss_sptr self) -> std::string"""
        return _blocks_swig2.abs_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(abs_ss_sptr self) -> std::string"""
        return _blocks_swig2.abs_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(abs_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.abs_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(abs_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.abs_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(abs_ss_sptr self) -> long"""
        return _blocks_swig2.abs_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(abs_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.abs_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(abs_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.abs_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(abs_ss_sptr self) -> std::string"""
        return _blocks_swig2.abs_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(abs_ss_sptr self, std::string name)"""
        return _blocks_swig2.abs_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(abs_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.abs_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(abs_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.abs_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(abs_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.abs_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(abs_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.abs_ss_sptr_message_subscribers(self, *args, **kwargs)

abs_ss_sptr_swigregister = _blocks_swig2.abs_ss_sptr_swigregister
abs_ss_sptr_swigregister(abs_ss_sptr)

abs_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ss = abs_ss.make;

class abs_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::abs_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::abs_ii)> self) -> abs_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::abs_ii)> self, abs_ii p) -> abs_ii_sptr
        """
        this = _blocks_swig2.new_abs_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(abs_ii_sptr self) -> abs_ii"""
        return _blocks_swig2.abs_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_abs_ii_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(abs_ii_sptr self) -> abs_ii_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ii.
        """
        return _blocks_swig2.abs_ii_sptr_make(self)

    def history(self):
        """history(abs_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.abs_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(abs_ii_sptr self, int which, int delay)
        declare_sample_delay(abs_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.abs_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(abs_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.abs_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(abs_ii_sptr self) -> int"""
        return _blocks_swig2.abs_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(abs_ii_sptr self) -> double"""
        return _blocks_swig2.abs_ii_sptr_relative_rate(self)

    def start(self):
        """start(abs_ii_sptr self) -> bool"""
        return _blocks_swig2.abs_ii_sptr_start(self)

    def stop(self):
        """stop(abs_ii_sptr self) -> bool"""
        return _blocks_swig2.abs_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(abs_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.abs_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(abs_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.abs_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(abs_ii_sptr self) -> int"""
        return _blocks_swig2.abs_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(abs_ii_sptr self, int m)"""
        return _blocks_swig2.abs_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(abs_ii_sptr self)"""
        return _blocks_swig2.abs_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(abs_ii_sptr self) -> bool"""
        return _blocks_swig2.abs_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(abs_ii_sptr self, int m)"""
        return _blocks_swig2.abs_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(abs_ii_sptr self) -> int"""
        return _blocks_swig2.abs_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(abs_ii_sptr self, int i) -> long"""
        return _blocks_swig2.abs_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(abs_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.abs_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(abs_ii_sptr self, int i) -> long"""
        return _blocks_swig2.abs_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(abs_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.abs_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.abs_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(abs_ii_sptr self) -> float"""
        return _blocks_swig2.abs_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(abs_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.abs_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(abs_ii_sptr self)"""
        return _blocks_swig2.abs_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(abs_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.abs_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(abs_ii_sptr self) -> int"""
        return _blocks_swig2.abs_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(abs_ii_sptr self) -> int"""
        return _blocks_swig2.abs_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(abs_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.abs_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(abs_ii_sptr self) -> std::string"""
        return _blocks_swig2.abs_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(abs_ii_sptr self) -> std::string"""
        return _blocks_swig2.abs_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(abs_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.abs_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(abs_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.abs_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(abs_ii_sptr self) -> long"""
        return _blocks_swig2.abs_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(abs_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.abs_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(abs_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.abs_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(abs_ii_sptr self) -> std::string"""
        return _blocks_swig2.abs_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(abs_ii_sptr self, std::string name)"""
        return _blocks_swig2.abs_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(abs_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.abs_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(abs_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.abs_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(abs_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.abs_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(abs_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.abs_ii_sptr_message_subscribers(self, *args, **kwargs)

abs_ii_sptr_swigregister = _blocks_swig2.abs_ii_sptr_swigregister
abs_ii_sptr_swigregister(abs_ii_sptr)

abs_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ii = abs_ii.make;

class add_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_ff)> self) -> add_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_ff)> self, add_ff p) -> add_ff_sptr
        """
        this = _blocks_swig2.new_add_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_ff_sptr self) -> add_ff"""
        return _blocks_swig2.add_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_ff_sptr self, size_t vlen=1) -> add_ff_sptr

        output = sum (input_0, input_1, ...)

        Add across all input streams.

        Constructor Specific Documentation:

        Add streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig2.add_ff_sptr_make(self, vlen)

    def history(self):
        """history(add_ff_sptr self) -> unsigned int"""
        return _blocks_swig2.add_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_ff_sptr self, int which, int delay)
        declare_sample_delay(add_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_ff_sptr self) -> int"""
        return _blocks_swig2.add_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_ff_sptr self) -> double"""
        return _blocks_swig2.add_ff_sptr_relative_rate(self)

    def start(self):
        """start(add_ff_sptr self) -> bool"""
        return _blocks_swig2.add_ff_sptr_start(self)

    def stop(self):
        """stop(add_ff_sptr self) -> bool"""
        return _blocks_swig2.add_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_ff_sptr self) -> int"""
        return _blocks_swig2.add_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_ff_sptr self, int m)"""
        return _blocks_swig2.add_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_ff_sptr self)"""
        return _blocks_swig2.add_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_ff_sptr self) -> bool"""
        return _blocks_swig2.add_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_ff_sptr self, int m)"""
        return _blocks_swig2.add_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_ff_sptr self) -> int"""
        return _blocks_swig2.add_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_ff_sptr self, int i) -> long"""
        return _blocks_swig2.add_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_ff_sptr self, int i) -> long"""
        return _blocks_swig2.add_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_ff_sptr self) -> float"""
        return _blocks_swig2.add_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_ff_sptr self)"""
        return _blocks_swig2.add_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_ff_sptr self) -> int"""
        return _blocks_swig2.add_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_ff_sptr self) -> int"""
        return _blocks_swig2.add_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_ff_sptr self, int priority) -> int"""
        return _blocks_swig2.add_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_ff_sptr self) -> std::string"""
        return _blocks_swig2.add_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_ff_sptr self) -> std::string"""
        return _blocks_swig2.add_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_ff_sptr self) -> long"""
        return _blocks_swig2.add_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_ff_sptr self) -> std::string"""
        return _blocks_swig2.add_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_ff_sptr self, std::string name)"""
        return _blocks_swig2.add_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_ff_sptr_message_subscribers(self, *args, **kwargs)

add_ff_sptr_swigregister = _blocks_swig2.add_ff_sptr_swigregister
add_ff_sptr_swigregister(add_ff_sptr)

add_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ff = add_ff.make;

class add_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_ss)> self) -> add_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_ss)> self, add_ss p) -> add_ss_sptr
        """
        this = _blocks_swig2.new_add_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_ss_sptr self) -> add_ss"""
        return _blocks_swig2.add_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_ss_sptr self, size_t vlen=1) -> add_ss_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.add_ss_sptr_make(self, vlen)

    def history(self):
        """history(add_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.add_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_ss_sptr self, int which, int delay)
        declare_sample_delay(add_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_ss_sptr self) -> int"""
        return _blocks_swig2.add_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_ss_sptr self) -> double"""
        return _blocks_swig2.add_ss_sptr_relative_rate(self)

    def start(self):
        """start(add_ss_sptr self) -> bool"""
        return _blocks_swig2.add_ss_sptr_start(self)

    def stop(self):
        """stop(add_ss_sptr self) -> bool"""
        return _blocks_swig2.add_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_ss_sptr self) -> int"""
        return _blocks_swig2.add_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_ss_sptr self, int m)"""
        return _blocks_swig2.add_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_ss_sptr self)"""
        return _blocks_swig2.add_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_ss_sptr self) -> bool"""
        return _blocks_swig2.add_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_ss_sptr self, int m)"""
        return _blocks_swig2.add_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_ss_sptr self) -> int"""
        return _blocks_swig2.add_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_ss_sptr self, int i) -> long"""
        return _blocks_swig2.add_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_ss_sptr self, int i) -> long"""
        return _blocks_swig2.add_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_ss_sptr self, int which) -> float
        pc_input_buffers_full(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_ss_sptr self, int which) -> float
        pc_output_buffers_full(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_ss_sptr self) -> float"""
        return _blocks_swig2.add_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_ss_sptr self)"""
        return _blocks_swig2.add_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_ss_sptr self) -> int"""
        return _blocks_swig2.add_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_ss_sptr self) -> int"""
        return _blocks_swig2.add_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.add_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_ss_sptr self) -> std::string"""
        return _blocks_swig2.add_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_ss_sptr self) -> std::string"""
        return _blocks_swig2.add_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_ss_sptr self) -> long"""
        return _blocks_swig2.add_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_ss_sptr self) -> std::string"""
        return _blocks_swig2.add_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_ss_sptr self, std::string name)"""
        return _blocks_swig2.add_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_ss_sptr_message_subscribers(self, *args, **kwargs)

add_ss_sptr_swigregister = _blocks_swig2.add_ss_sptr_swigregister
add_ss_sptr_swigregister(add_ss_sptr)

add_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ss = add_ss.make;

class add_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_ii)> self) -> add_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_ii)> self, add_ii p) -> add_ii_sptr
        """
        this = _blocks_swig2.new_add_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_ii_sptr self) -> add_ii"""
        return _blocks_swig2.add_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_ii_sptr self, size_t vlen=1) -> add_ii_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.add_ii_sptr_make(self, vlen)

    def history(self):
        """history(add_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.add_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_ii_sptr self, int which, int delay)
        declare_sample_delay(add_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_ii_sptr self) -> int"""
        return _blocks_swig2.add_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_ii_sptr self) -> double"""
        return _blocks_swig2.add_ii_sptr_relative_rate(self)

    def start(self):
        """start(add_ii_sptr self) -> bool"""
        return _blocks_swig2.add_ii_sptr_start(self)

    def stop(self):
        """stop(add_ii_sptr self) -> bool"""
        return _blocks_swig2.add_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_ii_sptr self) -> int"""
        return _blocks_swig2.add_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_ii_sptr self, int m)"""
        return _blocks_swig2.add_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_ii_sptr self)"""
        return _blocks_swig2.add_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_ii_sptr self) -> bool"""
        return _blocks_swig2.add_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_ii_sptr self, int m)"""
        return _blocks_swig2.add_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_ii_sptr self) -> int"""
        return _blocks_swig2.add_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_ii_sptr self, int i) -> long"""
        return _blocks_swig2.add_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_ii_sptr self, int i) -> long"""
        return _blocks_swig2.add_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_ii_sptr self, int which) -> float
        pc_input_buffers_full(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_ii_sptr self, int which) -> float
        pc_output_buffers_full(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_ii_sptr self) -> float"""
        return _blocks_swig2.add_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_ii_sptr self)"""
        return _blocks_swig2.add_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_ii_sptr self) -> int"""
        return _blocks_swig2.add_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_ii_sptr self) -> int"""
        return _blocks_swig2.add_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.add_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_ii_sptr self) -> std::string"""
        return _blocks_swig2.add_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_ii_sptr self) -> std::string"""
        return _blocks_swig2.add_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_ii_sptr self) -> long"""
        return _blocks_swig2.add_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_ii_sptr self) -> std::string"""
        return _blocks_swig2.add_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_ii_sptr self, std::string name)"""
        return _blocks_swig2.add_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_ii_sptr_message_subscribers(self, *args, **kwargs)

add_ii_sptr_swigregister = _blocks_swig2.add_ii_sptr_swigregister
add_ii_sptr_swigregister(add_ii_sptr)

add_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ii = add_ii.make;

class add_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_cc)> self) -> add_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_cc)> self, add_cc p) -> add_cc_sptr
        """
        this = _blocks_swig2.new_add_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_cc_sptr self) -> add_cc"""
        return _blocks_swig2.add_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_cc_sptr self, size_t vlen=1) -> add_cc_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.add_cc_sptr_make(self, vlen)

    def history(self):
        """history(add_cc_sptr self) -> unsigned int"""
        return _blocks_swig2.add_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_cc_sptr self, int which, int delay)
        declare_sample_delay(add_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_cc_sptr self) -> int"""
        return _blocks_swig2.add_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_cc_sptr self) -> double"""
        return _blocks_swig2.add_cc_sptr_relative_rate(self)

    def start(self):
        """start(add_cc_sptr self) -> bool"""
        return _blocks_swig2.add_cc_sptr_start(self)

    def stop(self):
        """stop(add_cc_sptr self) -> bool"""
        return _blocks_swig2.add_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_cc_sptr self) -> int"""
        return _blocks_swig2.add_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_cc_sptr self, int m)"""
        return _blocks_swig2.add_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_cc_sptr self)"""
        return _blocks_swig2.add_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_cc_sptr self) -> bool"""
        return _blocks_swig2.add_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_cc_sptr self, int m)"""
        return _blocks_swig2.add_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_cc_sptr self) -> int"""
        return _blocks_swig2.add_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_cc_sptr self, int i) -> long"""
        return _blocks_swig2.add_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_cc_sptr self, int i) -> long"""
        return _blocks_swig2.add_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_cc_sptr self, int which) -> float
        pc_input_buffers_full(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_cc_sptr self, int which) -> float
        pc_output_buffers_full(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_cc_sptr self) -> float"""
        return _blocks_swig2.add_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_cc_sptr self)"""
        return _blocks_swig2.add_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_cc_sptr self) -> int"""
        return _blocks_swig2.add_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_cc_sptr self) -> int"""
        return _blocks_swig2.add_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_cc_sptr self, int priority) -> int"""
        return _blocks_swig2.add_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_cc_sptr self) -> std::string"""
        return _blocks_swig2.add_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_cc_sptr self) -> std::string"""
        return _blocks_swig2.add_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_cc_sptr self) -> long"""
        return _blocks_swig2.add_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_cc_sptr self) -> std::string"""
        return _blocks_swig2.add_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_cc_sptr self, std::string name)"""
        return _blocks_swig2.add_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_cc_sptr_message_subscribers(self, *args, **kwargs)

add_cc_sptr_swigregister = _blocks_swig2.add_cc_sptr_swigregister
add_cc_sptr_swigregister(add_cc_sptr)

add_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_cc = add_cc.make;

class add_const_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_bb)> self) -> add_const_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_bb)> self, add_const_bb p) -> add_const_bb_sptr
        """
        this = _blocks_swig2.new_add_const_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_bb_sptr self) -> add_const_bb"""
        return _blocks_swig2.add_const_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_bb_sptr self, unsigned char k) -> add_const_bb_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_bb.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_bb_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_bb_sptr self) -> unsigned char

        Return additive constant.
        """
        return _blocks_swig2.add_const_bb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_bb_sptr self, unsigned char k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_bb_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_bb_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_bb_sptr self, int which, int delay)
        declare_sample_delay(add_const_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_bb_sptr self) -> int"""
        return _blocks_swig2.add_const_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_bb_sptr self) -> double"""
        return _blocks_swig2.add_const_bb_sptr_relative_rate(self)

    def start(self):
        """start(add_const_bb_sptr self) -> bool"""
        return _blocks_swig2.add_const_bb_sptr_start(self)

    def stop(self):
        """stop(add_const_bb_sptr self) -> bool"""
        return _blocks_swig2.add_const_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_bb_sptr self) -> int"""
        return _blocks_swig2.add_const_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_bb_sptr self, int m)"""
        return _blocks_swig2.add_const_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_bb_sptr self)"""
        return _blocks_swig2.add_const_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_bb_sptr self) -> bool"""
        return _blocks_swig2.add_const_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_bb_sptr self, int m)"""
        return _blocks_swig2.add_const_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_bb_sptr self) -> int"""
        return _blocks_swig2.add_const_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_bb_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_bb_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_bb_sptr self) -> float"""
        return _blocks_swig2.add_const_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_bb_sptr self)"""
        return _blocks_swig2.add_const_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_bb_sptr self) -> int"""
        return _blocks_swig2.add_const_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_bb_sptr self) -> int"""
        return _blocks_swig2.add_const_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_bb_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.add_const_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.add_const_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_bb_sptr self) -> long"""
        return _blocks_swig2.add_const_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.add_const_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_bb_sptr self, std::string name)"""
        return _blocks_swig2.add_const_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_bb_sptr_message_subscribers(self, *args, **kwargs)

add_const_bb_sptr_swigregister = _blocks_swig2.add_const_bb_sptr_swigregister
add_const_bb_sptr_swigregister(add_const_bb_sptr)

add_const_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_bb = add_const_bb.make;

class add_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_ff)> self) -> add_const_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_ff)> self, add_const_ff p) -> add_const_ff_sptr
        """
        this = _blocks_swig2.new_add_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_ff_sptr self) -> add_const_ff"""
        return _blocks_swig2.add_const_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_ff_sptr self, float k) -> add_const_ff_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ff.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_ff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_ff_sptr self) -> float

        Return additive constant.
        """
        return _blocks_swig2.add_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ff_sptr self, float k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_ff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_ff_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ff_sptr self, int which, int delay)
        declare_sample_delay(add_const_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_ff_sptr self) -> int"""
        return _blocks_swig2.add_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_ff_sptr self) -> double"""
        return _blocks_swig2.add_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(add_const_ff_sptr self) -> bool"""
        return _blocks_swig2.add_const_ff_sptr_start(self)

    def stop(self):
        """stop(add_const_ff_sptr self) -> bool"""
        return _blocks_swig2.add_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_ff_sptr self) -> int"""
        return _blocks_swig2.add_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_ff_sptr self, int m)"""
        return _blocks_swig2.add_const_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ff_sptr self)"""
        return _blocks_swig2.add_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ff_sptr self) -> bool"""
        return _blocks_swig2.add_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_ff_sptr self, int m)"""
        return _blocks_swig2.add_const_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_ff_sptr self) -> int"""
        return _blocks_swig2.add_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ff_sptr self) -> float"""
        return _blocks_swig2.add_const_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ff_sptr self)"""
        return _blocks_swig2.add_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_ff_sptr self) -> int"""
        return _blocks_swig2.add_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_ff_sptr self) -> int"""
        return _blocks_swig2.add_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_ff_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_ff_sptr self) -> long"""
        return _blocks_swig2.add_const_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_ff_sptr self, std::string name)"""
        return _blocks_swig2.add_const_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ff_sptr_message_subscribers(self, *args, **kwargs)

add_const_ff_sptr_swigregister = _blocks_swig2.add_const_ff_sptr_swigregister
add_const_ff_sptr_swigregister(add_const_ff_sptr)

add_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ff = add_const_ff.make;

class add_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_ss)> self) -> add_const_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_ss)> self, add_const_ss p) -> add_const_ss_sptr
        """
        this = _blocks_swig2.new_add_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_ss_sptr self) -> add_const_ss"""
        return _blocks_swig2.add_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_ss_sptr self, short k) -> add_const_ss_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ss.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_ss_sptr self) -> short

        Return additive constant.
        """
        return _blocks_swig2.add_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ss_sptr self, short k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_ss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ss_sptr self, int which, int delay)
        declare_sample_delay(add_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_ss_sptr self) -> int"""
        return _blocks_swig2.add_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_ss_sptr self) -> double"""
        return _blocks_swig2.add_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(add_const_ss_sptr self) -> bool"""
        return _blocks_swig2.add_const_ss_sptr_start(self)

    def stop(self):
        """stop(add_const_ss_sptr self) -> bool"""
        return _blocks_swig2.add_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_ss_sptr self) -> int"""
        return _blocks_swig2.add_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_ss_sptr self, int m)"""
        return _blocks_swig2.add_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ss_sptr self)"""
        return _blocks_swig2.add_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ss_sptr self) -> bool"""
        return _blocks_swig2.add_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_ss_sptr self, int m)"""
        return _blocks_swig2.add_const_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_ss_sptr self) -> int"""
        return _blocks_swig2.add_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_ss_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_ss_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ss_sptr self) -> float"""
        return _blocks_swig2.add_const_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ss_sptr self)"""
        return _blocks_swig2.add_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_ss_sptr self) -> int"""
        return _blocks_swig2.add_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_ss_sptr self) -> int"""
        return _blocks_swig2.add_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_ss_sptr self) -> long"""
        return _blocks_swig2.add_const_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_ss_sptr self, std::string name)"""
        return _blocks_swig2.add_const_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ss_sptr_message_subscribers(self, *args, **kwargs)

add_const_ss_sptr_swigregister = _blocks_swig2.add_const_ss_sptr_swigregister
add_const_ss_sptr_swigregister(add_const_ss_sptr)

add_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ss = add_const_ss.make;

class add_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_ii)> self) -> add_const_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_ii)> self, add_const_ii p) -> add_const_ii_sptr
        """
        this = _blocks_swig2.new_add_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_ii_sptr self) -> add_const_ii"""
        return _blocks_swig2.add_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_ii_sptr self, int k) -> add_const_ii_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ii.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_ii_sptr self) -> int

        Return additive constant.
        """
        return _blocks_swig2.add_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ii_sptr self, int k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_ii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ii_sptr self, int which, int delay)
        declare_sample_delay(add_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_ii_sptr self) -> int"""
        return _blocks_swig2.add_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_ii_sptr self) -> double"""
        return _blocks_swig2.add_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(add_const_ii_sptr self) -> bool"""
        return _blocks_swig2.add_const_ii_sptr_start(self)

    def stop(self):
        """stop(add_const_ii_sptr self) -> bool"""
        return _blocks_swig2.add_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_ii_sptr self) -> int"""
        return _blocks_swig2.add_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_ii_sptr self, int m)"""
        return _blocks_swig2.add_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ii_sptr self)"""
        return _blocks_swig2.add_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ii_sptr self) -> bool"""
        return _blocks_swig2.add_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_ii_sptr self, int m)"""
        return _blocks_swig2.add_const_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_ii_sptr self) -> int"""
        return _blocks_swig2.add_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_ii_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_ii_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ii_sptr self) -> float"""
        return _blocks_swig2.add_const_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ii_sptr self)"""
        return _blocks_swig2.add_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_ii_sptr self) -> int"""
        return _blocks_swig2.add_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_ii_sptr self) -> int"""
        return _blocks_swig2.add_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_ii_sptr self) -> long"""
        return _blocks_swig2.add_const_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.add_const_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_ii_sptr self, std::string name)"""
        return _blocks_swig2.add_const_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_ii_sptr_message_subscribers(self, *args, **kwargs)

add_const_ii_sptr_swigregister = _blocks_swig2.add_const_ii_sptr_swigregister
add_const_ii_sptr_swigregister(add_const_ii_sptr)

add_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ii = add_const_ii.make;

class add_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_cc)> self) -> add_const_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_cc)> self, add_const_cc p) -> add_const_cc_sptr
        """
        this = _blocks_swig2.new_add_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_cc_sptr self) -> add_const_cc"""
        return _blocks_swig2.add_const_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_cc_sptr self, gr_complex k) -> add_const_cc_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_cc.

        Args:
            k : additive constant
        """
        return _blocks_swig2.add_const_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_cc_sptr self) -> gr_complex

        Return additive constant.
        """
        return _blocks_swig2.add_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_cc_sptr self, gr_complex k)

        Set additive constant.
        """
        return _blocks_swig2.add_const_cc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_cc_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_cc_sptr self, int which, int delay)
        declare_sample_delay(add_const_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_cc_sptr self) -> int"""
        return _blocks_swig2.add_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_cc_sptr self) -> double"""
        return _blocks_swig2.add_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(add_const_cc_sptr self) -> bool"""
        return _blocks_swig2.add_const_cc_sptr_start(self)

    def stop(self):
        """stop(add_const_cc_sptr self) -> bool"""
        return _blocks_swig2.add_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_cc_sptr self) -> int"""
        return _blocks_swig2.add_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_cc_sptr self, int m)"""
        return _blocks_swig2.add_const_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_cc_sptr self)"""
        return _blocks_swig2.add_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_cc_sptr self) -> bool"""
        return _blocks_swig2.add_const_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_cc_sptr self, int m)"""
        return _blocks_swig2.add_const_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_cc_sptr self) -> int"""
        return _blocks_swig2.add_const_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_cc_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_cc_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_cc_sptr self) -> float"""
        return _blocks_swig2.add_const_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_cc_sptr self)"""
        return _blocks_swig2.add_const_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_cc_sptr self) -> int"""
        return _blocks_swig2.add_const_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_cc_sptr self) -> int"""
        return _blocks_swig2.add_const_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_cc_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig2.add_const_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig2.add_const_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_cc_sptr self) -> long"""
        return _blocks_swig2.add_const_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig2.add_const_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_cc_sptr self, std::string name)"""
        return _blocks_swig2.add_const_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_cc_sptr_message_subscribers(self, *args, **kwargs)

add_const_cc_sptr_swigregister = _blocks_swig2.add_const_cc_sptr_swigregister
add_const_cc_sptr_swigregister(add_const_cc_sptr)

add_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_cc = add_const_cc.make;

class add_const_vbb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vbb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vbb)> self) -> add_const_vbb_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vbb)> self, add_const_vbb p) -> add_const_vbb_sptr
        """
        this = _blocks_swig2.new_add_const_vbb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vbb_sptr self) -> add_const_vbb"""
        return _blocks_swig2.add_const_vbb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vbb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vbb_sptr self, std::vector< unsigned char,std::allocator< unsigned char > > k) -> add_const_vbb_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vbb.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vbb_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vbb_sptr self) -> std::vector< unsigned char,std::allocator< unsigned char > >

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vbb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vbb_sptr self, std::vector< unsigned char,std::allocator< unsigned char > > k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vbb_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vbb_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_vbb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vbb_sptr self, int which, int delay)
        declare_sample_delay(add_const_vbb_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_vbb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vbb_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_vbb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vbb_sptr self) -> int"""
        return _blocks_swig2.add_const_vbb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vbb_sptr self) -> double"""
        return _blocks_swig2.add_const_vbb_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig2.add_const_vbb_sptr_start(self)

    def stop(self):
        """stop(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig2.add_const_vbb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vbb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_vbb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vbb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_vbb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vbb_sptr self) -> int"""
        return _blocks_swig2.add_const_vbb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vbb_sptr self, int m)"""
        return _blocks_swig2.add_const_vbb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vbb_sptr self)"""
        return _blocks_swig2.add_const_vbb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig2.add_const_vbb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vbb_sptr self, int m)"""
        return _blocks_swig2.add_const_vbb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vbb_sptr self) -> int"""
        return _blocks_swig2.add_const_vbb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vbb_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vbb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vbb_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vbb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_vbb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vbb_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vbb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vbb_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vbb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_vbb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vbb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vbb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vbb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vbb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vbb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vbb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vbb_sptr self) -> float"""
        return _blocks_swig2.add_const_vbb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vbb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_vbb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vbb_sptr self)"""
        return _blocks_swig2.add_const_vbb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vbb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_vbb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vbb_sptr self) -> int"""
        return _blocks_swig2.add_const_vbb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vbb_sptr self) -> int"""
        return _blocks_swig2.add_const_vbb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vbb_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_vbb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vbb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vbb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vbb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vbb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vbb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vbb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vbb_sptr self) -> long"""
        return _blocks_swig2.add_const_vbb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vbb_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_vbb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vbb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_vbb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vbb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vbb_sptr self, std::string name)"""
        return _blocks_swig2.add_const_vbb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vbb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_vbb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vbb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vbb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vbb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vbb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vbb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vbb_sptr_message_subscribers(self, *args, **kwargs)

add_const_vbb_sptr_swigregister = _blocks_swig2.add_const_vbb_sptr_swigregister
add_const_vbb_sptr_swigregister(add_const_vbb_sptr)

add_const_vbb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vbb = add_const_vbb.make;

class add_const_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vff)> self) -> add_const_vff_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vff)> self, add_const_vff p) -> add_const_vff_sptr
        """
        this = _blocks_swig2.new_add_const_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vff_sptr self) -> add_const_vff"""
        return _blocks_swig2.add_const_vff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vff_sptr self, pmt_vector_float k) -> add_const_vff_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vff.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vff_sptr self) -> pmt_vector_float

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vff_sptr self, pmt_vector_float k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vff_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_vff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vff_sptr self, int which, int delay)
        declare_sample_delay(add_const_vff_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_vff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vff_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_vff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vff_sptr self) -> int"""
        return _blocks_swig2.add_const_vff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vff_sptr self) -> double"""
        return _blocks_swig2.add_const_vff_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vff_sptr self) -> bool"""
        return _blocks_swig2.add_const_vff_sptr_start(self)

    def stop(self):
        """stop(add_const_vff_sptr self) -> bool"""
        return _blocks_swig2.add_const_vff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_vff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_vff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vff_sptr self) -> int"""
        return _blocks_swig2.add_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vff_sptr self, int m)"""
        return _blocks_swig2.add_const_vff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vff_sptr self)"""
        return _blocks_swig2.add_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vff_sptr self) -> bool"""
        return _blocks_swig2.add_const_vff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vff_sptr self, int m)"""
        return _blocks_swig2.add_const_vff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vff_sptr self) -> int"""
        return _blocks_swig2.add_const_vff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vff_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vff_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_vff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vff_sptr self) -> float"""
        return _blocks_swig2.add_const_vff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_vff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vff_sptr self)"""
        return _blocks_swig2.add_const_vff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_vff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vff_sptr self) -> int"""
        return _blocks_swig2.add_const_vff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vff_sptr self) -> int"""
        return _blocks_swig2.add_const_vff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vff_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_vff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vff_sptr self) -> long"""
        return _blocks_swig2.add_const_vff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vff_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_vff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_vff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vff_sptr self, std::string name)"""
        return _blocks_swig2.add_const_vff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_vff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vff_sptr_message_subscribers(self, *args, **kwargs)

add_const_vff_sptr_swigregister = _blocks_swig2.add_const_vff_sptr_swigregister
add_const_vff_sptr_swigregister(add_const_vff_sptr)

add_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vff = add_const_vff.make;

class add_const_vss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vss)> self) -> add_const_vss_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vss)> self, add_const_vss p) -> add_const_vss_sptr
        """
        this = _blocks_swig2.new_add_const_vss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vss_sptr self) -> add_const_vss"""
        return _blocks_swig2.add_const_vss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vss_sptr self, std::vector< short,std::allocator< short > > k) -> add_const_vss_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vss.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vss_sptr self) -> std::vector< short,std::allocator< short > >

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vss_sptr self, std::vector< short,std::allocator< short > > k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vss_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_vss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vss_sptr self, int which, int delay)
        declare_sample_delay(add_const_vss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_vss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_vss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vss_sptr self) -> int"""
        return _blocks_swig2.add_const_vss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vss_sptr self) -> double"""
        return _blocks_swig2.add_const_vss_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vss_sptr self) -> bool"""
        return _blocks_swig2.add_const_vss_sptr_start(self)

    def stop(self):
        """stop(add_const_vss_sptr self) -> bool"""
        return _blocks_swig2.add_const_vss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_vss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_vss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vss_sptr self) -> int"""
        return _blocks_swig2.add_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vss_sptr self, int m)"""
        return _blocks_swig2.add_const_vss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vss_sptr self)"""
        return _blocks_swig2.add_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vss_sptr self) -> bool"""
        return _blocks_swig2.add_const_vss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vss_sptr self, int m)"""
        return _blocks_swig2.add_const_vss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vss_sptr self) -> int"""
        return _blocks_swig2.add_const_vss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vss_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vss_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_vss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vss_sptr self) -> float"""
        return _blocks_swig2.add_const_vss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_vss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vss_sptr self)"""
        return _blocks_swig2.add_const_vss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_vss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vss_sptr self) -> int"""
        return _blocks_swig2.add_const_vss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vss_sptr self) -> int"""
        return _blocks_swig2.add_const_vss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vss_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_vss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vss_sptr self) -> long"""
        return _blocks_swig2.add_const_vss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_vss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_vss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vss_sptr self, std::string name)"""
        return _blocks_swig2.add_const_vss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_vss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vss_sptr_message_subscribers(self, *args, **kwargs)

add_const_vss_sptr_swigregister = _blocks_swig2.add_const_vss_sptr_swigregister
add_const_vss_sptr_swigregister(add_const_vss_sptr)

add_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vss = add_const_vss.make;

class add_const_vii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vii)> self) -> add_const_vii_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vii)> self, add_const_vii p) -> add_const_vii_sptr
        """
        this = _blocks_swig2.new_add_const_vii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vii_sptr self) -> add_const_vii"""
        return _blocks_swig2.add_const_vii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vii_sptr self, std::vector< int,std::allocator< int > > k) -> add_const_vii_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vii.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vii_sptr self) -> std::vector< int,std::allocator< int > >

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vii_sptr self, std::vector< int,std::allocator< int > > k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vii_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_vii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vii_sptr self, int which, int delay)
        declare_sample_delay(add_const_vii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_vii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_vii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vii_sptr self) -> int"""
        return _blocks_swig2.add_const_vii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vii_sptr self) -> double"""
        return _blocks_swig2.add_const_vii_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vii_sptr self) -> bool"""
        return _blocks_swig2.add_const_vii_sptr_start(self)

    def stop(self):
        """stop(add_const_vii_sptr self) -> bool"""
        return _blocks_swig2.add_const_vii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_vii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_vii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vii_sptr self) -> int"""
        return _blocks_swig2.add_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vii_sptr self, int m)"""
        return _blocks_swig2.add_const_vii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vii_sptr self)"""
        return _blocks_swig2.add_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vii_sptr self) -> bool"""
        return _blocks_swig2.add_const_vii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vii_sptr self, int m)"""
        return _blocks_swig2.add_const_vii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vii_sptr self) -> int"""
        return _blocks_swig2.add_const_vii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vii_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vii_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_vii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vii_sptr self) -> float"""
        return _blocks_swig2.add_const_vii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_vii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vii_sptr self)"""
        return _blocks_swig2.add_const_vii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_vii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vii_sptr self) -> int"""
        return _blocks_swig2.add_const_vii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vii_sptr self) -> int"""
        return _blocks_swig2.add_const_vii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vii_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_vii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vii_sptr self) -> long"""
        return _blocks_swig2.add_const_vii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_vii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_vii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vii_sptr self, std::string name)"""
        return _blocks_swig2.add_const_vii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_vii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vii_sptr_message_subscribers(self, *args, **kwargs)

add_const_vii_sptr_swigregister = _blocks_swig2.add_const_vii_sptr_swigregister
add_const_vii_sptr_swigregister(add_const_vii_sptr)

add_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vii = add_const_vii.make;

class add_const_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vcc)> self) -> add_const_vcc_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vcc)> self, add_const_vcc p) -> add_const_vcc_sptr
        """
        this = _blocks_swig2.new_add_const_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vcc_sptr self) -> add_const_vcc"""
        return _blocks_swig2.add_const_vcc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_add_const_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vcc_sptr self, pmt_vector_cfloat k) -> add_const_vcc_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vcc.

        Args:
            k : additive constant vector
        """
        return _blocks_swig2.add_const_vcc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vcc_sptr self) -> pmt_vector_cfloat

        Return additive constant vector.
        """
        return _blocks_swig2.add_const_vcc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vcc_sptr self, pmt_vector_cfloat k)

        Set additive constant vector.
        """
        return _blocks_swig2.add_const_vcc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vcc_sptr self) -> unsigned int"""
        return _blocks_swig2.add_const_vcc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vcc_sptr self, int which, int delay)
        declare_sample_delay(add_const_vcc_sptr self, unsigned int delay)
        """
        return _blocks_swig2.add_const_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vcc_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.add_const_vcc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vcc_sptr self) -> int"""
        return _blocks_swig2.add_const_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vcc_sptr self) -> double"""
        return _blocks_swig2.add_const_vcc_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig2.add_const_vcc_sptr_start(self)

    def stop(self):
        """stop(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig2.add_const_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.add_const_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.add_const_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vcc_sptr self) -> int"""
        return _blocks_swig2.add_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vcc_sptr self, int m)"""
        return _blocks_swig2.add_const_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vcc_sptr self)"""
        return _blocks_swig2.add_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig2.add_const_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vcc_sptr self, int m)"""
        return _blocks_swig2.add_const_vcc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vcc_sptr self) -> int"""
        return _blocks_swig2.add_const_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vcc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.add_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig2.add_const_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vcc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.add_const_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.add_const_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vcc_sptr self) -> float"""
        return _blocks_swig2.add_const_vcc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.add_const_vcc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vcc_sptr self)"""
        return _blocks_swig2.add_const_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.add_const_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vcc_sptr self) -> int"""
        return _blocks_swig2.add_const_vcc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vcc_sptr self) -> int"""
        return _blocks_swig2.add_const_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vcc_sptr self, int priority) -> int"""
        return _blocks_swig2.add_const_vcc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vcc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vcc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.add_const_vcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vcc_sptr self) -> long"""
        return _blocks_swig2.add_const_vcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vcc_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.add_const_vcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.add_const_vcc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig2.add_const_vcc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vcc_sptr self, std::string name)"""
        return _blocks_swig2.add_const_vcc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vcc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.add_const_vcc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vcc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vcc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.add_const_vcc_sptr_message_subscribers(self, *args, **kwargs)

add_const_vcc_sptr_swigregister = _blocks_swig2.add_const_vcc_sptr_swigregister
add_const_vcc_sptr_swigregister(add_const_vcc_sptr)

add_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vcc = add_const_vcc.make;

class and_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_bb)> self) -> and_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_bb)> self, and_bb p) -> and_bb_sptr
        """
        this = _blocks_swig2.new_and_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_bb_sptr self) -> and_bb"""
        return _blocks_swig2.and_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(and_bb_sptr self, size_t vlen=1) -> and_bb_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.and_bb_sptr_make(self, vlen)

    def history(self):
        """history(and_bb_sptr self) -> unsigned int"""
        return _blocks_swig2.and_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_bb_sptr self, int which, int delay)
        declare_sample_delay(and_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_bb_sptr self) -> int"""
        return _blocks_swig2.and_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_bb_sptr self) -> double"""
        return _blocks_swig2.and_bb_sptr_relative_rate(self)

    def start(self):
        """start(and_bb_sptr self) -> bool"""
        return _blocks_swig2.and_bb_sptr_start(self)

    def stop(self):
        """stop(and_bb_sptr self) -> bool"""
        return _blocks_swig2.and_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_bb_sptr self) -> int"""
        return _blocks_swig2.and_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_bb_sptr self, int m)"""
        return _blocks_swig2.and_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_bb_sptr self)"""
        return _blocks_swig2.and_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_bb_sptr self) -> bool"""
        return _blocks_swig2.and_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_bb_sptr self, int m)"""
        return _blocks_swig2.and_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_bb_sptr self) -> int"""
        return _blocks_swig2.and_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_bb_sptr self, int i) -> long"""
        return _blocks_swig2.and_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(and_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_bb_sptr self, int i) -> long"""
        return _blocks_swig2.and_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(and_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_bb_sptr self, int which) -> float
        pc_input_buffers_full(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_bb_sptr self, int which) -> float
        pc_output_buffers_full(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_bb_sptr self) -> float"""
        return _blocks_swig2.and_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_bb_sptr self)"""
        return _blocks_swig2.and_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_bb_sptr self) -> int"""
        return _blocks_swig2.and_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_bb_sptr self) -> int"""
        return _blocks_swig2.and_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_bb_sptr self, int priority) -> int"""
        return _blocks_swig2.and_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_bb_sptr self) -> long"""
        return _blocks_swig2.and_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_bb_sptr self, std::string name)"""
        return _blocks_swig2.and_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_bb_sptr_message_subscribers(self, *args, **kwargs)

and_bb_sptr_swigregister = _blocks_swig2.and_bb_sptr_swigregister
and_bb_sptr_swigregister(and_bb_sptr)

and_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_bb = and_bb.make;

class and_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_ss)> self) -> and_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_ss)> self, and_ss p) -> and_ss_sptr
        """
        this = _blocks_swig2.new_and_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_ss_sptr self) -> and_ss"""
        return _blocks_swig2.and_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(and_ss_sptr self, size_t vlen=1) -> and_ss_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.and_ss_sptr_make(self, vlen)

    def history(self):
        """history(and_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.and_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_ss_sptr self, int which, int delay)
        declare_sample_delay(and_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_ss_sptr self) -> int"""
        return _blocks_swig2.and_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_ss_sptr self) -> double"""
        return _blocks_swig2.and_ss_sptr_relative_rate(self)

    def start(self):
        """start(and_ss_sptr self) -> bool"""
        return _blocks_swig2.and_ss_sptr_start(self)

    def stop(self):
        """stop(and_ss_sptr self) -> bool"""
        return _blocks_swig2.and_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_ss_sptr self) -> int"""
        return _blocks_swig2.and_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_ss_sptr self, int m)"""
        return _blocks_swig2.and_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_ss_sptr self)"""
        return _blocks_swig2.and_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_ss_sptr self) -> bool"""
        return _blocks_swig2.and_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_ss_sptr self, int m)"""
        return _blocks_swig2.and_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_ss_sptr self) -> int"""
        return _blocks_swig2.and_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_ss_sptr self, int i) -> long"""
        return _blocks_swig2.and_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(and_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_ss_sptr self, int i) -> long"""
        return _blocks_swig2.and_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(and_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_ss_sptr self, int which) -> float
        pc_input_buffers_full(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_ss_sptr self, int which) -> float
        pc_output_buffers_full(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_ss_sptr self) -> float"""
        return _blocks_swig2.and_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_ss_sptr self)"""
        return _blocks_swig2.and_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_ss_sptr self) -> int"""
        return _blocks_swig2.and_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_ss_sptr self) -> int"""
        return _blocks_swig2.and_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.and_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_ss_sptr self) -> long"""
        return _blocks_swig2.and_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_ss_sptr self, std::string name)"""
        return _blocks_swig2.and_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_ss_sptr_message_subscribers(self, *args, **kwargs)

and_ss_sptr_swigregister = _blocks_swig2.and_ss_sptr_swigregister
and_ss_sptr_swigregister(and_ss_sptr)

and_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ss = and_ss.make;

class and_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_ii)> self) -> and_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_ii)> self, and_ii p) -> and_ii_sptr
        """
        this = _blocks_swig2.new_and_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_ii_sptr self) -> and_ii"""
        return _blocks_swig2.and_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(and_ii_sptr self, size_t vlen=1) -> and_ii_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.and_ii_sptr_make(self, vlen)

    def history(self):
        """history(and_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.and_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_ii_sptr self, int which, int delay)
        declare_sample_delay(and_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_ii_sptr self) -> int"""
        return _blocks_swig2.and_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_ii_sptr self) -> double"""
        return _blocks_swig2.and_ii_sptr_relative_rate(self)

    def start(self):
        """start(and_ii_sptr self) -> bool"""
        return _blocks_swig2.and_ii_sptr_start(self)

    def stop(self):
        """stop(and_ii_sptr self) -> bool"""
        return _blocks_swig2.and_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_ii_sptr self) -> int"""
        return _blocks_swig2.and_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_ii_sptr self, int m)"""
        return _blocks_swig2.and_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_ii_sptr self)"""
        return _blocks_swig2.and_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_ii_sptr self) -> bool"""
        return _blocks_swig2.and_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_ii_sptr self, int m)"""
        return _blocks_swig2.and_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_ii_sptr self) -> int"""
        return _blocks_swig2.and_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_ii_sptr self, int i) -> long"""
        return _blocks_swig2.and_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(and_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_ii_sptr self, int i) -> long"""
        return _blocks_swig2.and_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(and_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_ii_sptr self, int which) -> float
        pc_input_buffers_full(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_ii_sptr self, int which) -> float
        pc_output_buffers_full(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_ii_sptr self) -> float"""
        return _blocks_swig2.and_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_ii_sptr self)"""
        return _blocks_swig2.and_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_ii_sptr self) -> int"""
        return _blocks_swig2.and_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_ii_sptr self) -> int"""
        return _blocks_swig2.and_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.and_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_ii_sptr self) -> long"""
        return _blocks_swig2.and_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_ii_sptr self, std::string name)"""
        return _blocks_swig2.and_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_ii_sptr_message_subscribers(self, *args, **kwargs)

and_ii_sptr_swigregister = _blocks_swig2.and_ii_sptr_swigregister
and_ii_sptr_swigregister(and_ii_sptr)

and_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ii = and_ii.make;

class and_const_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_const_bb)> self) -> and_const_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_const_bb)> self, and_const_bb p) -> and_const_bb_sptr
        """
        this = _blocks_swig2.new_and_const_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_const_bb_sptr self) -> and_const_bb"""
        return _blocks_swig2.and_const_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_const_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(and_const_bb_sptr self, unsigned char k) -> and_const_bb_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_bb.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_bb_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(and_const_bb_sptr self) -> unsigned char

        Return AND constant.
        """
        return _blocks_swig2.and_const_bb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_bb_sptr self, unsigned char k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_bb_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(and_const_bb_sptr self) -> unsigned int"""
        return _blocks_swig2.and_const_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_const_bb_sptr self, int which, int delay)
        declare_sample_delay(and_const_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_const_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_const_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_const_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_const_bb_sptr self) -> double"""
        return _blocks_swig2.and_const_bb_sptr_relative_rate(self)

    def start(self):
        """start(and_const_bb_sptr self) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_start(self)

    def stop(self):
        """stop(and_const_bb_sptr self) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_const_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_const_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_const_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_const_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_const_bb_sptr self, int m)"""
        return _blocks_swig2.and_const_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_const_bb_sptr self)"""
        return _blocks_swig2.and_const_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_const_bb_sptr self) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_const_bb_sptr self, int m)"""
        return _blocks_swig2.and_const_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_const_bb_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_const_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(and_const_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_const_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_const_bb_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_const_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(and_const_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_const_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_const_bb_sptr self, int which) -> float
        pc_input_buffers_full(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_const_bb_sptr self, int which) -> float
        pc_output_buffers_full(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_const_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_const_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_const_bb_sptr self)"""
        return _blocks_swig2.and_const_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_const_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_const_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_const_bb_sptr self, int priority) -> int"""
        return _blocks_swig2.and_const_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_const_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_const_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_const_bb_sptr self) -> long"""
        return _blocks_swig2.and_const_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_const_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_const_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_const_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_const_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_const_bb_sptr self, std::string name)"""
        return _blocks_swig2.and_const_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_const_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_const_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_const_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_const_bb_sptr_message_subscribers(self, *args, **kwargs)

and_const_bb_sptr_swigregister = _blocks_swig2.and_const_bb_sptr_swigregister
and_const_bb_sptr_swigregister(and_const_bb_sptr)

and_const_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_bb = and_const_bb.make;

class and_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_const_ss)> self) -> and_const_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_const_ss)> self, and_const_ss p) -> and_const_ss_sptr
        """
        this = _blocks_swig2.new_and_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_const_ss_sptr self) -> and_const_ss"""
        return _blocks_swig2.and_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(and_const_ss_sptr self, short k) -> and_const_ss_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ss.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(and_const_ss_sptr self) -> short

        Return AND constant.
        """
        return _blocks_swig2.and_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ss_sptr self, short k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(and_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.and_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_const_ss_sptr self, int which, int delay)
        declare_sample_delay(and_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_const_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_const_ss_sptr self) -> double"""
        return _blocks_swig2.and_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(and_const_ss_sptr self) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_start(self)

    def stop(self):
        """stop(and_const_ss_sptr self) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_const_ss_sptr self, int m)"""
        return _blocks_swig2.and_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_const_ss_sptr self)"""
        return _blocks_swig2.and_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_const_ss_sptr self) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_const_ss_sptr self, int m)"""
        return _blocks_swig2.and_const_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_const_ss_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(and_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_const_ss_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(and_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_const_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_const_ss_sptr self)"""
        return _blocks_swig2.and_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.and_const_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_const_ss_sptr self) -> long"""
        return _blocks_swig2.and_const_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_const_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_const_ss_sptr self, std::string name)"""
        return _blocks_swig2.and_const_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_const_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_const_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_const_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ss_sptr_message_subscribers(self, *args, **kwargs)

and_const_ss_sptr_swigregister = _blocks_swig2.and_const_ss_sptr_swigregister
and_const_ss_sptr_swigregister(and_const_ss_sptr)

and_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_ss = and_const_ss.make;

class and_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_const_ii)> self) -> and_const_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_const_ii)> self, and_const_ii p) -> and_const_ii_sptr
        """
        this = _blocks_swig2.new_and_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_const_ii_sptr self) -> and_const_ii"""
        return _blocks_swig2.and_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(and_const_ii_sptr self, int k) -> and_const_ii_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ii.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(and_const_ii_sptr self) -> int

        Return AND constant.
        """
        return _blocks_swig2.and_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ii_sptr self, int k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(and_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.and_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_const_ii_sptr self, int which, int delay)
        declare_sample_delay(and_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_const_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_const_ii_sptr self) -> double"""
        return _blocks_swig2.and_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(and_const_ii_sptr self) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_start(self)

    def stop(self):
        """stop(and_const_ii_sptr self) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_const_ii_sptr self, int m)"""
        return _blocks_swig2.and_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_const_ii_sptr self)"""
        return _blocks_swig2.and_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_const_ii_sptr self) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_const_ii_sptr self, int m)"""
        return _blocks_swig2.and_const_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_const_ii_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(and_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_const_ii_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(and_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_const_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_const_ii_sptr self)"""
        return _blocks_swig2.and_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.and_const_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_const_ii_sptr self) -> long"""
        return _blocks_swig2.and_const_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_const_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_const_ii_sptr self, std::string name)"""
        return _blocks_swig2.and_const_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_const_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_const_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_const_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ii_sptr_message_subscribers(self, *args, **kwargs)

and_const_ii_sptr_swigregister = _blocks_swig2.and_const_ii_sptr_swigregister
and_const_ii_sptr_swigregister(and_const_ii_sptr)

and_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_ii = and_const_ii.make;

class argmax_fs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::argmax_fs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::argmax_fs)> self) -> argmax_fs_sptr
        __init__(boost::shared_ptr<(gr::blocks::argmax_fs)> self, argmax_fs p) -> argmax_fs_sptr
        """
        this = _blocks_swig2.new_argmax_fs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(argmax_fs_sptr self) -> argmax_fs"""
        return _blocks_swig2.argmax_fs_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_argmax_fs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(argmax_fs_sptr self, size_t vlen) -> argmax_fs_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_fs_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(argmax_fs_sptr self) -> unsigned int"""
        return _blocks_swig2.argmax_fs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(argmax_fs_sptr self, int which, int delay)
        declare_sample_delay(argmax_fs_sptr self, unsigned int delay)
        """
        return _blocks_swig2.argmax_fs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(argmax_fs_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.argmax_fs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(argmax_fs_sptr self) -> double"""
        return _blocks_swig2.argmax_fs_sptr_relative_rate(self)

    def start(self):
        """start(argmax_fs_sptr self) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_start(self)

    def stop(self):
        """stop(argmax_fs_sptr self) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(argmax_fs_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.argmax_fs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(argmax_fs_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.argmax_fs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(argmax_fs_sptr self, int m)"""
        return _blocks_swig2.argmax_fs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(argmax_fs_sptr self)"""
        return _blocks_swig2.argmax_fs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(argmax_fs_sptr self) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(argmax_fs_sptr self, int m)"""
        return _blocks_swig2.argmax_fs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(argmax_fs_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_fs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(argmax_fs_sptr self, long max_output_buffer)
        set_max_output_buffer(argmax_fs_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.argmax_fs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(argmax_fs_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_fs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(argmax_fs_sptr self, long min_output_buffer)
        set_min_output_buffer(argmax_fs_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.argmax_fs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(argmax_fs_sptr self, int which) -> float
        pc_input_buffers_full(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(argmax_fs_sptr self, int which) -> float
        pc_input_buffers_full_avg(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(argmax_fs_sptr self, int which) -> float
        pc_input_buffers_full_var(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(argmax_fs_sptr self, int which) -> float
        pc_output_buffers_full(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(argmax_fs_sptr self, int which) -> float
        pc_output_buffers_full_avg(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(argmax_fs_sptr self, int which) -> float
        pc_output_buffers_full_var(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(argmax_fs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.argmax_fs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(argmax_fs_sptr self)"""
        return _blocks_swig2.argmax_fs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(argmax_fs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.argmax_fs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(argmax_fs_sptr self, int priority) -> int"""
        return _blocks_swig2.argmax_fs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(argmax_fs_sptr self) -> std::string"""
        return _blocks_swig2.argmax_fs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(argmax_fs_sptr self) -> std::string"""
        return _blocks_swig2.argmax_fs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(argmax_fs_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_fs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(argmax_fs_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_fs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(argmax_fs_sptr self) -> long"""
        return _blocks_swig2.argmax_fs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(argmax_fs_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.argmax_fs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(argmax_fs_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(argmax_fs_sptr self) -> std::string"""
        return _blocks_swig2.argmax_fs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(argmax_fs_sptr self, std::string name)"""
        return _blocks_swig2.argmax_fs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(argmax_fs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.argmax_fs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(argmax_fs_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_fs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(argmax_fs_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_fs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(argmax_fs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.argmax_fs_sptr_message_subscribers(self, *args, **kwargs)

argmax_fs_sptr_swigregister = _blocks_swig2.argmax_fs_sptr_swigregister
argmax_fs_sptr_swigregister(argmax_fs_sptr)

argmax_fs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
argmax_fs = argmax_fs.make;

class argmax_is_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::argmax_is)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::argmax_is)> self) -> argmax_is_sptr
        __init__(boost::shared_ptr<(gr::blocks::argmax_is)> self, argmax_is p) -> argmax_is_sptr
        """
        this = _blocks_swig2.new_argmax_is_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(argmax_is_sptr self) -> argmax_is"""
        return _blocks_swig2.argmax_is_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_argmax_is_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(argmax_is_sptr self, size_t vlen) -> argmax_is_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_is_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(argmax_is_sptr self) -> unsigned int"""
        return _blocks_swig2.argmax_is_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(argmax_is_sptr self, int which, int delay)
        declare_sample_delay(argmax_is_sptr self, unsigned int delay)
        """
        return _blocks_swig2.argmax_is_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(argmax_is_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.argmax_is_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(argmax_is_sptr self) -> double"""
        return _blocks_swig2.argmax_is_sptr_relative_rate(self)

    def start(self):
        """start(argmax_is_sptr self) -> bool"""
        return _blocks_swig2.argmax_is_sptr_start(self)

    def stop(self):
        """stop(argmax_is_sptr self) -> bool"""
        return _blocks_swig2.argmax_is_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(argmax_is_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.argmax_is_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(argmax_is_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.argmax_is_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(argmax_is_sptr self, int m)"""
        return _blocks_swig2.argmax_is_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(argmax_is_sptr self)"""
        return _blocks_swig2.argmax_is_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(argmax_is_sptr self) -> bool"""
        return _blocks_swig2.argmax_is_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(argmax_is_sptr self, int m)"""
        return _blocks_swig2.argmax_is_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(argmax_is_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_is_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(argmax_is_sptr self, long max_output_buffer)
        set_max_output_buffer(argmax_is_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.argmax_is_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(argmax_is_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_is_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(argmax_is_sptr self, long min_output_buffer)
        set_min_output_buffer(argmax_is_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.argmax_is_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(argmax_is_sptr self, int which) -> float
        pc_input_buffers_full(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(argmax_is_sptr self, int which) -> float
        pc_input_buffers_full_avg(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(argmax_is_sptr self, int which) -> float
        pc_input_buffers_full_var(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(argmax_is_sptr self, int which) -> float
        pc_output_buffers_full(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(argmax_is_sptr self, int which) -> float
        pc_output_buffers_full_avg(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(argmax_is_sptr self, int which) -> float
        pc_output_buffers_full_var(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(argmax_is_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.argmax_is_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(argmax_is_sptr self)"""
        return _blocks_swig2.argmax_is_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(argmax_is_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.argmax_is_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(argmax_is_sptr self, int priority) -> int"""
        return _blocks_swig2.argmax_is_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(argmax_is_sptr self) -> std::string"""
        return _blocks_swig2.argmax_is_sptr_name(self)

    def symbol_name(self):
        """symbol_name(argmax_is_sptr self) -> std::string"""
        return _blocks_swig2.argmax_is_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(argmax_is_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_is_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(argmax_is_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_is_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(argmax_is_sptr self) -> long"""
        return _blocks_swig2.argmax_is_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(argmax_is_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.argmax_is_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(argmax_is_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.argmax_is_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(argmax_is_sptr self) -> std::string"""
        return _blocks_swig2.argmax_is_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(argmax_is_sptr self, std::string name)"""
        return _blocks_swig2.argmax_is_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(argmax_is_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.argmax_is_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(argmax_is_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_is_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(argmax_is_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_is_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(argmax_is_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.argmax_is_sptr_message_subscribers(self, *args, **kwargs)

argmax_is_sptr_swigregister = _blocks_swig2.argmax_is_sptr_swigregister
argmax_is_sptr_swigregister(argmax_is_sptr)

argmax_is_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
argmax_is = argmax_is.make;

class argmax_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::argmax_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::argmax_ss)> self) -> argmax_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::argmax_ss)> self, argmax_ss p) -> argmax_ss_sptr
        """
        this = _blocks_swig2.new_argmax_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(argmax_ss_sptr self) -> argmax_ss"""
        return _blocks_swig2.argmax_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_argmax_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(argmax_ss_sptr self, size_t vlen) -> argmax_ss_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(argmax_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.argmax_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(argmax_ss_sptr self, int which, int delay)
        declare_sample_delay(argmax_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.argmax_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(argmax_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.argmax_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(argmax_ss_sptr self) -> double"""
        return _blocks_swig2.argmax_ss_sptr_relative_rate(self)

    def start(self):
        """start(argmax_ss_sptr self) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_start(self)

    def stop(self):
        """stop(argmax_ss_sptr self) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(argmax_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.argmax_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(argmax_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.argmax_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(argmax_ss_sptr self, int m)"""
        return _blocks_swig2.argmax_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(argmax_ss_sptr self)"""
        return _blocks_swig2.argmax_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(argmax_ss_sptr self) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(argmax_ss_sptr self, int m)"""
        return _blocks_swig2.argmax_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(argmax_ss_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(argmax_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(argmax_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.argmax_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(argmax_ss_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(argmax_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(argmax_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.argmax_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(argmax_ss_sptr self, int which) -> float
        pc_input_buffers_full(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(argmax_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(argmax_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(argmax_ss_sptr self, int which) -> float
        pc_output_buffers_full(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(argmax_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(argmax_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(argmax_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.argmax_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(argmax_ss_sptr self)"""
        return _blocks_swig2.argmax_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(argmax_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.argmax_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(argmax_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.argmax_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(argmax_ss_sptr self) -> std::string"""
        return _blocks_swig2.argmax_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(argmax_ss_sptr self) -> std::string"""
        return _blocks_swig2.argmax_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(argmax_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(argmax_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(argmax_ss_sptr self) -> long"""
        return _blocks_swig2.argmax_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(argmax_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.argmax_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(argmax_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(argmax_ss_sptr self) -> std::string"""
        return _blocks_swig2.argmax_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(argmax_ss_sptr self, std::string name)"""
        return _blocks_swig2.argmax_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(argmax_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.argmax_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(argmax_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(argmax_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(argmax_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.argmax_ss_sptr_message_subscribers(self, *args, **kwargs)

argmax_ss_sptr_swigregister = _blocks_swig2.argmax_ss_sptr_swigregister
argmax_ss_sptr_swigregister(argmax_ss_sptr)

argmax_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
argmax_ss = argmax_ss.make;

class bin_statistics_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::bin_statistics_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::bin_statistics_f)> self) -> bin_statistics_f_sptr
        __init__(boost::shared_ptr<(gr::blocks::bin_statistics_f)> self, bin_statistics_f p) -> bin_statistics_f_sptr
        """
        this = _blocks_swig2.new_bin_statistics_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(bin_statistics_f_sptr self) -> bin_statistics_f"""
        return _blocks_swig2.bin_statistics_f_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_bin_statistics_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(bin_statistics_f_sptr self, unsigned int vlen, msg_queue_sptr msgq, gr::feval_dd * tune, size_t tune_delay, size_t dwell_delay) -> bin_statistics_f_sptr

        control scanning and record frequency domain statistics

        Constructor Specific Documentation:

        Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

        Args:
            vlen : vector length
            msgq : message queue
            tune : a feval_dd callback function
            tune_delay : number of samples for the tune delay
            dwell_delay : number of samples for the dwell delay
        """
        return _blocks_swig2.bin_statistics_f_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(bin_statistics_f_sptr self) -> unsigned int"""
        return _blocks_swig2.bin_statistics_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bin_statistics_f_sptr self, int which, int delay)
        declare_sample_delay(bin_statistics_f_sptr self, unsigned int delay)
        """
        return _blocks_swig2.bin_statistics_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(bin_statistics_f_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.bin_statistics_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(bin_statistics_f_sptr self) -> double"""
        return _blocks_swig2.bin_statistics_f_sptr_relative_rate(self)

    def start(self):
        """start(bin_statistics_f_sptr self) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_start(self)

    def stop(self):
        """stop(bin_statistics_f_sptr self) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(bin_statistics_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.bin_statistics_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(bin_statistics_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.bin_statistics_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(bin_statistics_f_sptr self, int m)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bin_statistics_f_sptr self)"""
        return _blocks_swig2.bin_statistics_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bin_statistics_f_sptr self) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(bin_statistics_f_sptr self, int m)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(bin_statistics_f_sptr self, int i) -> long"""
        return _blocks_swig2.bin_statistics_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bin_statistics_f_sptr self, long max_output_buffer)
        set_max_output_buffer(bin_statistics_f_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.bin_statistics_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(bin_statistics_f_sptr self, int i) -> long"""
        return _blocks_swig2.bin_statistics_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bin_statistics_f_sptr self, long min_output_buffer)
        set_min_output_buffer(bin_statistics_f_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.bin_statistics_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bin_statistics_f_sptr self, int which) -> float
        pc_input_buffers_full(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bin_statistics_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bin_statistics_f_sptr self, int which) -> float
        pc_input_buffers_full_var(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bin_statistics_f_sptr self, int which) -> float
        pc_output_buffers_full(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bin_statistics_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bin_statistics_f_sptr self, int which) -> float
        pc_output_buffers_full_var(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(bin_statistics_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(bin_statistics_f_sptr self)"""
        return _blocks_swig2.bin_statistics_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(bin_statistics_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.bin_statistics_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(bin_statistics_f_sptr self, int priority) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(bin_statistics_f_sptr self) -> std::string"""
        return _blocks_swig2.bin_statistics_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(bin_statistics_f_sptr self) -> std::string"""
        return _blocks_swig2.bin_statistics_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(bin_statistics_f_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.bin_statistics_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(bin_statistics_f_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.bin_statistics_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(bin_statistics_f_sptr self) -> long"""
        return _blocks_swig2.bin_statistics_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(bin_statistics_f_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.bin_statistics_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(bin_statistics_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(bin_statistics_f_sptr self) -> std::string"""
        return _blocks_swig2.bin_statistics_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(bin_statistics_f_sptr self, std::string name)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(bin_statistics_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.bin_statistics_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(bin_statistics_f_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.bin_statistics_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(bin_statistics_f_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.bin_statistics_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(bin_statistics_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.bin_statistics_f_sptr_message_subscribers(self, *args, **kwargs)

bin_statistics_f_sptr_swigregister = _blocks_swig2.bin_statistics_f_sptr_swigregister
bin_statistics_f_sptr_swigregister(bin_statistics_f_sptr)

bin_statistics_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bin_statistics_f = bin_statistics_f.make;

class burst_tagger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::burst_tagger)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::burst_tagger)> self) -> burst_tagger_sptr
        __init__(boost::shared_ptr<(gr::blocks::burst_tagger)> self, burst_tagger p) -> burst_tagger_sptr
        """
        this = _blocks_swig2.new_burst_tagger_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(burst_tagger_sptr self) -> burst_tagger"""
        return _blocks_swig2.burst_tagger_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_burst_tagger_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(burst_tagger_sptr self, size_t itemsize) -> burst_tagger_sptr

        Sets a burst on/off tag based on the value of the trigger input.

        This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

        The signal on stream 0 is retransmitted to output stream 0.

        Constructor Specific Documentation:

        Build a burst tagger gnuradio/blocks.

        Args:
            itemsize : itemsize of the signal stream on input 0.
        """
        return _blocks_swig2.burst_tagger_sptr_make(self, *args, **kwargs)

    def set_true_tag(self, *args, **kwargs):
        """
        set_true_tag(burst_tagger_sptr self, std::string const & key, bool value)

        For the true burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_sptr_set_true_tag(self, *args, **kwargs)

    def set_false_tag(self, *args, **kwargs):
        """
        set_false_tag(burst_tagger_sptr self, std::string const & key, bool value)

        For the false burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_sptr_set_false_tag(self, *args, **kwargs)

    def history(self):
        """history(burst_tagger_sptr self) -> unsigned int"""
        return _blocks_swig2.burst_tagger_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_tagger_sptr self, int which, int delay)
        declare_sample_delay(burst_tagger_sptr self, unsigned int delay)
        """
        return _blocks_swig2.burst_tagger_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(burst_tagger_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.burst_tagger_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(burst_tagger_sptr self) -> double"""
        return _blocks_swig2.burst_tagger_sptr_relative_rate(self)

    def start(self):
        """start(burst_tagger_sptr self) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_start(self)

    def stop(self):
        """stop(burst_tagger_sptr self) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(burst_tagger_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.burst_tagger_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(burst_tagger_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.burst_tagger_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(burst_tagger_sptr self, int m)"""
        return _blocks_swig2.burst_tagger_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_tagger_sptr self)"""
        return _blocks_swig2.burst_tagger_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_tagger_sptr self) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(burst_tagger_sptr self, int m)"""
        return _blocks_swig2.burst_tagger_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(burst_tagger_sptr self, int i) -> long"""
        return _blocks_swig2.burst_tagger_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_tagger_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_tagger_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.burst_tagger_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(burst_tagger_sptr self, int i) -> long"""
        return _blocks_swig2.burst_tagger_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_tagger_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_tagger_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.burst_tagger_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(burst_tagger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.burst_tagger_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_tagger_sptr self)"""
        return _blocks_swig2.burst_tagger_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(burst_tagger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.burst_tagger_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(burst_tagger_sptr self, int priority) -> int"""
        return _blocks_swig2.burst_tagger_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(burst_tagger_sptr self) -> std::string"""
        return _blocks_swig2.burst_tagger_sptr_name(self)

    def symbol_name(self):
        """symbol_name(burst_tagger_sptr self) -> std::string"""
        return _blocks_swig2.burst_tagger_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(burst_tagger_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.burst_tagger_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(burst_tagger_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.burst_tagger_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(burst_tagger_sptr self) -> long"""
        return _blocks_swig2.burst_tagger_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(burst_tagger_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.burst_tagger_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(burst_tagger_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(burst_tagger_sptr self) -> std::string"""
        return _blocks_swig2.burst_tagger_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(burst_tagger_sptr self, std::string name)"""
        return _blocks_swig2.burst_tagger_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(burst_tagger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.burst_tagger_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(burst_tagger_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.burst_tagger_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(burst_tagger_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.burst_tagger_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(burst_tagger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.burst_tagger_sptr_message_subscribers(self, *args, **kwargs)

burst_tagger_sptr_swigregister = _blocks_swig2.burst_tagger_sptr_swigregister
burst_tagger_sptr_swigregister(burst_tagger_sptr)

burst_tagger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_tagger = burst_tagger.make;

class char_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::char_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::char_to_float)> self) -> char_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::char_to_float)> self, char_to_float p) -> char_to_float_sptr
        """
        this = _blocks_swig2.new_char_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(char_to_float_sptr self) -> char_to_float"""
        return _blocks_swig2.char_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_char_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(char_to_float_sptr self, size_t vlen=1, float scale=1.0) -> char_to_float_sptr

        Convert stream of chars to a stream of float.

        Converts  length vectors of input char samples to floats and applies a scaling factor of

        Constructor Specific Documentation:

        Build a chars to float stream converter block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig2.char_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(char_to_float_sptr self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig2.char_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(char_to_float_sptr self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig2.char_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(char_to_float_sptr self) -> unsigned int"""
        return _blocks_swig2.char_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(char_to_float_sptr self, int which, int delay)
        declare_sample_delay(char_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig2.char_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(char_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.char_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(char_to_float_sptr self) -> double"""
        return _blocks_swig2.char_to_float_sptr_relative_rate(self)

    def start(self):
        """start(char_to_float_sptr self) -> bool"""
        return _blocks_swig2.char_to_float_sptr_start(self)

    def stop(self):
        """stop(char_to_float_sptr self) -> bool"""
        return _blocks_swig2.char_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(char_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.char_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(char_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.char_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(char_to_float_sptr self, int m)"""
        return _blocks_swig2.char_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(char_to_float_sptr self)"""
        return _blocks_swig2.char_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(char_to_float_sptr self) -> bool"""
        return _blocks_swig2.char_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(char_to_float_sptr self, int m)"""
        return _blocks_swig2.char_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(char_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(char_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(char_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.char_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(char_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(char_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(char_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.char_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(char_to_float_sptr self, int which) -> float
        pc_input_buffers_full(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(char_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(char_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(char_to_float_sptr self, int which) -> float
        pc_output_buffers_full(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(char_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(char_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(char_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.char_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(char_to_float_sptr self)"""
        return _blocks_swig2.char_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(char_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.char_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(char_to_float_sptr self, int priority) -> int"""
        return _blocks_swig2.char_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(char_to_float_sptr self) -> std::string"""
        return _blocks_swig2.char_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(char_to_float_sptr self) -> std::string"""
        return _blocks_swig2.char_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(char_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(char_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(char_to_float_sptr self) -> long"""
        return _blocks_swig2.char_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(char_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.char_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(char_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.char_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(char_to_float_sptr self) -> std::string"""
        return _blocks_swig2.char_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(char_to_float_sptr self, std::string name)"""
        return _blocks_swig2.char_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(char_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.char_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(char_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(char_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(char_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.char_to_float_sptr_message_subscribers(self, *args, **kwargs)

char_to_float_sptr_swigregister = _blocks_swig2.char_to_float_sptr_swigregister
char_to_float_sptr_swigregister(char_to_float_sptr)

char_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
char_to_float = char_to_float.make;

class char_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::char_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::char_to_short)> self) -> char_to_short_sptr
        __init__(boost::shared_ptr<(gr::blocks::char_to_short)> self, char_to_short p) -> char_to_short_sptr
        """
        this = _blocks_swig2.new_char_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(char_to_short_sptr self) -> char_to_short"""
        return _blocks_swig2.char_to_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_char_to_short_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(char_to_short_sptr self, size_t vlen=1) -> char_to_short_sptr

        Convert stream of chars to a stream of short.

        Converts  length vectors of input char samples to shorts:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.char_to_short_sptr_make(self, vlen)

    def history(self):
        """history(char_to_short_sptr self) -> unsigned int"""
        return _blocks_swig2.char_to_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(char_to_short_sptr self, int which, int delay)
        declare_sample_delay(char_to_short_sptr self, unsigned int delay)
        """
        return _blocks_swig2.char_to_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(char_to_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.char_to_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(char_to_short_sptr self) -> double"""
        return _blocks_swig2.char_to_short_sptr_relative_rate(self)

    def start(self):
        """start(char_to_short_sptr self) -> bool"""
        return _blocks_swig2.char_to_short_sptr_start(self)

    def stop(self):
        """stop(char_to_short_sptr self) -> bool"""
        return _blocks_swig2.char_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(char_to_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.char_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(char_to_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.char_to_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(char_to_short_sptr self, int m)"""
        return _blocks_swig2.char_to_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(char_to_short_sptr self)"""
        return _blocks_swig2.char_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(char_to_short_sptr self) -> bool"""
        return _blocks_swig2.char_to_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(char_to_short_sptr self, int m)"""
        return _blocks_swig2.char_to_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(char_to_short_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(char_to_short_sptr self, long max_output_buffer)
        set_max_output_buffer(char_to_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.char_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(char_to_short_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(char_to_short_sptr self, long min_output_buffer)
        set_min_output_buffer(char_to_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.char_to_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(char_to_short_sptr self, int which) -> float
        pc_input_buffers_full(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(char_to_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(char_to_short_sptr self, int which) -> float
        pc_input_buffers_full_var(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(char_to_short_sptr self, int which) -> float
        pc_output_buffers_full(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(char_to_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(char_to_short_sptr self, int which) -> float
        pc_output_buffers_full_var(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(char_to_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.char_to_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(char_to_short_sptr self)"""
        return _blocks_swig2.char_to_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(char_to_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.char_to_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(char_to_short_sptr self, int priority) -> int"""
        return _blocks_swig2.char_to_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(char_to_short_sptr self) -> std::string"""
        return _blocks_swig2.char_to_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(char_to_short_sptr self) -> std::string"""
        return _blocks_swig2.char_to_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(char_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(char_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(char_to_short_sptr self) -> long"""
        return _blocks_swig2.char_to_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(char_to_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.char_to_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(char_to_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.char_to_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(char_to_short_sptr self) -> std::string"""
        return _blocks_swig2.char_to_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(char_to_short_sptr self, std::string name)"""
        return _blocks_swig2.char_to_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(char_to_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.char_to_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(char_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(char_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(char_to_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.char_to_short_sptr_message_subscribers(self, *args, **kwargs)

char_to_short_sptr_swigregister = _blocks_swig2.char_to_short_sptr_swigregister
char_to_short_sptr_swigregister(char_to_short_sptr)

char_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
char_to_short = char_to_short.make;

class check_lfsr_32k_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::check_lfsr_32k_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::check_lfsr_32k_s)> self) -> check_lfsr_32k_s_sptr
        __init__(boost::shared_ptr<(gr::blocks::check_lfsr_32k_s)> self, check_lfsr_32k_s p) -> check_lfsr_32k_s_sptr
        """
        this = _blocks_swig2.new_check_lfsr_32k_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(check_lfsr_32k_s_sptr self) -> check_lfsr_32k_s"""
        return _blocks_swig2.check_lfsr_32k_s_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_check_lfsr_32k_s_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(check_lfsr_32k_s_sptr self) -> check_lfsr_32k_s_sptr

        sink that checks if its input stream consists of a lfsr_32k sequence.

        This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:


        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_make(self)

    def ntotal(self):
        """ntotal(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_ntotal(self)

    def nright(self):
        """nright(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_nright(self)

    def runlength(self):
        """runlength(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_runlength(self)

    def history(self):
        """history(check_lfsr_32k_s_sptr self) -> unsigned int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(check_lfsr_32k_s_sptr self, int which, int delay)
        declare_sample_delay(check_lfsr_32k_s_sptr self, unsigned int delay)
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(check_lfsr_32k_s_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(check_lfsr_32k_s_sptr self) -> double"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_relative_rate(self)

    def start(self):
        """start(check_lfsr_32k_s_sptr self) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_start(self)

    def stop(self):
        """stop(check_lfsr_32k_s_sptr self) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(check_lfsr_32k_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(check_lfsr_32k_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(check_lfsr_32k_s_sptr self, int m)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(check_lfsr_32k_s_sptr self)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(check_lfsr_32k_s_sptr self) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(check_lfsr_32k_s_sptr self, int m)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(check_lfsr_32k_s_sptr self, int i) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(check_lfsr_32k_s_sptr self, long max_output_buffer)
        set_max_output_buffer(check_lfsr_32k_s_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(check_lfsr_32k_s_sptr self, int i) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(check_lfsr_32k_s_sptr self, long min_output_buffer)
        set_min_output_buffer(check_lfsr_32k_s_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(check_lfsr_32k_s_sptr self, int which) -> float
        pc_input_buffers_full(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(check_lfsr_32k_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(check_lfsr_32k_s_sptr self, int which) -> float
        pc_input_buffers_full_var(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(check_lfsr_32k_s_sptr self, int which) -> float
        pc_output_buffers_full(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(check_lfsr_32k_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(check_lfsr_32k_s_sptr self, int which) -> float
        pc_output_buffers_full_var(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(check_lfsr_32k_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(check_lfsr_32k_s_sptr self)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(check_lfsr_32k_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(check_lfsr_32k_s_sptr self, int priority) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(check_lfsr_32k_s_sptr self) -> std::string"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(check_lfsr_32k_s_sptr self) -> std::string"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(check_lfsr_32k_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(check_lfsr_32k_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(check_lfsr_32k_s_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(check_lfsr_32k_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(check_lfsr_32k_s_sptr self) -> std::string"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(check_lfsr_32k_s_sptr self, std::string name)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(check_lfsr_32k_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(check_lfsr_32k_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(check_lfsr_32k_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(check_lfsr_32k_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_message_subscribers(self, *args, **kwargs)

check_lfsr_32k_s_sptr_swigregister = _blocks_swig2.check_lfsr_32k_s_sptr_swigregister
check_lfsr_32k_s_sptr_swigregister(check_lfsr_32k_s_sptr)

check_lfsr_32k_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
check_lfsr_32k_s = check_lfsr_32k_s.make;

class complex_to_interleaved_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> self) -> complex_to_interleaved_short_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> self, complex_to_interleaved_short p) -> complex_to_interleaved_short_sptr
        """
        this = _blocks_swig2.new_complex_to_interleaved_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_interleaved_short_sptr self) -> complex_to_interleaved_short"""
        return _blocks_swig2.complex_to_interleaved_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_interleaved_short_sptr
    __del__ = lambda self : None;
    def make(self, vector=False):
        """
        make(complex_to_interleaved_short_sptr self, bool vector=False) -> complex_to_interleaved_short_sptr

        Convert stream of complex to a stream of interleaved shorts.

        The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

        Constructor Specific Documentation:

        Build a complex to interleaved shorts block.

        Args:
            vector : 
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_make(self, vector)

    def history(self):
        """history(complex_to_interleaved_short_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_interleaved_short_sptr self, int which, int delay)
        declare_sample_delay(complex_to_interleaved_short_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_interleaved_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_interleaved_short_sptr self) -> double"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_interleaved_short_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_start(self)

    def stop(self):
        """stop(complex_to_interleaved_short_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_interleaved_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_interleaved_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_interleaved_short_sptr self, int m)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_interleaved_short_sptr self)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_interleaved_short_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_interleaved_short_sptr self, int m)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_interleaved_short_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_interleaved_short_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_interleaved_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_interleaved_short_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_interleaved_short_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_interleaved_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_interleaved_short_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_interleaved_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_interleaved_short_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_interleaved_short_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_interleaved_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_interleaved_short_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_interleaved_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_interleaved_short_sptr self)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_interleaved_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_interleaved_short_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_interleaved_short_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_interleaved_short_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_interleaved_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_interleaved_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_interleaved_short_sptr self) -> long"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_interleaved_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_interleaved_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_interleaved_short_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_interleaved_short_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_interleaved_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_interleaved_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_interleaved_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_interleaved_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_message_subscribers(self, *args, **kwargs)

complex_to_interleaved_short_sptr_swigregister = _blocks_swig2.complex_to_interleaved_short_sptr_swigregister
complex_to_interleaved_short_sptr_swigregister(complex_to_interleaved_short_sptr)

complex_to_interleaved_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_interleaved_short = complex_to_interleaved_short.make;

class complex_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_float)> self) -> complex_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_float)> self, complex_to_float p) -> complex_to_float_sptr
        """
        this = _blocks_swig2.new_complex_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_float_sptr self) -> complex_to_float"""
        return _blocks_swig2.complex_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_float_sptr self, size_t vlen=1) -> complex_to_float_sptr

        Convert a stream of gr_complex to 1 or 2 streams of float.

        If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

        Constructor Specific Documentation:

        Build a complex to float block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_float_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_float_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_float_sptr self, int which, int delay)
        declare_sample_delay(complex_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_float_sptr self) -> double"""
        return _blocks_swig2.complex_to_float_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_float_sptr self) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_start(self)

    def stop(self):
        """stop(complex_to_float_sptr self) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_float_sptr self, int m)"""
        return _blocks_swig2.complex_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_float_sptr self)"""
        return _blocks_swig2.complex_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_float_sptr self) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_float_sptr self, int m)"""
        return _blocks_swig2.complex_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_float_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_float_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_float_sptr self)"""
        return _blocks_swig2.complex_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_float_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_float_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_float_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_float_sptr self) -> long"""
        return _blocks_swig2.complex_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_float_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_float_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_float_sptr_message_subscribers(self, *args, **kwargs)

complex_to_float_sptr_swigregister = _blocks_swig2.complex_to_float_sptr_swigregister
complex_to_float_sptr_swigregister(complex_to_float_sptr)

complex_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_float = complex_to_float.make;

class complex_to_real_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_real)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_real)> self) -> complex_to_real_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_real)> self, complex_to_real p) -> complex_to_real_sptr
        """
        this = _blocks_swig2.new_complex_to_real_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_real_sptr self) -> complex_to_real"""
        return _blocks_swig2.complex_to_real_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_real_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_real_sptr self, size_t vlen=1) -> complex_to_real_sptr

        Produces the real part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to real part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_real_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_real_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_real_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_real_sptr self, int which, int delay)
        declare_sample_delay(complex_to_real_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_real_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_real_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_real_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_real_sptr self) -> double"""
        return _blocks_swig2.complex_to_real_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_real_sptr self) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_start(self)

    def stop(self):
        """stop(complex_to_real_sptr self) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_real_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_real_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_real_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_real_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_real_sptr self, int m)"""
        return _blocks_swig2.complex_to_real_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_real_sptr self)"""
        return _blocks_swig2.complex_to_real_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_real_sptr self) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_real_sptr self, int m)"""
        return _blocks_swig2.complex_to_real_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_real_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_real_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_real_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_real_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_real_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_real_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_real_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_real_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_real_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_real_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_real_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_real_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_real_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_real_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_real_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_real_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_real_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_real_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_real_sptr self)"""
        return _blocks_swig2.complex_to_real_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_real_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_real_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_real_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_real_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_real_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_real_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_real_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_real_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_real_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_real_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_real_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_real_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_real_sptr self) -> long"""
        return _blocks_swig2.complex_to_real_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_real_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_real_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_real_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_real_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_real_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_real_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_real_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_real_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_real_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_real_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_real_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_real_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_real_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_real_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_real_sptr_message_subscribers(self, *args, **kwargs)

complex_to_real_sptr_swigregister = _blocks_swig2.complex_to_real_sptr_swigregister
complex_to_real_sptr_swigregister(complex_to_real_sptr)

complex_to_real_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_real = complex_to_real.make;

class complex_to_imag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_imag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_imag)> self) -> complex_to_imag_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_imag)> self, complex_to_imag p) -> complex_to_imag_sptr
        """
        this = _blocks_swig2.new_complex_to_imag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_imag_sptr self) -> complex_to_imag"""
        return _blocks_swig2.complex_to_imag_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_imag_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_imag_sptr self, size_t vlen=1) -> complex_to_imag_sptr

        Produces the imaginary part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to imaginary part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_imag_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_imag_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_imag_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_imag_sptr self, int which, int delay)
        declare_sample_delay(complex_to_imag_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_imag_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_imag_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_imag_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_imag_sptr self) -> double"""
        return _blocks_swig2.complex_to_imag_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_imag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_start(self)

    def stop(self):
        """stop(complex_to_imag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_imag_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_imag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_imag_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_imag_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_imag_sptr self, int m)"""
        return _blocks_swig2.complex_to_imag_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_imag_sptr self)"""
        return _blocks_swig2.complex_to_imag_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_imag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_imag_sptr self, int m)"""
        return _blocks_swig2.complex_to_imag_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_imag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_imag_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_imag_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_imag_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_imag_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_imag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_imag_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_imag_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_imag_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_imag_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_imag_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_imag_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_imag_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_imag_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_imag_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_imag_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_imag_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_imag_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_imag_sptr self)"""
        return _blocks_swig2.complex_to_imag_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_imag_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_imag_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_imag_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_imag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_imag_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_imag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_imag_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_imag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_imag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_imag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_imag_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_imag_sptr self) -> long"""
        return _blocks_swig2.complex_to_imag_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_imag_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_imag_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_imag_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_imag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_imag_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_imag_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_imag_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_imag_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_imag_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_imag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_imag_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_imag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_imag_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_imag_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_imag_sptr_message_subscribers(self, *args, **kwargs)

complex_to_imag_sptr_swigregister = _blocks_swig2.complex_to_imag_sptr_swigregister
complex_to_imag_sptr_swigregister(complex_to_imag_sptr)

complex_to_imag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_imag = complex_to_imag.make;

class complex_to_mag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_mag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag)> self) -> complex_to_mag_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag)> self, complex_to_mag p) -> complex_to_mag_sptr
        """
        this = _blocks_swig2.new_complex_to_mag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_mag_sptr self) -> complex_to_mag"""
        return _blocks_swig2.complex_to_mag_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_mag_sptr self, size_t vlen=1) -> complex_to_mag_sptr

        complex in, magnitude out (float)

        Calculates the magnitude of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_mag_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_mag_sptr self, int which, int delay)
        declare_sample_delay(complex_to_mag_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_mag_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_mag_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_mag_sptr self) -> double"""
        return _blocks_swig2.complex_to_mag_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_mag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_start(self)

    def stop(self):
        """stop(complex_to_mag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_mag_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_mag_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_mag_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_mag_sptr self)"""
        return _blocks_swig2.complex_to_mag_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_mag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_mag_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_mag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_mag_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_mag_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_mag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_mag_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_mag_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_mag_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_mag_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_mag_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_mag_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_mag_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_mag_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_mag_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_mag_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_mag_sptr self)"""
        return _blocks_swig2.complex_to_mag_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_mag_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_mag_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_mag_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_mag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_mag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_mag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_mag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_mag_sptr self) -> long"""
        return _blocks_swig2.complex_to_mag_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_mag_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_mag_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_mag_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_mag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_mag_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_mag_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_mag_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_mag_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_mag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_mag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_mag_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_sptr_message_subscribers(self, *args, **kwargs)

complex_to_mag_sptr_swigregister = _blocks_swig2.complex_to_mag_sptr_swigregister
complex_to_mag_sptr_swigregister(complex_to_mag_sptr)

complex_to_mag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_mag = complex_to_mag.make;

class complex_to_mag_squared_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> self) -> complex_to_mag_squared_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> self, complex_to_mag_squared p) -> complex_to_mag_squared_sptr
        """
        this = _blocks_swig2.new_complex_to_mag_squared_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_mag_squared_sptr self) -> complex_to_mag_squared"""
        return _blocks_swig2.complex_to_mag_squared_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag_squared_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_mag_squared_sptr self, size_t vlen=1) -> complex_to_mag_squared_sptr

        complex in, magnitude squared out (float)

        Calculates the magnitude squared of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude squared block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_mag_squared_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_mag_squared_sptr self, int which, int delay)
        declare_sample_delay(complex_to_mag_squared_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_mag_squared_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_mag_squared_sptr self) -> double"""
        return _blocks_swig2.complex_to_mag_squared_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_mag_squared_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_start(self)

    def stop(self):
        """stop(complex_to_mag_squared_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_mag_squared_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_squared_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_mag_squared_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_squared_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_mag_squared_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_mag_squared_sptr self)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_mag_squared_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_mag_squared_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_mag_squared_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_squared_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_mag_squared_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_mag_squared_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_mag_squared_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_squared_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_mag_squared_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_mag_squared_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_mag_squared_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_mag_squared_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_mag_squared_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_mag_squared_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_mag_squared_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_mag_squared_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_mag_squared_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_mag_squared_sptr self)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_mag_squared_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_mag_squared_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_mag_squared_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_mag_squared_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_squared_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_mag_squared_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_squared_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_mag_squared_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_mag_squared_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_mag_squared_sptr self) -> long"""
        return _blocks_swig2.complex_to_mag_squared_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_mag_squared_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_mag_squared_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_mag_squared_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_squared_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_mag_squared_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_mag_squared_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_mag_squared_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_mag_squared_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_mag_squared_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_mag_squared_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_message_subscribers(self, *args, **kwargs)

complex_to_mag_squared_sptr_swigregister = _blocks_swig2.complex_to_mag_squared_sptr_swigregister
complex_to_mag_squared_sptr_swigregister(complex_to_mag_squared_sptr)

complex_to_mag_squared_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_mag_squared = complex_to_mag_squared.make;

class complex_to_arg_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_arg)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_arg)> self) -> complex_to_arg_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_arg)> self, complex_to_arg p) -> complex_to_arg_sptr
        """
        this = _blocks_swig2.new_complex_to_arg_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_arg_sptr self) -> complex_to_arg"""
        return _blocks_swig2.complex_to_arg_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_arg_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_arg_sptr self, size_t vlen=1) -> complex_to_arg_sptr

        complex in, arg (arctan) out (float)

        Constructor Specific Documentation:

        Build a complex to arg block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_arg_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_arg_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_arg_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_arg_sptr self, int which, int delay)
        declare_sample_delay(complex_to_arg_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_arg_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_arg_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_arg_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_arg_sptr self) -> double"""
        return _blocks_swig2.complex_to_arg_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_arg_sptr self) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_start(self)

    def stop(self):
        """stop(complex_to_arg_sptr self) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_arg_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_arg_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_arg_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_arg_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_arg_sptr self, int m)"""
        return _blocks_swig2.complex_to_arg_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_arg_sptr self)"""
        return _blocks_swig2.complex_to_arg_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_arg_sptr self) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_arg_sptr self, int m)"""
        return _blocks_swig2.complex_to_arg_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_arg_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_arg_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_arg_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_arg_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_arg_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_arg_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_arg_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_arg_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_arg_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_arg_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_arg_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_arg_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_arg_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_arg_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_arg_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_arg_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_arg_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_arg_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_arg_sptr self)"""
        return _blocks_swig2.complex_to_arg_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_arg_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_arg_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_arg_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_arg_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_arg_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_arg_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_arg_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_arg_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_arg_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_arg_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_arg_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_arg_sptr self) -> long"""
        return _blocks_swig2.complex_to_arg_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_arg_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_arg_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_arg_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_arg_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_arg_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_arg_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_arg_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_arg_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_arg_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_arg_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_arg_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_arg_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_arg_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_arg_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_arg_sptr_message_subscribers(self, *args, **kwargs)

complex_to_arg_sptr_swigregister = _blocks_swig2.complex_to_arg_sptr_swigregister
complex_to_arg_sptr_swigregister(complex_to_arg_sptr)

complex_to_arg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_arg = complex_to_arg.make;

class conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::conjugate_cc)> self) -> conjugate_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::conjugate_cc)> self, conjugate_cc p) -> conjugate_cc_sptr
        """
        this = _blocks_swig2.new_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(conjugate_cc_sptr self) -> conjugate_cc"""
        return _blocks_swig2.conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_conjugate_cc_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(conjugate_cc_sptr self) -> conjugate_cc_sptr

        output = complex conjugate of input

        Constructor Specific Documentation:


        """
        return _blocks_swig2.conjugate_cc_sptr_make(self)

    def history(self):
        """history(conjugate_cc_sptr self) -> unsigned int"""
        return _blocks_swig2.conjugate_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conjugate_cc_sptr self, int which, int delay)
        declare_sample_delay(conjugate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig2.conjugate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(conjugate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.conjugate_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(conjugate_cc_sptr self) -> double"""
        return _blocks_swig2.conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(conjugate_cc_sptr self) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(conjugate_cc_sptr self) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(conjugate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(conjugate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(conjugate_cc_sptr self, int m)"""
        return _blocks_swig2.conjugate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conjugate_cc_sptr self)"""
        return _blocks_swig2.conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conjugate_cc_sptr self) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(conjugate_cc_sptr self, int m)"""
        return _blocks_swig2.conjugate_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig2.conjugate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conjugate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(conjugate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig2.conjugate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conjugate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(conjugate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(conjugate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.conjugate_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(conjugate_cc_sptr self)"""
        return _blocks_swig2.conjugate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(conjugate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.conjugate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(conjugate_cc_sptr self, int priority) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig2.conjugate_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig2.conjugate_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.conjugate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(conjugate_cc_sptr self) -> long"""
        return _blocks_swig2.conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(conjugate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(conjugate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig2.conjugate_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(conjugate_cc_sptr self, std::string name)"""
        return _blocks_swig2.conjugate_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(conjugate_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.conjugate_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.conjugate_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.conjugate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(conjugate_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.conjugate_cc_sptr_message_subscribers(self, *args, **kwargs)

conjugate_cc_sptr_swigregister = _blocks_swig2.conjugate_cc_sptr_swigregister
conjugate_cc_sptr_swigregister(conjugate_cc_sptr)

conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conjugate_cc = conjugate_cc.make;

class deinterleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::deinterleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::deinterleave)> self) -> deinterleave_sptr
        __init__(boost::shared_ptr<(gr::blocks::deinterleave)> self, deinterleave p) -> deinterleave_sptr
        """
        this = _blocks_swig2.new_deinterleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(deinterleave_sptr self) -> deinterleave"""
        return _blocks_swig2.deinterleave_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_deinterleave_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(deinterleave_sptr self, size_t itemsize, unsigned int blocksize=1) -> deinterleave_sptr

        deinterleave an input block of samples into N outputs.

        This block deinterleaves blocks of samples. For each output connection, the input stream will be deinterleaved successively to the output connections. By default, the block deinterleaves a single input to each output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a deinterleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block to deinterleave
        """
        return _blocks_swig2.deinterleave_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(deinterleave_sptr self) -> unsigned int"""
        return _blocks_swig2.deinterleave_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(deinterleave_sptr self, int which, int delay)
        declare_sample_delay(deinterleave_sptr self, unsigned int delay)
        """
        return _blocks_swig2.deinterleave_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(deinterleave_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.deinterleave_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(deinterleave_sptr self) -> int"""
        return _blocks_swig2.deinterleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(deinterleave_sptr self) -> double"""
        return _blocks_swig2.deinterleave_sptr_relative_rate(self)

    def start(self):
        """start(deinterleave_sptr self) -> bool"""
        return _blocks_swig2.deinterleave_sptr_start(self)

    def stop(self):
        """stop(deinterleave_sptr self) -> bool"""
        return _blocks_swig2.deinterleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(deinterleave_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.deinterleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(deinterleave_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.deinterleave_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(deinterleave_sptr self) -> int"""
        return _blocks_swig2.deinterleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(deinterleave_sptr self, int m)"""
        return _blocks_swig2.deinterleave_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(deinterleave_sptr self)"""
        return _blocks_swig2.deinterleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(deinterleave_sptr self) -> bool"""
        return _blocks_swig2.deinterleave_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(deinterleave_sptr self, int m)"""
        return _blocks_swig2.deinterleave_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(deinterleave_sptr self) -> int"""
        return _blocks_swig2.deinterleave_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(deinterleave_sptr self, int i) -> long"""
        return _blocks_swig2.deinterleave_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(deinterleave_sptr self, long max_output_buffer)
        set_max_output_buffer(deinterleave_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.deinterleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(deinterleave_sptr self, int i) -> long"""
        return _blocks_swig2.deinterleave_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(deinterleave_sptr self, long min_output_buffer)
        set_min_output_buffer(deinterleave_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.deinterleave_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(deinterleave_sptr self, int which) -> float
        pc_input_buffers_full(deinterleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.deinterleave_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(deinterleave_sptr self, int which) -> float
        pc_input_buffers_full_avg(deinterleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.deinterleave_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(deinterleave_sptr self, int which) -> float
        pc_input_buffers_full_var(deinterleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.deinterleave_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(deinterleave_sptr self, int which) -> float
        pc_output_buffers_full(deinterleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.deinterleave_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(deinterleave_sptr self, int which) -> float
        pc_output_buffers_full_avg(deinterleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.deinterleave_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(deinterleave_sptr self, int which) -> float
        pc_output_buffers_full_var(deinterleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.deinterleave_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(deinterleave_sptr self) -> float"""
        return _blocks_swig2.deinterleave_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(deinterleave_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.deinterleave_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(deinterleave_sptr self)"""
        return _blocks_swig2.deinterleave_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(deinterleave_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.deinterleave_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(deinterleave_sptr self) -> int"""
        return _blocks_swig2.deinterleave_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(deinterleave_sptr self) -> int"""
        return _blocks_swig2.deinterleave_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(deinterleave_sptr self, int priority) -> int"""
        return _blocks_swig2.deinterleave_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(deinterleave_sptr self) -> std::string"""
        return _blocks_swig2.deinterleave_sptr_name(self)

    def symbol_name(self):
        """symbol_name(deinterleave_sptr self) -> std::string"""
        return _blocks_swig2.deinterleave_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(deinterleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.deinterleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(deinterleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.deinterleave_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(deinterleave_sptr self) -> long"""
        return _blocks_swig2.deinterleave_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(deinterleave_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.deinterleave_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(deinterleave_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.deinterleave_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(deinterleave_sptr self) -> std::string"""
        return _blocks_swig2.deinterleave_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(deinterleave_sptr self, std::string name)"""
        return _blocks_swig2.deinterleave_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(deinterleave_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.deinterleave_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(deinterleave_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.deinterleave_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(deinterleave_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.deinterleave_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(deinterleave_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.deinterleave_sptr_message_subscribers(self, *args, **kwargs)

deinterleave_sptr_swigregister = _blocks_swig2.deinterleave_sptr_swigregister
deinterleave_sptr_swigregister(deinterleave_sptr)

deinterleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
deinterleave = deinterleave.make;

class divide_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::divide_ff)> self) -> divide_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::divide_ff)> self, divide_ff p) -> divide_ff_sptr
        """
        this = _blocks_swig2.new_divide_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(divide_ff_sptr self) -> divide_ff"""
        return _blocks_swig2.divide_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_divide_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(divide_ff_sptr self, size_t vlen=1) -> divide_ff_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_ff_sptr_make(self, vlen)

    def history(self):
        """history(divide_ff_sptr self) -> unsigned int"""
        return _blocks_swig2.divide_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(divide_ff_sptr self, int which, int delay)
        declare_sample_delay(divide_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig2.divide_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(divide_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.divide_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(divide_ff_sptr self) -> int"""
        return _blocks_swig2.divide_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(divide_ff_sptr self) -> double"""
        return _blocks_swig2.divide_ff_sptr_relative_rate(self)

    def start(self):
        """start(divide_ff_sptr self) -> bool"""
        return _blocks_swig2.divide_ff_sptr_start(self)

    def stop(self):
        """stop(divide_ff_sptr self) -> bool"""
        return _blocks_swig2.divide_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(divide_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.divide_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(divide_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.divide_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(divide_ff_sptr self) -> int"""
        return _blocks_swig2.divide_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(divide_ff_sptr self, int m)"""
        return _blocks_swig2.divide_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(divide_ff_sptr self)"""
        return _blocks_swig2.divide_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(divide_ff_sptr self) -> bool"""
        return _blocks_swig2.divide_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(divide_ff_sptr self, int m)"""
        return _blocks_swig2.divide_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(divide_ff_sptr self) -> int"""
        return _blocks_swig2.divide_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(divide_ff_sptr self, int i) -> long"""
        return _blocks_swig2.divide_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(divide_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(divide_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.divide_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(divide_ff_sptr self, int i) -> long"""
        return _blocks_swig2.divide_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(divide_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(divide_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.divide_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(divide_ff_sptr self, int which) -> float
        pc_input_buffers_full(divide_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(divide_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(divide_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(divide_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(divide_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(divide_ff_sptr self, int which) -> float
        pc_output_buffers_full(divide_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(divide_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(divide_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(divide_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(divide_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(divide_ff_sptr self) -> float"""
        return _blocks_swig2.divide_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(divide_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.divide_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(divide_ff_sptr self)"""
        return _blocks_swig2.divide_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(divide_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.divide_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(divide_ff_sptr self) -> int"""
        return _blocks_swig2.divide_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(divide_ff_sptr self) -> int"""
        return _blocks_swig2.divide_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(divide_ff_sptr self, int priority) -> int"""
        return _blocks_swig2.divide_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(divide_ff_sptr self) -> std::string"""
        return _blocks_swig2.divide_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(divide_ff_sptr self) -> std::string"""
        return _blocks_swig2.divide_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(divide_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(divide_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(divide_ff_sptr self) -> long"""
        return _blocks_swig2.divide_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(divide_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.divide_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(divide_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.divide_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(divide_ff_sptr self) -> std::string"""
        return _blocks_swig2.divide_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(divide_ff_sptr self, std::string name)"""
        return _blocks_swig2.divide_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(divide_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.divide_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(divide_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(divide_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(divide_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.divide_ff_sptr_message_subscribers(self, *args, **kwargs)

divide_ff_sptr_swigregister = _blocks_swig2.divide_ff_sptr_swigregister
divide_ff_sptr_swigregister(divide_ff_sptr)

divide_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_ff = divide_ff.make;

class divide_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::divide_ss)> self) -> divide_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::divide_ss)> self, divide_ss p) -> divide_ss_sptr
        """
        this = _blocks_swig2.new_divide_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(divide_ss_sptr self) -> divide_ss"""
        return _blocks_swig2.divide_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_divide_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(divide_ss_sptr self, size_t vlen=1) -> divide_ss_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_ss_sptr_make(self, vlen)

    def history(self):
        """history(divide_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.divide_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(divide_ss_sptr self, int which, int delay)
        declare_sample_delay(divide_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.divide_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(divide_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.divide_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(divide_ss_sptr self) -> int"""
        return _blocks_swig2.divide_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(divide_ss_sptr self) -> double"""
        return _blocks_swig2.divide_ss_sptr_relative_rate(self)

    def start(self):
        """start(divide_ss_sptr self) -> bool"""
        return _blocks_swig2.divide_ss_sptr_start(self)

    def stop(self):
        """stop(divide_ss_sptr self) -> bool"""
        return _blocks_swig2.divide_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(divide_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.divide_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(divide_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.divide_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(divide_ss_sptr self) -> int"""
        return _blocks_swig2.divide_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(divide_ss_sptr self, int m)"""
        return _blocks_swig2.divide_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(divide_ss_sptr self)"""
        return _blocks_swig2.divide_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(divide_ss_sptr self) -> bool"""
        return _blocks_swig2.divide_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(divide_ss_sptr self, int m)"""
        return _blocks_swig2.divide_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(divide_ss_sptr self) -> int"""
        return _blocks_swig2.divide_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(divide_ss_sptr self, int i) -> long"""
        return _blocks_swig2.divide_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(divide_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(divide_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.divide_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(divide_ss_sptr self, int i) -> long"""
        return _blocks_swig2.divide_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(divide_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(divide_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.divide_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(divide_ss_sptr self, int which) -> float
        pc_input_buffers_full(divide_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(divide_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(divide_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(divide_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(divide_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(divide_ss_sptr self, int which) -> float
        pc_output_buffers_full(divide_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(divide_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(divide_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(divide_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(divide_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(divide_ss_sptr self) -> float"""
        return _blocks_swig2.divide_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(divide_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.divide_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(divide_ss_sptr self)"""
        return _blocks_swig2.divide_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(divide_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.divide_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(divide_ss_sptr self) -> int"""
        return _blocks_swig2.divide_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(divide_ss_sptr self) -> int"""
        return _blocks_swig2.divide_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(divide_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.divide_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(divide_ss_sptr self) -> std::string"""
        return _blocks_swig2.divide_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(divide_ss_sptr self) -> std::string"""
        return _blocks_swig2.divide_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(divide_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(divide_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(divide_ss_sptr self) -> long"""
        return _blocks_swig2.divide_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(divide_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.divide_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(divide_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.divide_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(divide_ss_sptr self) -> std::string"""
        return _blocks_swig2.divide_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(divide_ss_sptr self, std::string name)"""
        return _blocks_swig2.divide_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(divide_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.divide_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(divide_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(divide_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(divide_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.divide_ss_sptr_message_subscribers(self, *args, **kwargs)

divide_ss_sptr_swigregister = _blocks_swig2.divide_ss_sptr_swigregister
divide_ss_sptr_swigregister(divide_ss_sptr)

divide_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_ss = divide_ss.make;

class divide_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::divide_ii)> self) -> divide_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::divide_ii)> self, divide_ii p) -> divide_ii_sptr
        """
        this = _blocks_swig2.new_divide_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(divide_ii_sptr self) -> divide_ii"""
        return _blocks_swig2.divide_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_divide_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(divide_ii_sptr self, size_t vlen=1) -> divide_ii_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_ii_sptr_make(self, vlen)

    def history(self):
        """history(divide_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.divide_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(divide_ii_sptr self, int which, int delay)
        declare_sample_delay(divide_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.divide_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(divide_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.divide_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(divide_ii_sptr self) -> int"""
        return _blocks_swig2.divide_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(divide_ii_sptr self) -> double"""
        return _blocks_swig2.divide_ii_sptr_relative_rate(self)

    def start(self):
        """start(divide_ii_sptr self) -> bool"""
        return _blocks_swig2.divide_ii_sptr_start(self)

    def stop(self):
        """stop(divide_ii_sptr self) -> bool"""
        return _blocks_swig2.divide_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(divide_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.divide_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(divide_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.divide_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(divide_ii_sptr self) -> int"""
        return _blocks_swig2.divide_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(divide_ii_sptr self, int m)"""
        return _blocks_swig2.divide_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(divide_ii_sptr self)"""
        return _blocks_swig2.divide_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(divide_ii_sptr self) -> bool"""
        return _blocks_swig2.divide_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(divide_ii_sptr self, int m)"""
        return _blocks_swig2.divide_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(divide_ii_sptr self) -> int"""
        return _blocks_swig2.divide_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(divide_ii_sptr self, int i) -> long"""
        return _blocks_swig2.divide_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(divide_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(divide_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.divide_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(divide_ii_sptr self, int i) -> long"""
        return _blocks_swig2.divide_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(divide_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(divide_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.divide_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(divide_ii_sptr self, int which) -> float
        pc_input_buffers_full(divide_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(divide_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(divide_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(divide_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(divide_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(divide_ii_sptr self, int which) -> float
        pc_output_buffers_full(divide_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(divide_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(divide_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(divide_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(divide_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(divide_ii_sptr self) -> float"""
        return _blocks_swig2.divide_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(divide_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.divide_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(divide_ii_sptr self)"""
        return _blocks_swig2.divide_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(divide_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.divide_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(divide_ii_sptr self) -> int"""
        return _blocks_swig2.divide_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(divide_ii_sptr self) -> int"""
        return _blocks_swig2.divide_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(divide_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.divide_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(divide_ii_sptr self) -> std::string"""
        return _blocks_swig2.divide_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(divide_ii_sptr self) -> std::string"""
        return _blocks_swig2.divide_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(divide_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(divide_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(divide_ii_sptr self) -> long"""
        return _blocks_swig2.divide_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(divide_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.divide_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(divide_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.divide_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(divide_ii_sptr self) -> std::string"""
        return _blocks_swig2.divide_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(divide_ii_sptr self, std::string name)"""
        return _blocks_swig2.divide_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(divide_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.divide_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(divide_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(divide_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(divide_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.divide_ii_sptr_message_subscribers(self, *args, **kwargs)

divide_ii_sptr_swigregister = _blocks_swig2.divide_ii_sptr_swigregister
divide_ii_sptr_swigregister(divide_ii_sptr)

divide_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_ii = divide_ii.make;

class divide_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::divide_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::divide_cc)> self) -> divide_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::divide_cc)> self, divide_cc p) -> divide_cc_sptr
        """
        this = _blocks_swig2.new_divide_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(divide_cc_sptr self) -> divide_cc"""
        return _blocks_swig2.divide_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_divide_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(divide_cc_sptr self, size_t vlen=1) -> divide_cc_sptr

        output = input[0] / input[1] / ... / input[M-1]

        Divide across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.divide_cc_sptr_make(self, vlen)

    def history(self):
        """history(divide_cc_sptr self) -> unsigned int"""
        return _blocks_swig2.divide_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(divide_cc_sptr self, int which, int delay)
        declare_sample_delay(divide_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig2.divide_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(divide_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.divide_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(divide_cc_sptr self) -> int"""
        return _blocks_swig2.divide_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(divide_cc_sptr self) -> double"""
        return _blocks_swig2.divide_cc_sptr_relative_rate(self)

    def start(self):
        """start(divide_cc_sptr self) -> bool"""
        return _blocks_swig2.divide_cc_sptr_start(self)

    def stop(self):
        """stop(divide_cc_sptr self) -> bool"""
        return _blocks_swig2.divide_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(divide_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.divide_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(divide_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.divide_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(divide_cc_sptr self) -> int"""
        return _blocks_swig2.divide_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(divide_cc_sptr self, int m)"""
        return _blocks_swig2.divide_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(divide_cc_sptr self)"""
        return _blocks_swig2.divide_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(divide_cc_sptr self) -> bool"""
        return _blocks_swig2.divide_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(divide_cc_sptr self, int m)"""
        return _blocks_swig2.divide_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(divide_cc_sptr self) -> int"""
        return _blocks_swig2.divide_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(divide_cc_sptr self, int i) -> long"""
        return _blocks_swig2.divide_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(divide_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(divide_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.divide_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(divide_cc_sptr self, int i) -> long"""
        return _blocks_swig2.divide_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(divide_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(divide_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.divide_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(divide_cc_sptr self, int which) -> float
        pc_input_buffers_full(divide_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(divide_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(divide_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(divide_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(divide_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(divide_cc_sptr self, int which) -> float
        pc_output_buffers_full(divide_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(divide_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(divide_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(divide_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(divide_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.divide_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(divide_cc_sptr self) -> float"""
        return _blocks_swig2.divide_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(divide_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.divide_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(divide_cc_sptr self)"""
        return _blocks_swig2.divide_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(divide_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.divide_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(divide_cc_sptr self) -> int"""
        return _blocks_swig2.divide_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(divide_cc_sptr self) -> int"""
        return _blocks_swig2.divide_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(divide_cc_sptr self, int priority) -> int"""
        return _blocks_swig2.divide_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(divide_cc_sptr self) -> std::string"""
        return _blocks_swig2.divide_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(divide_cc_sptr self) -> std::string"""
        return _blocks_swig2.divide_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(divide_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(divide_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.divide_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(divide_cc_sptr self) -> long"""
        return _blocks_swig2.divide_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(divide_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.divide_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(divide_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.divide_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(divide_cc_sptr self) -> std::string"""
        return _blocks_swig2.divide_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(divide_cc_sptr self, std::string name)"""
        return _blocks_swig2.divide_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(divide_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.divide_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(divide_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(divide_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.divide_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(divide_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.divide_cc_sptr_message_subscribers(self, *args, **kwargs)

divide_cc_sptr_swigregister = _blocks_swig2.divide_cc_sptr_swigregister
divide_cc_sptr_swigregister(divide_cc_sptr)

divide_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
divide_cc = divide_cc.make;



