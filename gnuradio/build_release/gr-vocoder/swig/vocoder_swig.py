# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vocoder_swig', [dirname(__file__)])
        except ImportError:
            import _vocoder_swig
            return _vocoder_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_vocoder_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vocoder_swig = swig_import_helper()
    del swig_import_helper
else:
    import _vocoder_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _vocoder_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _vocoder_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _vocoder_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _vocoder_swig.high_res_timer_epoch()
class alaw_decode_bs(object):
    """
    This block performs alaw audio decoding.

    Constructor Specific Documentation:

    Make alaw decoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> alaw_decode_bs_sptr

        This block performs alaw audio decoding.

        Constructor Specific Documentation:

        Make alaw decoder block.
        """
        return _vocoder_swig.alaw_decode_bs_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_alaw_decode_bs
    __del__ = lambda self : None;
alaw_decode_bs_swigregister = _vocoder_swig.alaw_decode_bs_swigregister
alaw_decode_bs_swigregister(alaw_decode_bs)

def alaw_decode_bs_make():
  """
    alaw_decode_bs_make() -> alaw_decode_bs_sptr

    This block performs alaw audio decoding.

    Constructor Specific Documentation:

    Make alaw decoder block.
    """
  return _vocoder_swig.alaw_decode_bs_make()

class alaw_encode_sb(object):
    """
    This block performs g.711 alaw audio encoding.

    Constructor Specific Documentation:

    Make alaw encoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> alaw_encode_sb_sptr

        This block performs g.711 alaw audio encoding.

        Constructor Specific Documentation:

        Make alaw encoder block.
        """
        return _vocoder_swig.alaw_encode_sb_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_alaw_encode_sb
    __del__ = lambda self : None;
alaw_encode_sb_swigregister = _vocoder_swig.alaw_encode_sb_swigregister
alaw_encode_sb_swigregister(alaw_encode_sb)

def alaw_encode_sb_make():
  """
    alaw_encode_sb_make() -> alaw_encode_sb_sptr

    This block performs g.711 alaw audio encoding.

    Constructor Specific Documentation:

    Make alaw encoder block.
    """
  return _vocoder_swig.alaw_encode_sb_make()

class codec2(object):
    """Proxy of C++ gr::vocoder::codec2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MODE_3200 = _vocoder_swig.codec2_MODE_3200
    MODE_2400 = _vocoder_swig.codec2_MODE_2400
    MODE_1600 = _vocoder_swig.codec2_MODE_1600
    MODE_1400 = _vocoder_swig.codec2_MODE_1400
    MODE_1300 = _vocoder_swig.codec2_MODE_1300
    MODE_1200 = _vocoder_swig.codec2_MODE_1200
    def __init__(self): 
        """__init__(gr::vocoder::codec2 self) -> codec2"""
        this = _vocoder_swig.new_codec2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vocoder_swig.delete_codec2
    __del__ = lambda self : None;
codec2_swigregister = _vocoder_swig.codec2_swigregister
codec2_swigregister(codec2)

class codec2_decode_ps(object):
    """
    CODEC2 Vocoder Decoder

    Input: A vector of unpacked bits forming a Codec2 frame.

    Output: 16-bit short values of an audio signal with sampling rate 8 kHz.

    See also gr::vocoder::codec2_encode_sp.

    Constructor Specific Documentation:

    Make Codec2 decoder block.

    Args:
        mode : Encoded bit rate/mode
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int mode=MODE_2400) -> codec2_decode_ps_sptr

        CODEC2 Vocoder Decoder

        Input: A vector of unpacked bits forming a Codec2 frame.

        Output: 16-bit short values of an audio signal with sampling rate 8 kHz.

        See also gr::vocoder::codec2_encode_sp.

        Constructor Specific Documentation:

        Make Codec2 decoder block.

        Args:
            mode : Encoded bit rate/mode
        """
        return _vocoder_swig.codec2_decode_ps_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_codec2_decode_ps
    __del__ = lambda self : None;
codec2_decode_ps_swigregister = _vocoder_swig.codec2_decode_ps_swigregister
codec2_decode_ps_swigregister(codec2_decode_ps)

def codec2_decode_ps_make(*args, **kwargs):
  """
    codec2_decode_ps_make(int mode=MODE_2400) -> codec2_decode_ps_sptr

    CODEC2 Vocoder Decoder

    Input: A vector of unpacked bits forming a Codec2 frame.

    Output: 16-bit short values of an audio signal with sampling rate 8 kHz.

    See also gr::vocoder::codec2_encode_sp.

    Constructor Specific Documentation:

    Make Codec2 decoder block.

    Args:
        mode : Encoded bit rate/mode
    """
  return _vocoder_swig.codec2_decode_ps_make(*args, **kwargs)

class codec2_encode_sp(object):
    """
    CODEC2 Vocoder Encoder

    Input: Speech (audio) signal as 16-bit shorts, sampling rate 8 kHz.

    Output: Vector of unpacked bits, forming one Codec2 frame, per 160 input samples (in 2400 and 3200 bps modes) or per 320 input samples (in 1200, 1300, 1400 and 1600 bps modes).

    Constructor Specific Documentation:

    Make Codec2 encoder block.

    Args:
        mode : Encoded bit rate/mode
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int mode=MODE_2400) -> codec2_encode_sp_sptr

        CODEC2 Vocoder Encoder

        Input: Speech (audio) signal as 16-bit shorts, sampling rate 8 kHz.

        Output: Vector of unpacked bits, forming one Codec2 frame, per 160 input samples (in 2400 and 3200 bps modes) or per 320 input samples (in 1200, 1300, 1400 and 1600 bps modes).

        Constructor Specific Documentation:

        Make Codec2 encoder block.

        Args:
            mode : Encoded bit rate/mode
        """
        return _vocoder_swig.codec2_encode_sp_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_codec2_encode_sp
    __del__ = lambda self : None;
codec2_encode_sp_swigregister = _vocoder_swig.codec2_encode_sp_swigregister
codec2_encode_sp_swigregister(codec2_encode_sp)

def codec2_encode_sp_make(*args, **kwargs):
  """
    codec2_encode_sp_make(int mode=MODE_2400) -> codec2_encode_sp_sptr

    CODEC2 Vocoder Encoder

    Input: Speech (audio) signal as 16-bit shorts, sampling rate 8 kHz.

    Output: Vector of unpacked bits, forming one Codec2 frame, per 160 input samples (in 2400 and 3200 bps modes) or per 320 input samples (in 1200, 1300, 1400 and 1600 bps modes).

    Constructor Specific Documentation:

    Make Codec2 encoder block.

    Args:
        mode : Encoded bit rate/mode
    """
  return _vocoder_swig.codec2_encode_sp_make(*args, **kwargs)

class cvsd_decode_bs(object):
    """
    This block performs CVSD audio decoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

    CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

    The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

    The CVSD decoder effectively provides 1-to-8 decompression. More specifically, for each incoming input bit, the decoder outputs one audio sample. If the input is a "1" bit, the internal reference is increased appropriately and then outputted as the next estimated audio sample. If the input is a "0" bit, the internal reference is decreased appropriately and then likewise outputted as the next estimated audio sample. Grouping 8 input bits together, the encoder essentially produces 8 output audio samples for everyone one input byte.

    This decoder requires that output audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 1 byte of encoded audio data to 16 output bytes of raw audio data.

    The CVSD decoder module must be post-fixed by a down-converter to under-sample the audio data after decoding. The Bluetooth standard specifically calls for a 8-to-1 decimating down-converter. This is required so that so that output sampling rate equals the original input sampling rate present before the encoder. In all cases, the output down-converter rate must be the inverse of the input up-converter rate before the CVSD encoder.

    References:

    Constructor Specific Documentation:

    Constructor parameters to initialize the CVSD decoder. The default values are modeled after the Bluetooth standard and should not be changed, except by an advanced user.

    Args:
        min_step : Minimum step size used to update the internal reference. Default: "10"
        max_step : Maximum step size used to update the internal reference. Default: "1280"
        step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
        accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
        K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
        J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
        pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
        neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short min_step=10, short max_step=1280, double step_decay=0.9990234375, double accum_decay=0.96875, 
            int K=32, int J=4, short pos_accum_max=32767, short neg_accum_max=-32767) -> cvsd_decode_bs_sptr

        This block performs CVSD audio decoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

        CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

        The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

        The CVSD decoder effectively provides 1-to-8 decompression. More specifically, for each incoming input bit, the decoder outputs one audio sample. If the input is a "1" bit, the internal reference is increased appropriately and then outputted as the next estimated audio sample. If the input is a "0" bit, the internal reference is decreased appropriately and then likewise outputted as the next estimated audio sample. Grouping 8 input bits together, the encoder essentially produces 8 output audio samples for everyone one input byte.

        This decoder requires that output audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 1 byte of encoded audio data to 16 output bytes of raw audio data.

        The CVSD decoder module must be post-fixed by a down-converter to under-sample the audio data after decoding. The Bluetooth standard specifically calls for a 8-to-1 decimating down-converter. This is required so that so that output sampling rate equals the original input sampling rate present before the encoder. In all cases, the output down-converter rate must be the inverse of the input up-converter rate before the CVSD encoder.

        References:

        Constructor Specific Documentation:

        Constructor parameters to initialize the CVSD decoder. The default values are modeled after the Bluetooth standard and should not be changed, except by an advanced user.

        Args:
            min_step : Minimum step size used to update the internal reference. Default: "10"
            max_step : Maximum step size used to update the internal reference. Default: "1280"
            step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
            accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
            K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
            J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
            pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
            neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
        """
        return _vocoder_swig.cvsd_decode_bs_make(*args, **kwargs)

    make = staticmethod(make)
    def min_step(self):
        """min_step(cvsd_decode_bs self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_min_step(self)

    def max_step(self):
        """max_step(cvsd_decode_bs self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_max_step(self)

    def step_decay(self):
        """step_decay(cvsd_decode_bs self) -> double"""
        return _vocoder_swig.cvsd_decode_bs_step_decay(self)

    def accum_decay(self):
        """accum_decay(cvsd_decode_bs self) -> double"""
        return _vocoder_swig.cvsd_decode_bs_accum_decay(self)

    def K(self):
        """K(cvsd_decode_bs self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_K(self)

    def J(self):
        """J(cvsd_decode_bs self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_J(self)

    def pos_accum_max(self):
        """pos_accum_max(cvsd_decode_bs self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_pos_accum_max(self)

    def neg_accum_max(self):
        """neg_accum_max(cvsd_decode_bs self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_neg_accum_max(self)

    __swig_destroy__ = _vocoder_swig.delete_cvsd_decode_bs
    __del__ = lambda self : None;
cvsd_decode_bs_swigregister = _vocoder_swig.cvsd_decode_bs_swigregister
cvsd_decode_bs_swigregister(cvsd_decode_bs)

def cvsd_decode_bs_make(*args, **kwargs):
  """
    cvsd_decode_bs_make(short min_step=10, short max_step=1280, double step_decay=0.9990234375, double accum_decay=0.96875, 
        int K=32, int J=4, short pos_accum_max=32767, short neg_accum_max=-32767) -> cvsd_decode_bs_sptr

    This block performs CVSD audio decoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

    CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

    The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

    The CVSD decoder effectively provides 1-to-8 decompression. More specifically, for each incoming input bit, the decoder outputs one audio sample. If the input is a "1" bit, the internal reference is increased appropriately and then outputted as the next estimated audio sample. If the input is a "0" bit, the internal reference is decreased appropriately and then likewise outputted as the next estimated audio sample. Grouping 8 input bits together, the encoder essentially produces 8 output audio samples for everyone one input byte.

    This decoder requires that output audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 1 byte of encoded audio data to 16 output bytes of raw audio data.

    The CVSD decoder module must be post-fixed by a down-converter to under-sample the audio data after decoding. The Bluetooth standard specifically calls for a 8-to-1 decimating down-converter. This is required so that so that output sampling rate equals the original input sampling rate present before the encoder. In all cases, the output down-converter rate must be the inverse of the input up-converter rate before the CVSD encoder.

    References:

    Constructor Specific Documentation:

    Constructor parameters to initialize the CVSD decoder. The default values are modeled after the Bluetooth standard and should not be changed, except by an advanced user.

    Args:
        min_step : Minimum step size used to update the internal reference. Default: "10"
        max_step : Maximum step size used to update the internal reference. Default: "1280"
        step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
        accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
        K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
        J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
        pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
        neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
    """
  return _vocoder_swig.cvsd_decode_bs_make(*args, **kwargs)

class cvsd_encode_sb(object):
    """
    This block performs CVSD audio encoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

    CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

    The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

    The CVSD encoder effectively provides 8-to-1 compression. More specifically, each incoming audio sample is compared to an internal reference value. If the input is greater or equal to the reference, the encoder outputs a "1" bit. If the input is less than the reference, the encoder outputs a "0" bit. The reference value is then updated accordingly based on the frequency of outputted "1" or "0" bits. By grouping 8 outputs bits together, the encoder essentially produce one output byte for every 8 input audio samples.

    This encoder requires that input audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 16 input bytes of raw audio data to 1 output byte of encoded audio data.

    The CVSD encoder module must be prefixed by an up-converter to over-sample the audio data prior to encoding. The Bluetooth standard specifically calls for a 1-to-8 interpolating up-converter. While this reduces the overall compression of the codec, this is required so that the encoder can accurately compute the slope between adjacent audio samples and correctly update its internal reference value.

    References:

    Constructor Specific Documentation:

    Constructor parameters to initialize the CVSD encoder. The default values are modeled after the Bluetooth standard and should not be changed except by an advanced user.

    Args:
        min_step : Minimum step size used to update the internal reference. Default: "10"
        max_step : Maximum step size used to update the internal reference. Default: "1280"
        step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
        accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
        K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
        J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
        pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
        neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short min_step=10, short max_step=1280, double step_decay=0.9990234375, double accum_decay=0.96875, 
            int K=32, int J=4, short pos_accum_max=32767, short neg_accum_max=-32767) -> cvsd_encode_sb_sptr

        This block performs CVSD audio encoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

        CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

        The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

        The CVSD encoder effectively provides 8-to-1 compression. More specifically, each incoming audio sample is compared to an internal reference value. If the input is greater or equal to the reference, the encoder outputs a "1" bit. If the input is less than the reference, the encoder outputs a "0" bit. The reference value is then updated accordingly based on the frequency of outputted "1" or "0" bits. By grouping 8 outputs bits together, the encoder essentially produce one output byte for every 8 input audio samples.

        This encoder requires that input audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 16 input bytes of raw audio data to 1 output byte of encoded audio data.

        The CVSD encoder module must be prefixed by an up-converter to over-sample the audio data prior to encoding. The Bluetooth standard specifically calls for a 1-to-8 interpolating up-converter. While this reduces the overall compression of the codec, this is required so that the encoder can accurately compute the slope between adjacent audio samples and correctly update its internal reference value.

        References:

        Constructor Specific Documentation:

        Constructor parameters to initialize the CVSD encoder. The default values are modeled after the Bluetooth standard and should not be changed except by an advanced user.

        Args:
            min_step : Minimum step size used to update the internal reference. Default: "10"
            max_step : Maximum step size used to update the internal reference. Default: "1280"
            step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
            accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
            K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
            J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
            pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
            neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
        """
        return _vocoder_swig.cvsd_encode_sb_make(*args, **kwargs)

    make = staticmethod(make)
    def min_step(self):
        """min_step(cvsd_encode_sb self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_min_step(self)

    def max_step(self):
        """max_step(cvsd_encode_sb self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_max_step(self)

    def step_decay(self):
        """step_decay(cvsd_encode_sb self) -> double"""
        return _vocoder_swig.cvsd_encode_sb_step_decay(self)

    def accum_decay(self):
        """accum_decay(cvsd_encode_sb self) -> double"""
        return _vocoder_swig.cvsd_encode_sb_accum_decay(self)

    def K(self):
        """K(cvsd_encode_sb self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_K(self)

    def J(self):
        """J(cvsd_encode_sb self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_J(self)

    def pos_accum_max(self):
        """pos_accum_max(cvsd_encode_sb self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_pos_accum_max(self)

    def neg_accum_max(self):
        """neg_accum_max(cvsd_encode_sb self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_neg_accum_max(self)

    __swig_destroy__ = _vocoder_swig.delete_cvsd_encode_sb
    __del__ = lambda self : None;
cvsd_encode_sb_swigregister = _vocoder_swig.cvsd_encode_sb_swigregister
cvsd_encode_sb_swigregister(cvsd_encode_sb)

def cvsd_encode_sb_make(*args, **kwargs):
  """
    cvsd_encode_sb_make(short min_step=10, short max_step=1280, double step_decay=0.9990234375, double accum_decay=0.96875, 
        int K=32, int J=4, short pos_accum_max=32767, short neg_accum_max=-32767) -> cvsd_encode_sb_sptr

    This block performs CVSD audio encoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

    CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

    The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

    The CVSD encoder effectively provides 8-to-1 compression. More specifically, each incoming audio sample is compared to an internal reference value. If the input is greater or equal to the reference, the encoder outputs a "1" bit. If the input is less than the reference, the encoder outputs a "0" bit. The reference value is then updated accordingly based on the frequency of outputted "1" or "0" bits. By grouping 8 outputs bits together, the encoder essentially produce one output byte for every 8 input audio samples.

    This encoder requires that input audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 16 input bytes of raw audio data to 1 output byte of encoded audio data.

    The CVSD encoder module must be prefixed by an up-converter to over-sample the audio data prior to encoding. The Bluetooth standard specifically calls for a 1-to-8 interpolating up-converter. While this reduces the overall compression of the codec, this is required so that the encoder can accurately compute the slope between adjacent audio samples and correctly update its internal reference value.

    References:

    Constructor Specific Documentation:

    Constructor parameters to initialize the CVSD encoder. The default values are modeled after the Bluetooth standard and should not be changed except by an advanced user.

    Args:
        min_step : Minimum step size used to update the internal reference. Default: "10"
        max_step : Maximum step size used to update the internal reference. Default: "1280"
        step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
        accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
        K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
        J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
        pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
        neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
    """
  return _vocoder_swig.cvsd_encode_sb_make(*args, **kwargs)

class g721_decode_bs(object):
    """
    This block performs g721 audio decoding.

    Constructor Specific Documentation:

    Make G721 decoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> g721_decode_bs_sptr

        This block performs g721 audio decoding.

        Constructor Specific Documentation:

        Make G721 decoder block.
        """
        return _vocoder_swig.g721_decode_bs_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_g721_decode_bs
    __del__ = lambda self : None;
g721_decode_bs_swigregister = _vocoder_swig.g721_decode_bs_swigregister
g721_decode_bs_swigregister(g721_decode_bs)

def g721_decode_bs_make():
  """
    g721_decode_bs_make() -> g721_decode_bs_sptr

    This block performs g721 audio decoding.

    Constructor Specific Documentation:

    Make G721 decoder block.
    """
  return _vocoder_swig.g721_decode_bs_make()

class g721_encode_sb(object):
    """
    This block performs g721 audio encoding.

    Constructor Specific Documentation:

    Make G721 encoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> g721_encode_sb_sptr

        This block performs g721 audio encoding.

        Constructor Specific Documentation:

        Make G721 encoder block.
        """
        return _vocoder_swig.g721_encode_sb_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_g721_encode_sb
    __del__ = lambda self : None;
g721_encode_sb_swigregister = _vocoder_swig.g721_encode_sb_swigregister
g721_encode_sb_swigregister(g721_encode_sb)

def g721_encode_sb_make():
  """
    g721_encode_sb_make() -> g721_encode_sb_sptr

    This block performs g721 audio encoding.

    Constructor Specific Documentation:

    Make G721 encoder block.
    """
  return _vocoder_swig.g721_encode_sb_make()

class g723_24_decode_bs(object):
    """
    This block performs g723_24 audio decoding.

    Constructor Specific Documentation:

    Make G722_24 decoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> g723_24_decode_bs_sptr

        This block performs g723_24 audio decoding.

        Constructor Specific Documentation:

        Make G722_24 decoder block.
        """
        return _vocoder_swig.g723_24_decode_bs_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_g723_24_decode_bs
    __del__ = lambda self : None;
g723_24_decode_bs_swigregister = _vocoder_swig.g723_24_decode_bs_swigregister
g723_24_decode_bs_swigregister(g723_24_decode_bs)

def g723_24_decode_bs_make():
  """
    g723_24_decode_bs_make() -> g723_24_decode_bs_sptr

    This block performs g723_24 audio decoding.

    Constructor Specific Documentation:

    Make G722_24 decoder block.
    """
  return _vocoder_swig.g723_24_decode_bs_make()

class g723_24_encode_sb(object):
    """
    This block performs g723_24 audio encoding.

    Constructor Specific Documentation:

    Make G722_24 encoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> g723_24_encode_sb_sptr

        This block performs g723_24 audio encoding.

        Constructor Specific Documentation:

        Make G722_24 encoder block.
        """
        return _vocoder_swig.g723_24_encode_sb_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_g723_24_encode_sb
    __del__ = lambda self : None;
g723_24_encode_sb_swigregister = _vocoder_swig.g723_24_encode_sb_swigregister
g723_24_encode_sb_swigregister(g723_24_encode_sb)

def g723_24_encode_sb_make():
  """
    g723_24_encode_sb_make() -> g723_24_encode_sb_sptr

    This block performs g723_24 audio encoding.

    Constructor Specific Documentation:

    Make G722_24 encoder block.
    """
  return _vocoder_swig.g723_24_encode_sb_make()

class g723_40_decode_bs(object):
    """
    This block performs g723_40 audio decoding.

    Constructor Specific Documentation:

    Make G722_40 decoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> g723_40_decode_bs_sptr

        This block performs g723_40 audio decoding.

        Constructor Specific Documentation:

        Make G722_40 decoder block.
        """
        return _vocoder_swig.g723_40_decode_bs_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_g723_40_decode_bs
    __del__ = lambda self : None;
g723_40_decode_bs_swigregister = _vocoder_swig.g723_40_decode_bs_swigregister
g723_40_decode_bs_swigregister(g723_40_decode_bs)

def g723_40_decode_bs_make():
  """
    g723_40_decode_bs_make() -> g723_40_decode_bs_sptr

    This block performs g723_40 audio decoding.

    Constructor Specific Documentation:

    Make G722_40 decoder block.
    """
  return _vocoder_swig.g723_40_decode_bs_make()

class g723_40_encode_sb(object):
    """
    This block performs g723_40 audio encoding.

    Constructor Specific Documentation:

    Make G722_40 encoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> g723_40_encode_sb_sptr

        This block performs g723_40 audio encoding.

        Constructor Specific Documentation:

        Make G722_40 encoder block.
        """
        return _vocoder_swig.g723_40_encode_sb_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_g723_40_encode_sb
    __del__ = lambda self : None;
g723_40_encode_sb_swigregister = _vocoder_swig.g723_40_encode_sb_swigregister
g723_40_encode_sb_swigregister(g723_40_encode_sb)

def g723_40_encode_sb_make():
  """
    g723_40_encode_sb_make() -> g723_40_encode_sb_sptr

    This block performs g723_40 audio encoding.

    Constructor Specific Documentation:

    Make G722_40 encoder block.
    """
  return _vocoder_swig.g723_40_encode_sb_make()

class gsm_fr_decode_ps(object):
    """
    GSM 06.10 Full Rate Vocoder Decoder

    Input: Vector of 33 bytes per 160 input samples Output: 16-bit shorts representing speech samples.

    Constructor Specific Documentation:

    Make GSM decoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> gsm_fr_decode_ps_sptr

        GSM 06.10 Full Rate Vocoder Decoder

        Input: Vector of 33 bytes per 160 input samples Output: 16-bit shorts representing speech samples.

        Constructor Specific Documentation:

        Make GSM decoder block.
        """
        return _vocoder_swig.gsm_fr_decode_ps_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_gsm_fr_decode_ps
    __del__ = lambda self : None;
gsm_fr_decode_ps_swigregister = _vocoder_swig.gsm_fr_decode_ps_swigregister
gsm_fr_decode_ps_swigregister(gsm_fr_decode_ps)

def gsm_fr_decode_ps_make():
  """
    gsm_fr_decode_ps_make() -> gsm_fr_decode_ps_sptr

    GSM 06.10 Full Rate Vocoder Decoder

    Input: Vector of 33 bytes per 160 input samples Output: 16-bit shorts representing speech samples.

    Constructor Specific Documentation:

    Make GSM decoder block.
    """
  return _vocoder_swig.gsm_fr_decode_ps_make()

class gsm_fr_encode_sp(object):
    """
    GSM 06.10 Full Rate Vocoder Encoder

    Input: 16-bit shorts representing speech samples Output: Vector of 33 bytes per 160 input samples.

    Constructor Specific Documentation:

    Make GSM encoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> gsm_fr_encode_sp_sptr

        GSM 06.10 Full Rate Vocoder Encoder

        Input: 16-bit shorts representing speech samples Output: Vector of 33 bytes per 160 input samples.

        Constructor Specific Documentation:

        Make GSM encoder block.
        """
        return _vocoder_swig.gsm_fr_encode_sp_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_gsm_fr_encode_sp
    __del__ = lambda self : None;
gsm_fr_encode_sp_swigregister = _vocoder_swig.gsm_fr_encode_sp_swigregister
gsm_fr_encode_sp_swigregister(gsm_fr_encode_sp)

def gsm_fr_encode_sp_make():
  """
    gsm_fr_encode_sp_make() -> gsm_fr_encode_sp_sptr

    GSM 06.10 Full Rate Vocoder Encoder

    Input: 16-bit shorts representing speech samples Output: Vector of 33 bytes per 160 input samples.

    Constructor Specific Documentation:

    Make GSM encoder block.
    """
  return _vocoder_swig.gsm_fr_encode_sp_make()

class ulaw_decode_bs(object):
    """
    This block performs ulaw audio decoding.

    Constructor Specific Documentation:

    Make ulaw decoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> ulaw_decode_bs_sptr

        This block performs ulaw audio decoding.

        Constructor Specific Documentation:

        Make ulaw decoder block.
        """
        return _vocoder_swig.ulaw_decode_bs_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_ulaw_decode_bs
    __del__ = lambda self : None;
ulaw_decode_bs_swigregister = _vocoder_swig.ulaw_decode_bs_swigregister
ulaw_decode_bs_swigregister(ulaw_decode_bs)

def ulaw_decode_bs_make():
  """
    ulaw_decode_bs_make() -> ulaw_decode_bs_sptr

    This block performs ulaw audio decoding.

    Constructor Specific Documentation:

    Make ulaw decoder block.
    """
  return _vocoder_swig.ulaw_decode_bs_make()

class ulaw_encode_sb(object):
    """
    This block performs g.711 ulaw audio encoding.

    Constructor Specific Documentation:

    Make ulaw encoder block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> ulaw_encode_sb_sptr

        This block performs g.711 ulaw audio encoding.

        Constructor Specific Documentation:

        Make ulaw encoder block.
        """
        return _vocoder_swig.ulaw_encode_sb_make()

    make = staticmethod(make)
    __swig_destroy__ = _vocoder_swig.delete_ulaw_encode_sb
    __del__ = lambda self : None;
ulaw_encode_sb_swigregister = _vocoder_swig.ulaw_encode_sb_swigregister
ulaw_encode_sb_swigregister(ulaw_encode_sb)

def ulaw_encode_sb_make():
  """
    ulaw_encode_sb_make() -> ulaw_encode_sb_sptr

    This block performs g.711 ulaw audio encoding.

    Constructor Specific Documentation:

    Make ulaw encoder block.
    """
  return _vocoder_swig.ulaw_encode_sb_make()

class alaw_decode_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::alaw_decode_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::alaw_decode_bs)> self) -> alaw_decode_bs_sptr
        __init__(boost::shared_ptr<(gr::vocoder::alaw_decode_bs)> self, alaw_decode_bs p) -> alaw_decode_bs_sptr
        """
        this = _vocoder_swig.new_alaw_decode_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(alaw_decode_bs_sptr self) -> alaw_decode_bs"""
        return _vocoder_swig.alaw_decode_bs_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_alaw_decode_bs_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(alaw_decode_bs_sptr self) -> alaw_decode_bs_sptr

        This block performs alaw audio decoding.

        Constructor Specific Documentation:

        Make alaw decoder block.
        """
        return _vocoder_swig.alaw_decode_bs_sptr_make(self)

    def history(self):
        """history(alaw_decode_bs_sptr self) -> unsigned int"""
        return _vocoder_swig.alaw_decode_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(alaw_decode_bs_sptr self, int which, int delay)
        declare_sample_delay(alaw_decode_bs_sptr self, unsigned int delay)
        """
        return _vocoder_swig.alaw_decode_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(alaw_decode_bs_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.alaw_decode_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(alaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.alaw_decode_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(alaw_decode_bs_sptr self) -> double"""
        return _vocoder_swig.alaw_decode_bs_sptr_relative_rate(self)

    def start(self):
        """start(alaw_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.alaw_decode_bs_sptr_start(self)

    def stop(self):
        """stop(alaw_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.alaw_decode_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(alaw_decode_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.alaw_decode_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(alaw_decode_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.alaw_decode_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(alaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.alaw_decode_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(alaw_decode_bs_sptr self, int m)"""
        return _vocoder_swig.alaw_decode_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(alaw_decode_bs_sptr self)"""
        return _vocoder_swig.alaw_decode_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(alaw_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.alaw_decode_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(alaw_decode_bs_sptr self, int m)"""
        return _vocoder_swig.alaw_decode_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(alaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.alaw_decode_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(alaw_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.alaw_decode_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(alaw_decode_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(alaw_decode_bs_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.alaw_decode_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(alaw_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.alaw_decode_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(alaw_decode_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(alaw_decode_bs_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.alaw_decode_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(alaw_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full(alaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_decode_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(alaw_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(alaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_decode_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(alaw_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(alaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_decode_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(alaw_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full(alaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_decode_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(alaw_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(alaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_decode_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(alaw_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(alaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_decode_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(alaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.alaw_decode_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(alaw_decode_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.alaw_decode_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(alaw_decode_bs_sptr self)"""
        return _vocoder_swig.alaw_decode_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(alaw_decode_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.alaw_decode_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(alaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.alaw_decode_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(alaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.alaw_decode_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(alaw_decode_bs_sptr self, int priority) -> int"""
        return _vocoder_swig.alaw_decode_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(alaw_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.alaw_decode_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(alaw_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.alaw_decode_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(alaw_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.alaw_decode_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(alaw_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.alaw_decode_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(alaw_decode_bs_sptr self) -> long"""
        return _vocoder_swig.alaw_decode_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(alaw_decode_bs_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.alaw_decode_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(alaw_decode_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.alaw_decode_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(alaw_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.alaw_decode_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(alaw_decode_bs_sptr self, std::string name)"""
        return _vocoder_swig.alaw_decode_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(alaw_decode_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.alaw_decode_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(alaw_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.alaw_decode_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(alaw_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.alaw_decode_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(alaw_decode_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.alaw_decode_bs_sptr_message_subscribers(self, *args, **kwargs)

alaw_decode_bs_sptr_swigregister = _vocoder_swig.alaw_decode_bs_sptr_swigregister
alaw_decode_bs_sptr_swigregister(alaw_decode_bs_sptr)

alaw_decode_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
alaw_decode_bs = alaw_decode_bs.make;

class alaw_encode_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::alaw_encode_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::alaw_encode_sb)> self) -> alaw_encode_sb_sptr
        __init__(boost::shared_ptr<(gr::vocoder::alaw_encode_sb)> self, alaw_encode_sb p) -> alaw_encode_sb_sptr
        """
        this = _vocoder_swig.new_alaw_encode_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(alaw_encode_sb_sptr self) -> alaw_encode_sb"""
        return _vocoder_swig.alaw_encode_sb_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_alaw_encode_sb_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(alaw_encode_sb_sptr self) -> alaw_encode_sb_sptr

        This block performs g.711 alaw audio encoding.

        Constructor Specific Documentation:

        Make alaw encoder block.
        """
        return _vocoder_swig.alaw_encode_sb_sptr_make(self)

    def history(self):
        """history(alaw_encode_sb_sptr self) -> unsigned int"""
        return _vocoder_swig.alaw_encode_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(alaw_encode_sb_sptr self, int which, int delay)
        declare_sample_delay(alaw_encode_sb_sptr self, unsigned int delay)
        """
        return _vocoder_swig.alaw_encode_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(alaw_encode_sb_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.alaw_encode_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(alaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.alaw_encode_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(alaw_encode_sb_sptr self) -> double"""
        return _vocoder_swig.alaw_encode_sb_sptr_relative_rate(self)

    def start(self):
        """start(alaw_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.alaw_encode_sb_sptr_start(self)

    def stop(self):
        """stop(alaw_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.alaw_encode_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(alaw_encode_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.alaw_encode_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(alaw_encode_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.alaw_encode_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(alaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.alaw_encode_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(alaw_encode_sb_sptr self, int m)"""
        return _vocoder_swig.alaw_encode_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(alaw_encode_sb_sptr self)"""
        return _vocoder_swig.alaw_encode_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(alaw_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.alaw_encode_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(alaw_encode_sb_sptr self, int m)"""
        return _vocoder_swig.alaw_encode_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(alaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.alaw_encode_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(alaw_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.alaw_encode_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(alaw_encode_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(alaw_encode_sb_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.alaw_encode_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(alaw_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.alaw_encode_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(alaw_encode_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(alaw_encode_sb_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.alaw_encode_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(alaw_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full(alaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_encode_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(alaw_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(alaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_encode_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(alaw_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(alaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_encode_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(alaw_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full(alaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_encode_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(alaw_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(alaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_encode_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(alaw_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(alaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.alaw_encode_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(alaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.alaw_encode_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(alaw_encode_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.alaw_encode_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(alaw_encode_sb_sptr self)"""
        return _vocoder_swig.alaw_encode_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(alaw_encode_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.alaw_encode_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(alaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.alaw_encode_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(alaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.alaw_encode_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(alaw_encode_sb_sptr self, int priority) -> int"""
        return _vocoder_swig.alaw_encode_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(alaw_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.alaw_encode_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(alaw_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.alaw_encode_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(alaw_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.alaw_encode_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(alaw_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.alaw_encode_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(alaw_encode_sb_sptr self) -> long"""
        return _vocoder_swig.alaw_encode_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(alaw_encode_sb_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.alaw_encode_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(alaw_encode_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.alaw_encode_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(alaw_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.alaw_encode_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(alaw_encode_sb_sptr self, std::string name)"""
        return _vocoder_swig.alaw_encode_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(alaw_encode_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.alaw_encode_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(alaw_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.alaw_encode_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(alaw_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.alaw_encode_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(alaw_encode_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.alaw_encode_sb_sptr_message_subscribers(self, *args, **kwargs)

alaw_encode_sb_sptr_swigregister = _vocoder_swig.alaw_encode_sb_sptr_swigregister
alaw_encode_sb_sptr_swigregister(alaw_encode_sb_sptr)

alaw_encode_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
alaw_encode_sb = alaw_encode_sb.make;

class codec2_decode_ps_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::codec2_decode_ps)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::codec2_decode_ps)> self) -> codec2_decode_ps_sptr
        __init__(boost::shared_ptr<(gr::vocoder::codec2_decode_ps)> self, codec2_decode_ps p) -> codec2_decode_ps_sptr
        """
        this = _vocoder_swig.new_codec2_decode_ps_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(codec2_decode_ps_sptr self) -> codec2_decode_ps"""
        return _vocoder_swig.codec2_decode_ps_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_codec2_decode_ps_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(codec2_decode_ps_sptr self, int mode=MODE_2400) -> codec2_decode_ps_sptr

        CODEC2 Vocoder Decoder

        Input: A vector of unpacked bits forming a Codec2 frame.

        Output: 16-bit short values of an audio signal with sampling rate 8 kHz.

        See also gr::vocoder::codec2_encode_sp.

        Constructor Specific Documentation:

        Make Codec2 decoder block.

        Args:
            mode : Encoded bit rate/mode
        """
        return _vocoder_swig.codec2_decode_ps_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(codec2_decode_ps_sptr self) -> unsigned int"""
        return _vocoder_swig.codec2_decode_ps_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(codec2_decode_ps_sptr self, int which, int delay)
        declare_sample_delay(codec2_decode_ps_sptr self, unsigned int delay)
        """
        return _vocoder_swig.codec2_decode_ps_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(codec2_decode_ps_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.codec2_decode_ps_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(codec2_decode_ps_sptr self) -> int"""
        return _vocoder_swig.codec2_decode_ps_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(codec2_decode_ps_sptr self) -> double"""
        return _vocoder_swig.codec2_decode_ps_sptr_relative_rate(self)

    def start(self):
        """start(codec2_decode_ps_sptr self) -> bool"""
        return _vocoder_swig.codec2_decode_ps_sptr_start(self)

    def stop(self):
        """stop(codec2_decode_ps_sptr self) -> bool"""
        return _vocoder_swig.codec2_decode_ps_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(codec2_decode_ps_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.codec2_decode_ps_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(codec2_decode_ps_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.codec2_decode_ps_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(codec2_decode_ps_sptr self) -> int"""
        return _vocoder_swig.codec2_decode_ps_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(codec2_decode_ps_sptr self, int m)"""
        return _vocoder_swig.codec2_decode_ps_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(codec2_decode_ps_sptr self)"""
        return _vocoder_swig.codec2_decode_ps_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(codec2_decode_ps_sptr self) -> bool"""
        return _vocoder_swig.codec2_decode_ps_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(codec2_decode_ps_sptr self, int m)"""
        return _vocoder_swig.codec2_decode_ps_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(codec2_decode_ps_sptr self) -> int"""
        return _vocoder_swig.codec2_decode_ps_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(codec2_decode_ps_sptr self, int i) -> long"""
        return _vocoder_swig.codec2_decode_ps_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(codec2_decode_ps_sptr self, long max_output_buffer)
        set_max_output_buffer(codec2_decode_ps_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.codec2_decode_ps_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(codec2_decode_ps_sptr self, int i) -> long"""
        return _vocoder_swig.codec2_decode_ps_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(codec2_decode_ps_sptr self, long min_output_buffer)
        set_min_output_buffer(codec2_decode_ps_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.codec2_decode_ps_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(codec2_decode_ps_sptr self, int which) -> float
        pc_input_buffers_full(codec2_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_decode_ps_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(codec2_decode_ps_sptr self, int which) -> float
        pc_input_buffers_full_avg(codec2_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_decode_ps_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(codec2_decode_ps_sptr self, int which) -> float
        pc_input_buffers_full_var(codec2_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_decode_ps_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(codec2_decode_ps_sptr self, int which) -> float
        pc_output_buffers_full(codec2_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_decode_ps_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(codec2_decode_ps_sptr self, int which) -> float
        pc_output_buffers_full_avg(codec2_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_decode_ps_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(codec2_decode_ps_sptr self, int which) -> float
        pc_output_buffers_full_var(codec2_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_decode_ps_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(codec2_decode_ps_sptr self) -> float"""
        return _vocoder_swig.codec2_decode_ps_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(codec2_decode_ps_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.codec2_decode_ps_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(codec2_decode_ps_sptr self)"""
        return _vocoder_swig.codec2_decode_ps_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(codec2_decode_ps_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.codec2_decode_ps_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(codec2_decode_ps_sptr self) -> int"""
        return _vocoder_swig.codec2_decode_ps_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(codec2_decode_ps_sptr self) -> int"""
        return _vocoder_swig.codec2_decode_ps_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(codec2_decode_ps_sptr self, int priority) -> int"""
        return _vocoder_swig.codec2_decode_ps_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(codec2_decode_ps_sptr self) -> std::string"""
        return _vocoder_swig.codec2_decode_ps_sptr_name(self)

    def symbol_name(self):
        """symbol_name(codec2_decode_ps_sptr self) -> std::string"""
        return _vocoder_swig.codec2_decode_ps_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(codec2_decode_ps_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.codec2_decode_ps_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(codec2_decode_ps_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.codec2_decode_ps_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(codec2_decode_ps_sptr self) -> long"""
        return _vocoder_swig.codec2_decode_ps_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(codec2_decode_ps_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.codec2_decode_ps_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(codec2_decode_ps_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.codec2_decode_ps_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(codec2_decode_ps_sptr self) -> std::string"""
        return _vocoder_swig.codec2_decode_ps_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(codec2_decode_ps_sptr self, std::string name)"""
        return _vocoder_swig.codec2_decode_ps_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(codec2_decode_ps_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.codec2_decode_ps_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(codec2_decode_ps_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.codec2_decode_ps_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(codec2_decode_ps_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.codec2_decode_ps_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(codec2_decode_ps_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.codec2_decode_ps_sptr_message_subscribers(self, *args, **kwargs)

codec2_decode_ps_sptr_swigregister = _vocoder_swig.codec2_decode_ps_sptr_swigregister
codec2_decode_ps_sptr_swigregister(codec2_decode_ps_sptr)

codec2_decode_ps_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
codec2_decode_ps = codec2_decode_ps.make;

class codec2_encode_sp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::codec2_encode_sp)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::codec2_encode_sp)> self) -> codec2_encode_sp_sptr
        __init__(boost::shared_ptr<(gr::vocoder::codec2_encode_sp)> self, codec2_encode_sp p) -> codec2_encode_sp_sptr
        """
        this = _vocoder_swig.new_codec2_encode_sp_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(codec2_encode_sp_sptr self) -> codec2_encode_sp"""
        return _vocoder_swig.codec2_encode_sp_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_codec2_encode_sp_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(codec2_encode_sp_sptr self, int mode=MODE_2400) -> codec2_encode_sp_sptr

        CODEC2 Vocoder Encoder

        Input: Speech (audio) signal as 16-bit shorts, sampling rate 8 kHz.

        Output: Vector of unpacked bits, forming one Codec2 frame, per 160 input samples (in 2400 and 3200 bps modes) or per 320 input samples (in 1200, 1300, 1400 and 1600 bps modes).

        Constructor Specific Documentation:

        Make Codec2 encoder block.

        Args:
            mode : Encoded bit rate/mode
        """
        return _vocoder_swig.codec2_encode_sp_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(codec2_encode_sp_sptr self) -> unsigned int"""
        return _vocoder_swig.codec2_encode_sp_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(codec2_encode_sp_sptr self, int which, int delay)
        declare_sample_delay(codec2_encode_sp_sptr self, unsigned int delay)
        """
        return _vocoder_swig.codec2_encode_sp_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(codec2_encode_sp_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.codec2_encode_sp_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(codec2_encode_sp_sptr self) -> int"""
        return _vocoder_swig.codec2_encode_sp_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(codec2_encode_sp_sptr self) -> double"""
        return _vocoder_swig.codec2_encode_sp_sptr_relative_rate(self)

    def start(self):
        """start(codec2_encode_sp_sptr self) -> bool"""
        return _vocoder_swig.codec2_encode_sp_sptr_start(self)

    def stop(self):
        """stop(codec2_encode_sp_sptr self) -> bool"""
        return _vocoder_swig.codec2_encode_sp_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(codec2_encode_sp_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.codec2_encode_sp_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(codec2_encode_sp_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.codec2_encode_sp_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(codec2_encode_sp_sptr self) -> int"""
        return _vocoder_swig.codec2_encode_sp_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(codec2_encode_sp_sptr self, int m)"""
        return _vocoder_swig.codec2_encode_sp_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(codec2_encode_sp_sptr self)"""
        return _vocoder_swig.codec2_encode_sp_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(codec2_encode_sp_sptr self) -> bool"""
        return _vocoder_swig.codec2_encode_sp_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(codec2_encode_sp_sptr self, int m)"""
        return _vocoder_swig.codec2_encode_sp_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(codec2_encode_sp_sptr self) -> int"""
        return _vocoder_swig.codec2_encode_sp_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(codec2_encode_sp_sptr self, int i) -> long"""
        return _vocoder_swig.codec2_encode_sp_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(codec2_encode_sp_sptr self, long max_output_buffer)
        set_max_output_buffer(codec2_encode_sp_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.codec2_encode_sp_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(codec2_encode_sp_sptr self, int i) -> long"""
        return _vocoder_swig.codec2_encode_sp_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(codec2_encode_sp_sptr self, long min_output_buffer)
        set_min_output_buffer(codec2_encode_sp_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.codec2_encode_sp_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(codec2_encode_sp_sptr self, int which) -> float
        pc_input_buffers_full(codec2_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_encode_sp_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(codec2_encode_sp_sptr self, int which) -> float
        pc_input_buffers_full_avg(codec2_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_encode_sp_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(codec2_encode_sp_sptr self, int which) -> float
        pc_input_buffers_full_var(codec2_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_encode_sp_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(codec2_encode_sp_sptr self, int which) -> float
        pc_output_buffers_full(codec2_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_encode_sp_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(codec2_encode_sp_sptr self, int which) -> float
        pc_output_buffers_full_avg(codec2_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_encode_sp_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(codec2_encode_sp_sptr self, int which) -> float
        pc_output_buffers_full_var(codec2_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.codec2_encode_sp_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(codec2_encode_sp_sptr self) -> float"""
        return _vocoder_swig.codec2_encode_sp_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(codec2_encode_sp_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.codec2_encode_sp_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(codec2_encode_sp_sptr self)"""
        return _vocoder_swig.codec2_encode_sp_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(codec2_encode_sp_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.codec2_encode_sp_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(codec2_encode_sp_sptr self) -> int"""
        return _vocoder_swig.codec2_encode_sp_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(codec2_encode_sp_sptr self) -> int"""
        return _vocoder_swig.codec2_encode_sp_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(codec2_encode_sp_sptr self, int priority) -> int"""
        return _vocoder_swig.codec2_encode_sp_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(codec2_encode_sp_sptr self) -> std::string"""
        return _vocoder_swig.codec2_encode_sp_sptr_name(self)

    def symbol_name(self):
        """symbol_name(codec2_encode_sp_sptr self) -> std::string"""
        return _vocoder_swig.codec2_encode_sp_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(codec2_encode_sp_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.codec2_encode_sp_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(codec2_encode_sp_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.codec2_encode_sp_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(codec2_encode_sp_sptr self) -> long"""
        return _vocoder_swig.codec2_encode_sp_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(codec2_encode_sp_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.codec2_encode_sp_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(codec2_encode_sp_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.codec2_encode_sp_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(codec2_encode_sp_sptr self) -> std::string"""
        return _vocoder_swig.codec2_encode_sp_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(codec2_encode_sp_sptr self, std::string name)"""
        return _vocoder_swig.codec2_encode_sp_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(codec2_encode_sp_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.codec2_encode_sp_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(codec2_encode_sp_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.codec2_encode_sp_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(codec2_encode_sp_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.codec2_encode_sp_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(codec2_encode_sp_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.codec2_encode_sp_sptr_message_subscribers(self, *args, **kwargs)

codec2_encode_sp_sptr_swigregister = _vocoder_swig.codec2_encode_sp_sptr_swigregister
codec2_encode_sp_sptr_swigregister(codec2_encode_sp_sptr)

codec2_encode_sp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
codec2_encode_sp = codec2_encode_sp.make;

class cvsd_decode_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::cvsd_decode_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::cvsd_decode_bs)> self) -> cvsd_decode_bs_sptr
        __init__(boost::shared_ptr<(gr::vocoder::cvsd_decode_bs)> self, cvsd_decode_bs p) -> cvsd_decode_bs_sptr
        """
        this = _vocoder_swig.new_cvsd_decode_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cvsd_decode_bs_sptr self) -> cvsd_decode_bs"""
        return _vocoder_swig.cvsd_decode_bs_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_cvsd_decode_bs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(cvsd_decode_bs_sptr self, short min_step=10, short max_step=1280, double step_decay=0.9990234375, double accum_decay=0.96875, 
            int K=32, int J=4, short pos_accum_max=32767, short neg_accum_max=-32767) -> cvsd_decode_bs_sptr

        This block performs CVSD audio decoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

        CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

        The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

        The CVSD decoder effectively provides 1-to-8 decompression. More specifically, for each incoming input bit, the decoder outputs one audio sample. If the input is a "1" bit, the internal reference is increased appropriately and then outputted as the next estimated audio sample. If the input is a "0" bit, the internal reference is decreased appropriately and then likewise outputted as the next estimated audio sample. Grouping 8 input bits together, the encoder essentially produces 8 output audio samples for everyone one input byte.

        This decoder requires that output audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 1 byte of encoded audio data to 16 output bytes of raw audio data.

        The CVSD decoder module must be post-fixed by a down-converter to under-sample the audio data after decoding. The Bluetooth standard specifically calls for a 8-to-1 decimating down-converter. This is required so that so that output sampling rate equals the original input sampling rate present before the encoder. In all cases, the output down-converter rate must be the inverse of the input up-converter rate before the CVSD encoder.

        References:

        Constructor Specific Documentation:

        Constructor parameters to initialize the CVSD decoder. The default values are modeled after the Bluetooth standard and should not be changed, except by an advanced user.

        Args:
            min_step : Minimum step size used to update the internal reference. Default: "10"
            max_step : Maximum step size used to update the internal reference. Default: "1280"
            step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
            accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
            K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
            J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
            pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
            neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_make(self, *args, **kwargs)

    def min_step(self):
        """min_step(cvsd_decode_bs_sptr self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_sptr_min_step(self)

    def max_step(self):
        """max_step(cvsd_decode_bs_sptr self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_sptr_max_step(self)

    def step_decay(self):
        """step_decay(cvsd_decode_bs_sptr self) -> double"""
        return _vocoder_swig.cvsd_decode_bs_sptr_step_decay(self)

    def accum_decay(self):
        """accum_decay(cvsd_decode_bs_sptr self) -> double"""
        return _vocoder_swig.cvsd_decode_bs_sptr_accum_decay(self)

    def K(self):
        """K(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_K(self)

    def J(self):
        """J(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_J(self)

    def pos_accum_max(self):
        """pos_accum_max(cvsd_decode_bs_sptr self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pos_accum_max(self)

    def neg_accum_max(self):
        """neg_accum_max(cvsd_decode_bs_sptr self) -> short"""
        return _vocoder_swig.cvsd_decode_bs_sptr_neg_accum_max(self)

    def history(self):
        """history(cvsd_decode_bs_sptr self) -> unsigned int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cvsd_decode_bs_sptr self, int which, int delay)
        declare_sample_delay(cvsd_decode_bs_sptr self, unsigned int delay)
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cvsd_decode_bs_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cvsd_decode_bs_sptr self) -> double"""
        return _vocoder_swig.cvsd_decode_bs_sptr_relative_rate(self)

    def start(self):
        """start(cvsd_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.cvsd_decode_bs_sptr_start(self)

    def stop(self):
        """stop(cvsd_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.cvsd_decode_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cvsd_decode_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.cvsd_decode_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cvsd_decode_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.cvsd_decode_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cvsd_decode_bs_sptr self, int m)"""
        return _vocoder_swig.cvsd_decode_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cvsd_decode_bs_sptr self)"""
        return _vocoder_swig.cvsd_decode_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cvsd_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.cvsd_decode_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cvsd_decode_bs_sptr self, int m)"""
        return _vocoder_swig.cvsd_decode_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cvsd_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.cvsd_decode_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cvsd_decode_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(cvsd_decode_bs_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cvsd_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.cvsd_decode_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cvsd_decode_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(cvsd_decode_bs_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cvsd_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full(cvsd_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cvsd_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(cvsd_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cvsd_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(cvsd_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cvsd_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full(cvsd_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cvsd_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(cvsd_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cvsd_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(cvsd_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cvsd_decode_bs_sptr self) -> float"""
        return _vocoder_swig.cvsd_decode_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cvsd_decode_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.cvsd_decode_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cvsd_decode_bs_sptr self)"""
        return _vocoder_swig.cvsd_decode_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cvsd_decode_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.cvsd_decode_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cvsd_decode_bs_sptr self) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cvsd_decode_bs_sptr self, int priority) -> int"""
        return _vocoder_swig.cvsd_decode_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cvsd_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.cvsd_decode_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cvsd_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.cvsd_decode_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cvsd_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.cvsd_decode_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cvsd_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.cvsd_decode_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cvsd_decode_bs_sptr self) -> long"""
        return _vocoder_swig.cvsd_decode_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cvsd_decode_bs_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.cvsd_decode_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cvsd_decode_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.cvsd_decode_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cvsd_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.cvsd_decode_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cvsd_decode_bs_sptr self, std::string name)"""
        return _vocoder_swig.cvsd_decode_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cvsd_decode_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.cvsd_decode_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cvsd_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.cvsd_decode_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cvsd_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.cvsd_decode_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cvsd_decode_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.cvsd_decode_bs_sptr_message_subscribers(self, *args, **kwargs)

cvsd_decode_bs_sptr_swigregister = _vocoder_swig.cvsd_decode_bs_sptr_swigregister
cvsd_decode_bs_sptr_swigregister(cvsd_decode_bs_sptr)

cvsd_decode_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cvsd_decode_bs = cvsd_decode_bs.make;

class cvsd_encode_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::cvsd_encode_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::cvsd_encode_sb)> self) -> cvsd_encode_sb_sptr
        __init__(boost::shared_ptr<(gr::vocoder::cvsd_encode_sb)> self, cvsd_encode_sb p) -> cvsd_encode_sb_sptr
        """
        this = _vocoder_swig.new_cvsd_encode_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cvsd_encode_sb_sptr self) -> cvsd_encode_sb"""
        return _vocoder_swig.cvsd_encode_sb_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_cvsd_encode_sb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(cvsd_encode_sb_sptr self, short min_step=10, short max_step=1280, double step_decay=0.9990234375, double accum_decay=0.96875, 
            int K=32, int J=4, short pos_accum_max=32767, short neg_accum_max=-32767) -> cvsd_encode_sb_sptr

        This block performs CVSD audio encoding. Its design and implementation is modeled after the CVSD encoder/decoder specifications defined in the Bluetooth standard.

        CVSD is a method for encoding speech that seeks to reduce the bandwidth required for digital voice transmission. CVSD takes advantage of strong correlation between samples, quantizing the difference in amplitude between two consecutive samples. This difference requires fewer quantization levels as compared to other methods that quantize the actual amplitude level, reducing the bandwidth. CVSD employs a two level quantizer (one bit) and an adaptive algorithm that allows for continuous step size adjustment.

        The coder can represent low amplitude signals with accuracy without sacrificing performance on large amplitude signals, a trade off that occurs in some non-adaptive modulations.

        The CVSD encoder effectively provides 8-to-1 compression. More specifically, each incoming audio sample is compared to an internal reference value. If the input is greater or equal to the reference, the encoder outputs a "1" bit. If the input is less than the reference, the encoder outputs a "0" bit. The reference value is then updated accordingly based on the frequency of outputted "1" or "0" bits. By grouping 8 outputs bits together, the encoder essentially produce one output byte for every 8 input audio samples.

        This encoder requires that input audio samples are 2-byte short signed integers. The result bandwidth conversion, therefore, is 16 input bytes of raw audio data to 1 output byte of encoded audio data.

        The CVSD encoder module must be prefixed by an up-converter to over-sample the audio data prior to encoding. The Bluetooth standard specifically calls for a 1-to-8 interpolating up-converter. While this reduces the overall compression of the codec, this is required so that the encoder can accurately compute the slope between adjacent audio samples and correctly update its internal reference value.

        References:

        Constructor Specific Documentation:

        Constructor parameters to initialize the CVSD encoder. The default values are modeled after the Bluetooth standard and should not be changed except by an advanced user.

        Args:
            min_step : Minimum step size used to update the internal reference. Default: "10"
            max_step : Maximum step size used to update the internal reference. Default: "1280"
            step_decay : Decay factor applied to step size when there is not a run of J output 1s or 0s. Default: "0.9990234375" (i.e. 1-1/1024)
            accum_decay : Decay factor applied to the internal reference during every interation of the codec. Default: "0.96875" (i.e. 1-1/32)
            K : Size of shift register; the number of output bits remembered by codec (must be <= to 32). Default: "32"
            J : Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: "4"
            pos_accum_max : Maximum integer value allowed for the internal reference. Default: "32767" (2^15 - 1 or MAXSHORT)
            neg_accum_max : Minimum integer value allowed for the internal reference. Default: "-32767" (-2^15 + 1 or MINSHORT+1)
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_make(self, *args, **kwargs)

    def min_step(self):
        """min_step(cvsd_encode_sb_sptr self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_sptr_min_step(self)

    def max_step(self):
        """max_step(cvsd_encode_sb_sptr self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_sptr_max_step(self)

    def step_decay(self):
        """step_decay(cvsd_encode_sb_sptr self) -> double"""
        return _vocoder_swig.cvsd_encode_sb_sptr_step_decay(self)

    def accum_decay(self):
        """accum_decay(cvsd_encode_sb_sptr self) -> double"""
        return _vocoder_swig.cvsd_encode_sb_sptr_accum_decay(self)

    def K(self):
        """K(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_K(self)

    def J(self):
        """J(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_J(self)

    def pos_accum_max(self):
        """pos_accum_max(cvsd_encode_sb_sptr self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pos_accum_max(self)

    def neg_accum_max(self):
        """neg_accum_max(cvsd_encode_sb_sptr self) -> short"""
        return _vocoder_swig.cvsd_encode_sb_sptr_neg_accum_max(self)

    def history(self):
        """history(cvsd_encode_sb_sptr self) -> unsigned int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cvsd_encode_sb_sptr self, int which, int delay)
        declare_sample_delay(cvsd_encode_sb_sptr self, unsigned int delay)
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cvsd_encode_sb_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cvsd_encode_sb_sptr self) -> double"""
        return _vocoder_swig.cvsd_encode_sb_sptr_relative_rate(self)

    def start(self):
        """start(cvsd_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.cvsd_encode_sb_sptr_start(self)

    def stop(self):
        """stop(cvsd_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.cvsd_encode_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cvsd_encode_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.cvsd_encode_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cvsd_encode_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.cvsd_encode_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cvsd_encode_sb_sptr self, int m)"""
        return _vocoder_swig.cvsd_encode_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cvsd_encode_sb_sptr self)"""
        return _vocoder_swig.cvsd_encode_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cvsd_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.cvsd_encode_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cvsd_encode_sb_sptr self, int m)"""
        return _vocoder_swig.cvsd_encode_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cvsd_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.cvsd_encode_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cvsd_encode_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(cvsd_encode_sb_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cvsd_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.cvsd_encode_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cvsd_encode_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(cvsd_encode_sb_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cvsd_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full(cvsd_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cvsd_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(cvsd_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cvsd_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(cvsd_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cvsd_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full(cvsd_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cvsd_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(cvsd_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cvsd_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(cvsd_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cvsd_encode_sb_sptr self) -> float"""
        return _vocoder_swig.cvsd_encode_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cvsd_encode_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.cvsd_encode_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cvsd_encode_sb_sptr self)"""
        return _vocoder_swig.cvsd_encode_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cvsd_encode_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.cvsd_encode_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cvsd_encode_sb_sptr self) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cvsd_encode_sb_sptr self, int priority) -> int"""
        return _vocoder_swig.cvsd_encode_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cvsd_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.cvsd_encode_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cvsd_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.cvsd_encode_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cvsd_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.cvsd_encode_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cvsd_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.cvsd_encode_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cvsd_encode_sb_sptr self) -> long"""
        return _vocoder_swig.cvsd_encode_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cvsd_encode_sb_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.cvsd_encode_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cvsd_encode_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.cvsd_encode_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cvsd_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.cvsd_encode_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cvsd_encode_sb_sptr self, std::string name)"""
        return _vocoder_swig.cvsd_encode_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cvsd_encode_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.cvsd_encode_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cvsd_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.cvsd_encode_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cvsd_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.cvsd_encode_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cvsd_encode_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.cvsd_encode_sb_sptr_message_subscribers(self, *args, **kwargs)

cvsd_encode_sb_sptr_swigregister = _vocoder_swig.cvsd_encode_sb_sptr_swigregister
cvsd_encode_sb_sptr_swigregister(cvsd_encode_sb_sptr)

cvsd_encode_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cvsd_encode_sb = cvsd_encode_sb.make;

class g721_decode_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::g721_decode_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::g721_decode_bs)> self) -> g721_decode_bs_sptr
        __init__(boost::shared_ptr<(gr::vocoder::g721_decode_bs)> self, g721_decode_bs p) -> g721_decode_bs_sptr
        """
        this = _vocoder_swig.new_g721_decode_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(g721_decode_bs_sptr self) -> g721_decode_bs"""
        return _vocoder_swig.g721_decode_bs_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_g721_decode_bs_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(g721_decode_bs_sptr self) -> g721_decode_bs_sptr

        This block performs g721 audio decoding.

        Constructor Specific Documentation:

        Make G721 decoder block.
        """
        return _vocoder_swig.g721_decode_bs_sptr_make(self)

    def history(self):
        """history(g721_decode_bs_sptr self) -> unsigned int"""
        return _vocoder_swig.g721_decode_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(g721_decode_bs_sptr self, int which, int delay)
        declare_sample_delay(g721_decode_bs_sptr self, unsigned int delay)
        """
        return _vocoder_swig.g721_decode_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(g721_decode_bs_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.g721_decode_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(g721_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g721_decode_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(g721_decode_bs_sptr self) -> double"""
        return _vocoder_swig.g721_decode_bs_sptr_relative_rate(self)

    def start(self):
        """start(g721_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g721_decode_bs_sptr_start(self)

    def stop(self):
        """stop(g721_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g721_decode_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(g721_decode_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.g721_decode_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(g721_decode_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.g721_decode_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(g721_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g721_decode_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(g721_decode_bs_sptr self, int m)"""
        return _vocoder_swig.g721_decode_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(g721_decode_bs_sptr self)"""
        return _vocoder_swig.g721_decode_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(g721_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g721_decode_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(g721_decode_bs_sptr self, int m)"""
        return _vocoder_swig.g721_decode_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(g721_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g721_decode_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(g721_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.g721_decode_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(g721_decode_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(g721_decode_bs_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.g721_decode_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(g721_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.g721_decode_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(g721_decode_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(g721_decode_bs_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.g721_decode_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(g721_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full(g721_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_decode_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(g721_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(g721_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_decode_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(g721_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(g721_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_decode_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(g721_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full(g721_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_decode_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(g721_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(g721_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_decode_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(g721_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(g721_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_decode_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(g721_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g721_decode_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(g721_decode_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.g721_decode_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(g721_decode_bs_sptr self)"""
        return _vocoder_swig.g721_decode_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(g721_decode_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.g721_decode_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(g721_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g721_decode_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(g721_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g721_decode_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(g721_decode_bs_sptr self, int priority) -> int"""
        return _vocoder_swig.g721_decode_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(g721_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g721_decode_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(g721_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g721_decode_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(g721_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g721_decode_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(g721_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g721_decode_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(g721_decode_bs_sptr self) -> long"""
        return _vocoder_swig.g721_decode_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(g721_decode_bs_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.g721_decode_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(g721_decode_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.g721_decode_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(g721_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g721_decode_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(g721_decode_bs_sptr self, std::string name)"""
        return _vocoder_swig.g721_decode_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(g721_decode_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.g721_decode_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(g721_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g721_decode_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(g721_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g721_decode_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(g721_decode_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.g721_decode_bs_sptr_message_subscribers(self, *args, **kwargs)

g721_decode_bs_sptr_swigregister = _vocoder_swig.g721_decode_bs_sptr_swigregister
g721_decode_bs_sptr_swigregister(g721_decode_bs_sptr)

g721_decode_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
g721_decode_bs = g721_decode_bs.make;

class g721_encode_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::g721_encode_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::g721_encode_sb)> self) -> g721_encode_sb_sptr
        __init__(boost::shared_ptr<(gr::vocoder::g721_encode_sb)> self, g721_encode_sb p) -> g721_encode_sb_sptr
        """
        this = _vocoder_swig.new_g721_encode_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(g721_encode_sb_sptr self) -> g721_encode_sb"""
        return _vocoder_swig.g721_encode_sb_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_g721_encode_sb_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(g721_encode_sb_sptr self) -> g721_encode_sb_sptr

        This block performs g721 audio encoding.

        Constructor Specific Documentation:

        Make G721 encoder block.
        """
        return _vocoder_swig.g721_encode_sb_sptr_make(self)

    def history(self):
        """history(g721_encode_sb_sptr self) -> unsigned int"""
        return _vocoder_swig.g721_encode_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(g721_encode_sb_sptr self, int which, int delay)
        declare_sample_delay(g721_encode_sb_sptr self, unsigned int delay)
        """
        return _vocoder_swig.g721_encode_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(g721_encode_sb_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.g721_encode_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(g721_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g721_encode_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(g721_encode_sb_sptr self) -> double"""
        return _vocoder_swig.g721_encode_sb_sptr_relative_rate(self)

    def start(self):
        """start(g721_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g721_encode_sb_sptr_start(self)

    def stop(self):
        """stop(g721_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g721_encode_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(g721_encode_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.g721_encode_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(g721_encode_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.g721_encode_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(g721_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g721_encode_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(g721_encode_sb_sptr self, int m)"""
        return _vocoder_swig.g721_encode_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(g721_encode_sb_sptr self)"""
        return _vocoder_swig.g721_encode_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(g721_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g721_encode_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(g721_encode_sb_sptr self, int m)"""
        return _vocoder_swig.g721_encode_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(g721_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g721_encode_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(g721_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.g721_encode_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(g721_encode_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(g721_encode_sb_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.g721_encode_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(g721_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.g721_encode_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(g721_encode_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(g721_encode_sb_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.g721_encode_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(g721_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full(g721_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_encode_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(g721_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(g721_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_encode_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(g721_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(g721_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_encode_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(g721_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full(g721_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_encode_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(g721_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(g721_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_encode_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(g721_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(g721_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g721_encode_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(g721_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g721_encode_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(g721_encode_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.g721_encode_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(g721_encode_sb_sptr self)"""
        return _vocoder_swig.g721_encode_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(g721_encode_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.g721_encode_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(g721_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g721_encode_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(g721_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g721_encode_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(g721_encode_sb_sptr self, int priority) -> int"""
        return _vocoder_swig.g721_encode_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(g721_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g721_encode_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(g721_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g721_encode_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(g721_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g721_encode_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(g721_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g721_encode_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(g721_encode_sb_sptr self) -> long"""
        return _vocoder_swig.g721_encode_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(g721_encode_sb_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.g721_encode_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(g721_encode_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.g721_encode_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(g721_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g721_encode_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(g721_encode_sb_sptr self, std::string name)"""
        return _vocoder_swig.g721_encode_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(g721_encode_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.g721_encode_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(g721_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g721_encode_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(g721_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g721_encode_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(g721_encode_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.g721_encode_sb_sptr_message_subscribers(self, *args, **kwargs)

g721_encode_sb_sptr_swigregister = _vocoder_swig.g721_encode_sb_sptr_swigregister
g721_encode_sb_sptr_swigregister(g721_encode_sb_sptr)

g721_encode_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
g721_encode_sb = g721_encode_sb.make;

class g723_24_decode_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::g723_24_decode_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::g723_24_decode_bs)> self) -> g723_24_decode_bs_sptr
        __init__(boost::shared_ptr<(gr::vocoder::g723_24_decode_bs)> self, g723_24_decode_bs p) -> g723_24_decode_bs_sptr
        """
        this = _vocoder_swig.new_g723_24_decode_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(g723_24_decode_bs_sptr self) -> g723_24_decode_bs"""
        return _vocoder_swig.g723_24_decode_bs_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_g723_24_decode_bs_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(g723_24_decode_bs_sptr self) -> g723_24_decode_bs_sptr

        This block performs g723_24 audio decoding.

        Constructor Specific Documentation:

        Make G722_24 decoder block.
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_make(self)

    def history(self):
        """history(g723_24_decode_bs_sptr self) -> unsigned int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(g723_24_decode_bs_sptr self, int which, int delay)
        declare_sample_delay(g723_24_decode_bs_sptr self, unsigned int delay)
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(g723_24_decode_bs_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(g723_24_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(g723_24_decode_bs_sptr self) -> double"""
        return _vocoder_swig.g723_24_decode_bs_sptr_relative_rate(self)

    def start(self):
        """start(g723_24_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g723_24_decode_bs_sptr_start(self)

    def stop(self):
        """stop(g723_24_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g723_24_decode_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(g723_24_decode_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.g723_24_decode_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(g723_24_decode_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.g723_24_decode_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(g723_24_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(g723_24_decode_bs_sptr self, int m)"""
        return _vocoder_swig.g723_24_decode_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(g723_24_decode_bs_sptr self)"""
        return _vocoder_swig.g723_24_decode_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(g723_24_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g723_24_decode_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(g723_24_decode_bs_sptr self, int m)"""
        return _vocoder_swig.g723_24_decode_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(g723_24_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(g723_24_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.g723_24_decode_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(g723_24_decode_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(g723_24_decode_bs_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(g723_24_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.g723_24_decode_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(g723_24_decode_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(g723_24_decode_bs_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(g723_24_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full(g723_24_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(g723_24_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(g723_24_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(g723_24_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(g723_24_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(g723_24_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full(g723_24_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(g723_24_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(g723_24_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(g723_24_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(g723_24_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(g723_24_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_24_decode_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(g723_24_decode_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.g723_24_decode_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(g723_24_decode_bs_sptr self)"""
        return _vocoder_swig.g723_24_decode_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(g723_24_decode_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.g723_24_decode_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(g723_24_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(g723_24_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(g723_24_decode_bs_sptr self, int priority) -> int"""
        return _vocoder_swig.g723_24_decode_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(g723_24_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g723_24_decode_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(g723_24_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g723_24_decode_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(g723_24_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_24_decode_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(g723_24_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_24_decode_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(g723_24_decode_bs_sptr self) -> long"""
        return _vocoder_swig.g723_24_decode_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(g723_24_decode_bs_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.g723_24_decode_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(g723_24_decode_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.g723_24_decode_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(g723_24_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g723_24_decode_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(g723_24_decode_bs_sptr self, std::string name)"""
        return _vocoder_swig.g723_24_decode_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(g723_24_decode_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.g723_24_decode_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(g723_24_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_24_decode_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(g723_24_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_24_decode_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(g723_24_decode_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.g723_24_decode_bs_sptr_message_subscribers(self, *args, **kwargs)

g723_24_decode_bs_sptr_swigregister = _vocoder_swig.g723_24_decode_bs_sptr_swigregister
g723_24_decode_bs_sptr_swigregister(g723_24_decode_bs_sptr)

g723_24_decode_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
g723_24_decode_bs = g723_24_decode_bs.make;

class g723_24_encode_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::g723_24_encode_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::g723_24_encode_sb)> self) -> g723_24_encode_sb_sptr
        __init__(boost::shared_ptr<(gr::vocoder::g723_24_encode_sb)> self, g723_24_encode_sb p) -> g723_24_encode_sb_sptr
        """
        this = _vocoder_swig.new_g723_24_encode_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(g723_24_encode_sb_sptr self) -> g723_24_encode_sb"""
        return _vocoder_swig.g723_24_encode_sb_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_g723_24_encode_sb_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(g723_24_encode_sb_sptr self) -> g723_24_encode_sb_sptr

        This block performs g723_24 audio encoding.

        Constructor Specific Documentation:

        Make G722_24 encoder block.
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_make(self)

    def history(self):
        """history(g723_24_encode_sb_sptr self) -> unsigned int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(g723_24_encode_sb_sptr self, int which, int delay)
        declare_sample_delay(g723_24_encode_sb_sptr self, unsigned int delay)
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(g723_24_encode_sb_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(g723_24_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(g723_24_encode_sb_sptr self) -> double"""
        return _vocoder_swig.g723_24_encode_sb_sptr_relative_rate(self)

    def start(self):
        """start(g723_24_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g723_24_encode_sb_sptr_start(self)

    def stop(self):
        """stop(g723_24_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g723_24_encode_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(g723_24_encode_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.g723_24_encode_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(g723_24_encode_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.g723_24_encode_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(g723_24_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(g723_24_encode_sb_sptr self, int m)"""
        return _vocoder_swig.g723_24_encode_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(g723_24_encode_sb_sptr self)"""
        return _vocoder_swig.g723_24_encode_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(g723_24_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g723_24_encode_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(g723_24_encode_sb_sptr self, int m)"""
        return _vocoder_swig.g723_24_encode_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(g723_24_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(g723_24_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.g723_24_encode_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(g723_24_encode_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(g723_24_encode_sb_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(g723_24_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.g723_24_encode_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(g723_24_encode_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(g723_24_encode_sb_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(g723_24_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full(g723_24_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(g723_24_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(g723_24_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(g723_24_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(g723_24_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(g723_24_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full(g723_24_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(g723_24_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(g723_24_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(g723_24_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(g723_24_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(g723_24_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_24_encode_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(g723_24_encode_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.g723_24_encode_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(g723_24_encode_sb_sptr self)"""
        return _vocoder_swig.g723_24_encode_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(g723_24_encode_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.g723_24_encode_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(g723_24_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(g723_24_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(g723_24_encode_sb_sptr self, int priority) -> int"""
        return _vocoder_swig.g723_24_encode_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(g723_24_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g723_24_encode_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(g723_24_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g723_24_encode_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(g723_24_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_24_encode_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(g723_24_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_24_encode_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(g723_24_encode_sb_sptr self) -> long"""
        return _vocoder_swig.g723_24_encode_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(g723_24_encode_sb_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.g723_24_encode_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(g723_24_encode_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.g723_24_encode_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(g723_24_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g723_24_encode_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(g723_24_encode_sb_sptr self, std::string name)"""
        return _vocoder_swig.g723_24_encode_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(g723_24_encode_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.g723_24_encode_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(g723_24_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_24_encode_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(g723_24_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_24_encode_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(g723_24_encode_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.g723_24_encode_sb_sptr_message_subscribers(self, *args, **kwargs)

g723_24_encode_sb_sptr_swigregister = _vocoder_swig.g723_24_encode_sb_sptr_swigregister
g723_24_encode_sb_sptr_swigregister(g723_24_encode_sb_sptr)

g723_24_encode_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
g723_24_encode_sb = g723_24_encode_sb.make;

class g723_40_decode_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::g723_40_decode_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::g723_40_decode_bs)> self) -> g723_40_decode_bs_sptr
        __init__(boost::shared_ptr<(gr::vocoder::g723_40_decode_bs)> self, g723_40_decode_bs p) -> g723_40_decode_bs_sptr
        """
        this = _vocoder_swig.new_g723_40_decode_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(g723_40_decode_bs_sptr self) -> g723_40_decode_bs"""
        return _vocoder_swig.g723_40_decode_bs_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_g723_40_decode_bs_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(g723_40_decode_bs_sptr self) -> g723_40_decode_bs_sptr

        This block performs g723_40 audio decoding.

        Constructor Specific Documentation:

        Make G722_40 decoder block.
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_make(self)

    def history(self):
        """history(g723_40_decode_bs_sptr self) -> unsigned int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(g723_40_decode_bs_sptr self, int which, int delay)
        declare_sample_delay(g723_40_decode_bs_sptr self, unsigned int delay)
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(g723_40_decode_bs_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(g723_40_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(g723_40_decode_bs_sptr self) -> double"""
        return _vocoder_swig.g723_40_decode_bs_sptr_relative_rate(self)

    def start(self):
        """start(g723_40_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g723_40_decode_bs_sptr_start(self)

    def stop(self):
        """stop(g723_40_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g723_40_decode_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(g723_40_decode_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.g723_40_decode_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(g723_40_decode_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.g723_40_decode_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(g723_40_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(g723_40_decode_bs_sptr self, int m)"""
        return _vocoder_swig.g723_40_decode_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(g723_40_decode_bs_sptr self)"""
        return _vocoder_swig.g723_40_decode_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(g723_40_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.g723_40_decode_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(g723_40_decode_bs_sptr self, int m)"""
        return _vocoder_swig.g723_40_decode_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(g723_40_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(g723_40_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.g723_40_decode_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(g723_40_decode_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(g723_40_decode_bs_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(g723_40_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.g723_40_decode_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(g723_40_decode_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(g723_40_decode_bs_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(g723_40_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full(g723_40_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(g723_40_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(g723_40_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(g723_40_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(g723_40_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(g723_40_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full(g723_40_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(g723_40_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(g723_40_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(g723_40_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(g723_40_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(g723_40_decode_bs_sptr self) -> float"""
        return _vocoder_swig.g723_40_decode_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(g723_40_decode_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.g723_40_decode_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(g723_40_decode_bs_sptr self)"""
        return _vocoder_swig.g723_40_decode_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(g723_40_decode_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.g723_40_decode_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(g723_40_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(g723_40_decode_bs_sptr self) -> int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(g723_40_decode_bs_sptr self, int priority) -> int"""
        return _vocoder_swig.g723_40_decode_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(g723_40_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g723_40_decode_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(g723_40_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g723_40_decode_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(g723_40_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_40_decode_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(g723_40_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_40_decode_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(g723_40_decode_bs_sptr self) -> long"""
        return _vocoder_swig.g723_40_decode_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(g723_40_decode_bs_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.g723_40_decode_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(g723_40_decode_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.g723_40_decode_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(g723_40_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.g723_40_decode_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(g723_40_decode_bs_sptr self, std::string name)"""
        return _vocoder_swig.g723_40_decode_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(g723_40_decode_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.g723_40_decode_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(g723_40_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_40_decode_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(g723_40_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_40_decode_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(g723_40_decode_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.g723_40_decode_bs_sptr_message_subscribers(self, *args, **kwargs)

g723_40_decode_bs_sptr_swigregister = _vocoder_swig.g723_40_decode_bs_sptr_swigregister
g723_40_decode_bs_sptr_swigregister(g723_40_decode_bs_sptr)

g723_40_decode_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
g723_40_decode_bs = g723_40_decode_bs.make;

class g723_40_encode_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::g723_40_encode_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::g723_40_encode_sb)> self) -> g723_40_encode_sb_sptr
        __init__(boost::shared_ptr<(gr::vocoder::g723_40_encode_sb)> self, g723_40_encode_sb p) -> g723_40_encode_sb_sptr
        """
        this = _vocoder_swig.new_g723_40_encode_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(g723_40_encode_sb_sptr self) -> g723_40_encode_sb"""
        return _vocoder_swig.g723_40_encode_sb_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_g723_40_encode_sb_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(g723_40_encode_sb_sptr self) -> g723_40_encode_sb_sptr

        This block performs g723_40 audio encoding.

        Constructor Specific Documentation:

        Make G722_40 encoder block.
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_make(self)

    def history(self):
        """history(g723_40_encode_sb_sptr self) -> unsigned int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(g723_40_encode_sb_sptr self, int which, int delay)
        declare_sample_delay(g723_40_encode_sb_sptr self, unsigned int delay)
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(g723_40_encode_sb_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(g723_40_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(g723_40_encode_sb_sptr self) -> double"""
        return _vocoder_swig.g723_40_encode_sb_sptr_relative_rate(self)

    def start(self):
        """start(g723_40_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g723_40_encode_sb_sptr_start(self)

    def stop(self):
        """stop(g723_40_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g723_40_encode_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(g723_40_encode_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.g723_40_encode_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(g723_40_encode_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.g723_40_encode_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(g723_40_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(g723_40_encode_sb_sptr self, int m)"""
        return _vocoder_swig.g723_40_encode_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(g723_40_encode_sb_sptr self)"""
        return _vocoder_swig.g723_40_encode_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(g723_40_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.g723_40_encode_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(g723_40_encode_sb_sptr self, int m)"""
        return _vocoder_swig.g723_40_encode_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(g723_40_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(g723_40_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.g723_40_encode_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(g723_40_encode_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(g723_40_encode_sb_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(g723_40_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.g723_40_encode_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(g723_40_encode_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(g723_40_encode_sb_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(g723_40_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full(g723_40_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(g723_40_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(g723_40_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(g723_40_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(g723_40_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(g723_40_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full(g723_40_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(g723_40_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(g723_40_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(g723_40_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(g723_40_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(g723_40_encode_sb_sptr self) -> float"""
        return _vocoder_swig.g723_40_encode_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(g723_40_encode_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.g723_40_encode_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(g723_40_encode_sb_sptr self)"""
        return _vocoder_swig.g723_40_encode_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(g723_40_encode_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.g723_40_encode_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(g723_40_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(g723_40_encode_sb_sptr self) -> int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(g723_40_encode_sb_sptr self, int priority) -> int"""
        return _vocoder_swig.g723_40_encode_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(g723_40_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g723_40_encode_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(g723_40_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g723_40_encode_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(g723_40_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_40_encode_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(g723_40_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.g723_40_encode_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(g723_40_encode_sb_sptr self) -> long"""
        return _vocoder_swig.g723_40_encode_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(g723_40_encode_sb_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.g723_40_encode_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(g723_40_encode_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.g723_40_encode_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(g723_40_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.g723_40_encode_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(g723_40_encode_sb_sptr self, std::string name)"""
        return _vocoder_swig.g723_40_encode_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(g723_40_encode_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.g723_40_encode_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(g723_40_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_40_encode_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(g723_40_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.g723_40_encode_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(g723_40_encode_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.g723_40_encode_sb_sptr_message_subscribers(self, *args, **kwargs)

g723_40_encode_sb_sptr_swigregister = _vocoder_swig.g723_40_encode_sb_sptr_swigregister
g723_40_encode_sb_sptr_swigregister(g723_40_encode_sb_sptr)

g723_40_encode_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
g723_40_encode_sb = g723_40_encode_sb.make;

class gsm_fr_decode_ps_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::gsm_fr_decode_ps)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::gsm_fr_decode_ps)> self) -> gsm_fr_decode_ps_sptr
        __init__(boost::shared_ptr<(gr::vocoder::gsm_fr_decode_ps)> self, gsm_fr_decode_ps p) -> gsm_fr_decode_ps_sptr
        """
        this = _vocoder_swig.new_gsm_fr_decode_ps_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(gsm_fr_decode_ps_sptr self) -> gsm_fr_decode_ps"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_gsm_fr_decode_ps_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(gsm_fr_decode_ps_sptr self) -> gsm_fr_decode_ps_sptr

        GSM 06.10 Full Rate Vocoder Decoder

        Input: Vector of 33 bytes per 160 input samples Output: 16-bit shorts representing speech samples.

        Constructor Specific Documentation:

        Make GSM decoder block.
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_make(self)

    def history(self):
        """history(gsm_fr_decode_ps_sptr self) -> unsigned int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gsm_fr_decode_ps_sptr self, int which, int delay)
        declare_sample_delay(gsm_fr_decode_ps_sptr self, unsigned int delay)
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(gsm_fr_decode_ps_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(gsm_fr_decode_ps_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(gsm_fr_decode_ps_sptr self) -> double"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_relative_rate(self)

    def start(self):
        """start(gsm_fr_decode_ps_sptr self) -> bool"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_start(self)

    def stop(self):
        """stop(gsm_fr_decode_ps_sptr self) -> bool"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(gsm_fr_decode_ps_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(gsm_fr_decode_ps_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(gsm_fr_decode_ps_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(gsm_fr_decode_ps_sptr self, int m)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gsm_fr_decode_ps_sptr self)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gsm_fr_decode_ps_sptr self) -> bool"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(gsm_fr_decode_ps_sptr self, int m)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(gsm_fr_decode_ps_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(gsm_fr_decode_ps_sptr self, int i) -> long"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gsm_fr_decode_ps_sptr self, long max_output_buffer)
        set_max_output_buffer(gsm_fr_decode_ps_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(gsm_fr_decode_ps_sptr self, int i) -> long"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gsm_fr_decode_ps_sptr self, long min_output_buffer)
        set_min_output_buffer(gsm_fr_decode_ps_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gsm_fr_decode_ps_sptr self, int which) -> float
        pc_input_buffers_full(gsm_fr_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gsm_fr_decode_ps_sptr self, int which) -> float
        pc_input_buffers_full_avg(gsm_fr_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gsm_fr_decode_ps_sptr self, int which) -> float
        pc_input_buffers_full_var(gsm_fr_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gsm_fr_decode_ps_sptr self, int which) -> float
        pc_output_buffers_full(gsm_fr_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gsm_fr_decode_ps_sptr self, int which) -> float
        pc_output_buffers_full_avg(gsm_fr_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gsm_fr_decode_ps_sptr self, int which) -> float
        pc_output_buffers_full_var(gsm_fr_decode_ps_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(gsm_fr_decode_ps_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(gsm_fr_decode_ps_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(gsm_fr_decode_ps_sptr self)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(gsm_fr_decode_ps_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(gsm_fr_decode_ps_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(gsm_fr_decode_ps_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(gsm_fr_decode_ps_sptr self, int priority) -> int"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(gsm_fr_decode_ps_sptr self) -> std::string"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_name(self)

    def symbol_name(self):
        """symbol_name(gsm_fr_decode_ps_sptr self) -> std::string"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(gsm_fr_decode_ps_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(gsm_fr_decode_ps_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(gsm_fr_decode_ps_sptr self) -> long"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(gsm_fr_decode_ps_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(gsm_fr_decode_ps_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(gsm_fr_decode_ps_sptr self) -> std::string"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(gsm_fr_decode_ps_sptr self, std::string name)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(gsm_fr_decode_ps_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(gsm_fr_decode_ps_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(gsm_fr_decode_ps_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(gsm_fr_decode_ps_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.gsm_fr_decode_ps_sptr_message_subscribers(self, *args, **kwargs)

gsm_fr_decode_ps_sptr_swigregister = _vocoder_swig.gsm_fr_decode_ps_sptr_swigregister
gsm_fr_decode_ps_sptr_swigregister(gsm_fr_decode_ps_sptr)

gsm_fr_decode_ps_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gsm_fr_decode_ps = gsm_fr_decode_ps.make;

class gsm_fr_encode_sp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::gsm_fr_encode_sp)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::gsm_fr_encode_sp)> self) -> gsm_fr_encode_sp_sptr
        __init__(boost::shared_ptr<(gr::vocoder::gsm_fr_encode_sp)> self, gsm_fr_encode_sp p) -> gsm_fr_encode_sp_sptr
        """
        this = _vocoder_swig.new_gsm_fr_encode_sp_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(gsm_fr_encode_sp_sptr self) -> gsm_fr_encode_sp"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_gsm_fr_encode_sp_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(gsm_fr_encode_sp_sptr self) -> gsm_fr_encode_sp_sptr

        GSM 06.10 Full Rate Vocoder Encoder

        Input: 16-bit shorts representing speech samples Output: Vector of 33 bytes per 160 input samples.

        Constructor Specific Documentation:

        Make GSM encoder block.
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_make(self)

    def history(self):
        """history(gsm_fr_encode_sp_sptr self) -> unsigned int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gsm_fr_encode_sp_sptr self, int which, int delay)
        declare_sample_delay(gsm_fr_encode_sp_sptr self, unsigned int delay)
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(gsm_fr_encode_sp_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(gsm_fr_encode_sp_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(gsm_fr_encode_sp_sptr self) -> double"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_relative_rate(self)

    def start(self):
        """start(gsm_fr_encode_sp_sptr self) -> bool"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_start(self)

    def stop(self):
        """stop(gsm_fr_encode_sp_sptr self) -> bool"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(gsm_fr_encode_sp_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(gsm_fr_encode_sp_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(gsm_fr_encode_sp_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(gsm_fr_encode_sp_sptr self, int m)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gsm_fr_encode_sp_sptr self)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gsm_fr_encode_sp_sptr self) -> bool"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(gsm_fr_encode_sp_sptr self, int m)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(gsm_fr_encode_sp_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(gsm_fr_encode_sp_sptr self, int i) -> long"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gsm_fr_encode_sp_sptr self, long max_output_buffer)
        set_max_output_buffer(gsm_fr_encode_sp_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(gsm_fr_encode_sp_sptr self, int i) -> long"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gsm_fr_encode_sp_sptr self, long min_output_buffer)
        set_min_output_buffer(gsm_fr_encode_sp_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gsm_fr_encode_sp_sptr self, int which) -> float
        pc_input_buffers_full(gsm_fr_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gsm_fr_encode_sp_sptr self, int which) -> float
        pc_input_buffers_full_avg(gsm_fr_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gsm_fr_encode_sp_sptr self, int which) -> float
        pc_input_buffers_full_var(gsm_fr_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gsm_fr_encode_sp_sptr self, int which) -> float
        pc_output_buffers_full(gsm_fr_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gsm_fr_encode_sp_sptr self, int which) -> float
        pc_output_buffers_full_avg(gsm_fr_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gsm_fr_encode_sp_sptr self, int which) -> float
        pc_output_buffers_full_var(gsm_fr_encode_sp_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(gsm_fr_encode_sp_sptr self) -> float"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(gsm_fr_encode_sp_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(gsm_fr_encode_sp_sptr self)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(gsm_fr_encode_sp_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(gsm_fr_encode_sp_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(gsm_fr_encode_sp_sptr self) -> int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(gsm_fr_encode_sp_sptr self, int priority) -> int"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(gsm_fr_encode_sp_sptr self) -> std::string"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_name(self)

    def symbol_name(self):
        """symbol_name(gsm_fr_encode_sp_sptr self) -> std::string"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(gsm_fr_encode_sp_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(gsm_fr_encode_sp_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(gsm_fr_encode_sp_sptr self) -> long"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(gsm_fr_encode_sp_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(gsm_fr_encode_sp_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(gsm_fr_encode_sp_sptr self) -> std::string"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(gsm_fr_encode_sp_sptr self, std::string name)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(gsm_fr_encode_sp_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(gsm_fr_encode_sp_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(gsm_fr_encode_sp_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(gsm_fr_encode_sp_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.gsm_fr_encode_sp_sptr_message_subscribers(self, *args, **kwargs)

gsm_fr_encode_sp_sptr_swigregister = _vocoder_swig.gsm_fr_encode_sp_sptr_swigregister
gsm_fr_encode_sp_sptr_swigregister(gsm_fr_encode_sp_sptr)

gsm_fr_encode_sp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gsm_fr_encode_sp = gsm_fr_encode_sp.make;

class ulaw_decode_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::ulaw_decode_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::ulaw_decode_bs)> self) -> ulaw_decode_bs_sptr
        __init__(boost::shared_ptr<(gr::vocoder::ulaw_decode_bs)> self, ulaw_decode_bs p) -> ulaw_decode_bs_sptr
        """
        this = _vocoder_swig.new_ulaw_decode_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ulaw_decode_bs_sptr self) -> ulaw_decode_bs"""
        return _vocoder_swig.ulaw_decode_bs_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_ulaw_decode_bs_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(ulaw_decode_bs_sptr self) -> ulaw_decode_bs_sptr

        This block performs ulaw audio decoding.

        Constructor Specific Documentation:

        Make ulaw decoder block.
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_make(self)

    def history(self):
        """history(ulaw_decode_bs_sptr self) -> unsigned int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ulaw_decode_bs_sptr self, int which, int delay)
        declare_sample_delay(ulaw_decode_bs_sptr self, unsigned int delay)
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ulaw_decode_bs_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ulaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ulaw_decode_bs_sptr self) -> double"""
        return _vocoder_swig.ulaw_decode_bs_sptr_relative_rate(self)

    def start(self):
        """start(ulaw_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.ulaw_decode_bs_sptr_start(self)

    def stop(self):
        """stop(ulaw_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.ulaw_decode_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ulaw_decode_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.ulaw_decode_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ulaw_decode_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.ulaw_decode_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ulaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ulaw_decode_bs_sptr self, int m)"""
        return _vocoder_swig.ulaw_decode_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ulaw_decode_bs_sptr self)"""
        return _vocoder_swig.ulaw_decode_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ulaw_decode_bs_sptr self) -> bool"""
        return _vocoder_swig.ulaw_decode_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ulaw_decode_bs_sptr self, int m)"""
        return _vocoder_swig.ulaw_decode_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ulaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ulaw_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.ulaw_decode_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ulaw_decode_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(ulaw_decode_bs_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ulaw_decode_bs_sptr self, int i) -> long"""
        return _vocoder_swig.ulaw_decode_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ulaw_decode_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(ulaw_decode_bs_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ulaw_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full(ulaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ulaw_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(ulaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ulaw_decode_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(ulaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ulaw_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full(ulaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ulaw_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(ulaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ulaw_decode_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(ulaw_decode_bs_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ulaw_decode_bs_sptr self) -> float"""
        return _vocoder_swig.ulaw_decode_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ulaw_decode_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.ulaw_decode_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ulaw_decode_bs_sptr self)"""
        return _vocoder_swig.ulaw_decode_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ulaw_decode_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.ulaw_decode_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ulaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ulaw_decode_bs_sptr self) -> int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ulaw_decode_bs_sptr self, int priority) -> int"""
        return _vocoder_swig.ulaw_decode_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ulaw_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.ulaw_decode_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ulaw_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.ulaw_decode_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ulaw_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.ulaw_decode_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ulaw_decode_bs_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.ulaw_decode_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ulaw_decode_bs_sptr self) -> long"""
        return _vocoder_swig.ulaw_decode_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ulaw_decode_bs_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.ulaw_decode_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ulaw_decode_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.ulaw_decode_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ulaw_decode_bs_sptr self) -> std::string"""
        return _vocoder_swig.ulaw_decode_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ulaw_decode_bs_sptr self, std::string name)"""
        return _vocoder_swig.ulaw_decode_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ulaw_decode_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.ulaw_decode_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ulaw_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.ulaw_decode_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ulaw_decode_bs_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.ulaw_decode_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ulaw_decode_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.ulaw_decode_bs_sptr_message_subscribers(self, *args, **kwargs)

ulaw_decode_bs_sptr_swigregister = _vocoder_swig.ulaw_decode_bs_sptr_swigregister
ulaw_decode_bs_sptr_swigregister(ulaw_decode_bs_sptr)

ulaw_decode_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ulaw_decode_bs = ulaw_decode_bs.make;

class ulaw_encode_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::vocoder::ulaw_encode_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::vocoder::ulaw_encode_sb)> self) -> ulaw_encode_sb_sptr
        __init__(boost::shared_ptr<(gr::vocoder::ulaw_encode_sb)> self, ulaw_encode_sb p) -> ulaw_encode_sb_sptr
        """
        this = _vocoder_swig.new_ulaw_encode_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ulaw_encode_sb_sptr self) -> ulaw_encode_sb"""
        return _vocoder_swig.ulaw_encode_sb_sptr___deref__(self)

    __swig_destroy__ = _vocoder_swig.delete_ulaw_encode_sb_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(ulaw_encode_sb_sptr self) -> ulaw_encode_sb_sptr

        This block performs g.711 ulaw audio encoding.

        Constructor Specific Documentation:

        Make ulaw encoder block.
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_make(self)

    def history(self):
        """history(ulaw_encode_sb_sptr self) -> unsigned int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ulaw_encode_sb_sptr self, int which, int delay)
        declare_sample_delay(ulaw_encode_sb_sptr self, unsigned int delay)
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ulaw_encode_sb_sptr self, int which) -> unsigned int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ulaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ulaw_encode_sb_sptr self) -> double"""
        return _vocoder_swig.ulaw_encode_sb_sptr_relative_rate(self)

    def start(self):
        """start(ulaw_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.ulaw_encode_sb_sptr_start(self)

    def stop(self):
        """stop(ulaw_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.ulaw_encode_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ulaw_encode_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _vocoder_swig.ulaw_encode_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ulaw_encode_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _vocoder_swig.ulaw_encode_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ulaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ulaw_encode_sb_sptr self, int m)"""
        return _vocoder_swig.ulaw_encode_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ulaw_encode_sb_sptr self)"""
        return _vocoder_swig.ulaw_encode_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ulaw_encode_sb_sptr self) -> bool"""
        return _vocoder_swig.ulaw_encode_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ulaw_encode_sb_sptr self, int m)"""
        return _vocoder_swig.ulaw_encode_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ulaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ulaw_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.ulaw_encode_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ulaw_encode_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(ulaw_encode_sb_sptr self, int port, long max_output_buffer)
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ulaw_encode_sb_sptr self, int i) -> long"""
        return _vocoder_swig.ulaw_encode_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ulaw_encode_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(ulaw_encode_sb_sptr self, int port, long min_output_buffer)
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ulaw_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full(ulaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ulaw_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(ulaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ulaw_encode_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(ulaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ulaw_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full(ulaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ulaw_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(ulaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ulaw_encode_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(ulaw_encode_sb_sptr self) -> pmt_vector_float
        """
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ulaw_encode_sb_sptr self) -> float"""
        return _vocoder_swig.ulaw_encode_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ulaw_encode_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _vocoder_swig.ulaw_encode_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ulaw_encode_sb_sptr self)"""
        return _vocoder_swig.ulaw_encode_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ulaw_encode_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _vocoder_swig.ulaw_encode_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ulaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ulaw_encode_sb_sptr self) -> int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ulaw_encode_sb_sptr self, int priority) -> int"""
        return _vocoder_swig.ulaw_encode_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ulaw_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.ulaw_encode_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ulaw_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.ulaw_encode_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ulaw_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.ulaw_encode_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ulaw_encode_sb_sptr self) -> io_signature_sptr"""
        return _vocoder_swig.ulaw_encode_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ulaw_encode_sb_sptr self) -> long"""
        return _vocoder_swig.ulaw_encode_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ulaw_encode_sb_sptr self) -> basic_block_sptr"""
        return _vocoder_swig.ulaw_encode_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ulaw_encode_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _vocoder_swig.ulaw_encode_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ulaw_encode_sb_sptr self) -> std::string"""
        return _vocoder_swig.ulaw_encode_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ulaw_encode_sb_sptr self, std::string name)"""
        return _vocoder_swig.ulaw_encode_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ulaw_encode_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _vocoder_swig.ulaw_encode_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ulaw_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.ulaw_encode_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ulaw_encode_sb_sptr self) -> swig_int_ptr"""
        return _vocoder_swig.ulaw_encode_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ulaw_encode_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _vocoder_swig.ulaw_encode_sb_sptr_message_subscribers(self, *args, **kwargs)

ulaw_encode_sb_sptr_swigregister = _vocoder_swig.ulaw_encode_sb_sptr_swigregister
ulaw_encode_sb_sptr_swigregister(ulaw_encode_sb_sptr)

ulaw_encode_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ulaw_encode_sb = ulaw_encode_sb.make;



