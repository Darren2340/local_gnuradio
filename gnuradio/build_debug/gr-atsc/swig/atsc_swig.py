# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atsc_swig', [dirname(__file__)])
        except ImportError:
            import _atsc_swig
            return _atsc_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_atsc_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _atsc_swig = swig_import_helper()
    del swig_import_helper
else:
    import _atsc_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _atsc_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _atsc_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _atsc_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _atsc_swig.high_res_timer_epoch()
sizeof_atsc_mpeg_packet = _atsc_swig.sizeof_atsc_mpeg_packet
sizeof_atsc_mpeg_packet_no_sync = _atsc_swig.sizeof_atsc_mpeg_packet_no_sync
sizeof_atsc_mpeg_packet_rs_encoded = _atsc_swig.sizeof_atsc_mpeg_packet_rs_encoded
sizeof_atsc_data_segment = _atsc_swig.sizeof_atsc_data_segment
sizeof_atsc_soft_data_segment = _atsc_swig.sizeof_atsc_soft_data_segment
sizeof_atsc_mpeg_packet_pad = _atsc_swig.sizeof_atsc_mpeg_packet_pad
sizeof_atsc_mpeg_packet_no_sync_pad = _atsc_swig.sizeof_atsc_mpeg_packet_no_sync_pad
sizeof_atsc_mpeg_packet_rs_encoded_pad = _atsc_swig.sizeof_atsc_mpeg_packet_rs_encoded_pad
sizeof_atsc_data_segment_pad = _atsc_swig.sizeof_atsc_data_segment_pad
sizeof_atsc_soft_data_segment_pad = _atsc_swig.sizeof_atsc_soft_data_segment_pad
class atsc_randomizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_randomizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_randomizer)> self) -> atsc_randomizer_sptr
        __init__(boost::shared_ptr<(atsc_randomizer)> self, atsc_randomizer * p) -> atsc_randomizer_sptr
        """
        this = _atsc_swig.new_atsc_randomizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_randomizer_sptr self) -> atsc_randomizer *"""
        return _atsc_swig.atsc_randomizer_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_randomizer_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_randomizer_sptr self)"""
        return _atsc_swig.atsc_randomizer_sptr_reset(self)

    def history(self):
        """history(atsc_randomizer_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_randomizer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_randomizer_sptr self, int which, int delay)
        declare_sample_delay(atsc_randomizer_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_randomizer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_randomizer_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_randomizer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_randomizer_sptr self) -> int"""
        return _atsc_swig.atsc_randomizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_randomizer_sptr self) -> double"""
        return _atsc_swig.atsc_randomizer_sptr_relative_rate(self)

    def start(self):
        """start(atsc_randomizer_sptr self) -> bool"""
        return _atsc_swig.atsc_randomizer_sptr_start(self)

    def stop(self):
        """stop(atsc_randomizer_sptr self) -> bool"""
        return _atsc_swig.atsc_randomizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_randomizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_randomizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_randomizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_randomizer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_randomizer_sptr self) -> int"""
        return _atsc_swig.atsc_randomizer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_randomizer_sptr self, int m)"""
        return _atsc_swig.atsc_randomizer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_randomizer_sptr self)"""
        return _atsc_swig.atsc_randomizer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_randomizer_sptr self) -> bool"""
        return _atsc_swig.atsc_randomizer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_randomizer_sptr self, int m)"""
        return _atsc_swig.atsc_randomizer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_randomizer_sptr self) -> int"""
        return _atsc_swig.atsc_randomizer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_randomizer_sptr self, int i) -> long"""
        return _atsc_swig.atsc_randomizer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_randomizer_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_randomizer_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_randomizer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_randomizer_sptr self, int i) -> long"""
        return _atsc_swig.atsc_randomizer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_randomizer_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_randomizer_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_randomizer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_randomizer_sptr self, int which) -> float
        pc_input_buffers_full(atsc_randomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_randomizer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_randomizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_randomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_randomizer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_randomizer_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_randomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_randomizer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_randomizer_sptr self, int which) -> float
        pc_output_buffers_full(atsc_randomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_randomizer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_randomizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_randomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_randomizer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_randomizer_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_randomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_randomizer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_randomizer_sptr self) -> float"""
        return _atsc_swig.atsc_randomizer_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_randomizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_randomizer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_randomizer_sptr self)"""
        return _atsc_swig.atsc_randomizer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_randomizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_randomizer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_randomizer_sptr self) -> int"""
        return _atsc_swig.atsc_randomizer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_randomizer_sptr self) -> int"""
        return _atsc_swig.atsc_randomizer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_randomizer_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_randomizer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_randomizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_randomizer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_randomizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_randomizer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_randomizer_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_randomizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_randomizer_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_randomizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_randomizer_sptr self) -> long"""
        return _atsc_swig.atsc_randomizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_randomizer_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_randomizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_randomizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_randomizer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_randomizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_randomizer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_randomizer_sptr self, std::string name)"""
        return _atsc_swig.atsc_randomizer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_randomizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_randomizer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_randomizer_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_randomizer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_randomizer_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_randomizer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_randomizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_randomizer_sptr_message_subscribers(self, *args, **kwargs)

atsc_randomizer_sptr_swigregister = _atsc_swig.atsc_randomizer_sptr_swigregister
atsc_randomizer_sptr_swigregister(atsc_randomizer_sptr)
cvar = _atsc_swig.cvar
ATSC_SYMBOL_RATE = cvar.ATSC_SYMBOL_RATE
ATSC_DATA_SEGMENT_RATE = cvar.ATSC_DATA_SEGMENT_RATE
ATSC_MPEG_DATA_LENGTH = cvar.ATSC_MPEG_DATA_LENGTH
ATSC_MPEG_PKT_LENGTH = cvar.ATSC_MPEG_PKT_LENGTH
ATSC_MPEG_RS_ENCODED_LENGTH = cvar.ATSC_MPEG_RS_ENCODED_LENGTH
ATSC_DATA_SEGMENT_LENGTH = cvar.ATSC_DATA_SEGMENT_LENGTH
ATSC_DSEGS_PER_FIELD = cvar.ATSC_DSEGS_PER_FIELD
MPEG_SYNC_BYTE = cvar.MPEG_SYNC_BYTE
MPEG_TRANSPORT_ERROR_BIT = cvar.MPEG_TRANSPORT_ERROR_BIT

atsc_randomizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def randomizer():
  """
    randomizer() -> atsc_randomizer_sptr

    "Whiten" incoming mpeg transport stream packets

    input: atsc_mpeg_packet; output: atsc_mpeg_packet_no_sync
    """
  return _atsc_swig.randomizer()
class atsc_derandomizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_derandomizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_derandomizer)> self) -> atsc_derandomizer_sptr
        __init__(boost::shared_ptr<(atsc_derandomizer)> self, atsc_derandomizer * p) -> atsc_derandomizer_sptr
        """
        this = _atsc_swig.new_atsc_derandomizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_derandomizer_sptr self) -> atsc_derandomizer *"""
        return _atsc_swig.atsc_derandomizer_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_derandomizer_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_derandomizer_sptr self)"""
        return _atsc_swig.atsc_derandomizer_sptr_reset(self)

    def history(self):
        """history(atsc_derandomizer_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_derandomizer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_derandomizer_sptr self, int which, int delay)
        declare_sample_delay(atsc_derandomizer_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_derandomizer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_derandomizer_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_derandomizer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_derandomizer_sptr self) -> int"""
        return _atsc_swig.atsc_derandomizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_derandomizer_sptr self) -> double"""
        return _atsc_swig.atsc_derandomizer_sptr_relative_rate(self)

    def start(self):
        """start(atsc_derandomizer_sptr self) -> bool"""
        return _atsc_swig.atsc_derandomizer_sptr_start(self)

    def stop(self):
        """stop(atsc_derandomizer_sptr self) -> bool"""
        return _atsc_swig.atsc_derandomizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_derandomizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_derandomizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_derandomizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_derandomizer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_derandomizer_sptr self) -> int"""
        return _atsc_swig.atsc_derandomizer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_derandomizer_sptr self, int m)"""
        return _atsc_swig.atsc_derandomizer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_derandomizer_sptr self)"""
        return _atsc_swig.atsc_derandomizer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_derandomizer_sptr self) -> bool"""
        return _atsc_swig.atsc_derandomizer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_derandomizer_sptr self, int m)"""
        return _atsc_swig.atsc_derandomizer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_derandomizer_sptr self) -> int"""
        return _atsc_swig.atsc_derandomizer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_derandomizer_sptr self, int i) -> long"""
        return _atsc_swig.atsc_derandomizer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_derandomizer_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_derandomizer_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_derandomizer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_derandomizer_sptr self, int i) -> long"""
        return _atsc_swig.atsc_derandomizer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_derandomizer_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_derandomizer_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_derandomizer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_derandomizer_sptr self, int which) -> float
        pc_input_buffers_full(atsc_derandomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_derandomizer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_derandomizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_derandomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_derandomizer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_derandomizer_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_derandomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_derandomizer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_derandomizer_sptr self, int which) -> float
        pc_output_buffers_full(atsc_derandomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_derandomizer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_derandomizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_derandomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_derandomizer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_derandomizer_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_derandomizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_derandomizer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_derandomizer_sptr self) -> float"""
        return _atsc_swig.atsc_derandomizer_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_derandomizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_derandomizer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_derandomizer_sptr self)"""
        return _atsc_swig.atsc_derandomizer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_derandomizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_derandomizer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_derandomizer_sptr self) -> int"""
        return _atsc_swig.atsc_derandomizer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_derandomizer_sptr self) -> int"""
        return _atsc_swig.atsc_derandomizer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_derandomizer_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_derandomizer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_derandomizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_derandomizer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_derandomizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_derandomizer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_derandomizer_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_derandomizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_derandomizer_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_derandomizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_derandomizer_sptr self) -> long"""
        return _atsc_swig.atsc_derandomizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_derandomizer_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_derandomizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_derandomizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_derandomizer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_derandomizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_derandomizer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_derandomizer_sptr self, std::string name)"""
        return _atsc_swig.atsc_derandomizer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_derandomizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_derandomizer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_derandomizer_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_derandomizer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_derandomizer_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_derandomizer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_derandomizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_derandomizer_sptr_message_subscribers(self, *args, **kwargs)

atsc_derandomizer_sptr_swigregister = _atsc_swig.atsc_derandomizer_sptr_swigregister
atsc_derandomizer_sptr_swigregister(atsc_derandomizer_sptr)

atsc_derandomizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def derandomizer():
  """
    derandomizer() -> atsc_derandomizer_sptr

    "dewhiten" incoming mpeg transport stream packets

    input: atsc_mpeg_packet_no_sync; output: atsc_mpeg_packet;
    """
  return _atsc_swig.derandomizer()
class atsc_rs_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_rs_encoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_rs_encoder)> self) -> atsc_rs_encoder_sptr
        __init__(boost::shared_ptr<(atsc_rs_encoder)> self, atsc_rs_encoder * p) -> atsc_rs_encoder_sptr
        """
        this = _atsc_swig.new_atsc_rs_encoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_rs_encoder_sptr self) -> atsc_rs_encoder *"""
        return _atsc_swig.atsc_rs_encoder_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_rs_encoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_rs_encoder_sptr self)"""
        return _atsc_swig.atsc_rs_encoder_sptr_reset(self)

    def history(self):
        """history(atsc_rs_encoder_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_rs_encoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_rs_encoder_sptr self, int which, int delay)
        declare_sample_delay(atsc_rs_encoder_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_rs_encoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_rs_encoder_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_rs_encoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_rs_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_encoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_rs_encoder_sptr self) -> double"""
        return _atsc_swig.atsc_rs_encoder_sptr_relative_rate(self)

    def start(self):
        """start(atsc_rs_encoder_sptr self) -> bool"""
        return _atsc_swig.atsc_rs_encoder_sptr_start(self)

    def stop(self):
        """stop(atsc_rs_encoder_sptr self) -> bool"""
        return _atsc_swig.atsc_rs_encoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_rs_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_rs_encoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_rs_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_rs_encoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_rs_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_encoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_rs_encoder_sptr self, int m)"""
        return _atsc_swig.atsc_rs_encoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_rs_encoder_sptr self)"""
        return _atsc_swig.atsc_rs_encoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_rs_encoder_sptr self) -> bool"""
        return _atsc_swig.atsc_rs_encoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_rs_encoder_sptr self, int m)"""
        return _atsc_swig.atsc_rs_encoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_rs_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_encoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_rs_encoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_rs_encoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_rs_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_rs_encoder_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_rs_encoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_rs_encoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_rs_encoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_rs_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_rs_encoder_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_rs_encoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_rs_encoder_sptr self, int which) -> float
        pc_input_buffers_full(atsc_rs_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_encoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_rs_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_rs_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_encoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_rs_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_rs_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_encoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_rs_encoder_sptr self, int which) -> float
        pc_output_buffers_full(atsc_rs_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_encoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_rs_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_rs_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_encoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_rs_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_rs_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_encoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_rs_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_encoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_rs_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_rs_encoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_rs_encoder_sptr self)"""
        return _atsc_swig.atsc_rs_encoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_rs_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_rs_encoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_rs_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_encoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_rs_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_encoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_rs_encoder_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_rs_encoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_rs_encoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_rs_encoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_rs_encoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_rs_encoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_rs_encoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_rs_encoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_rs_encoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_rs_encoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_rs_encoder_sptr self) -> long"""
        return _atsc_swig.atsc_rs_encoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_rs_encoder_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_rs_encoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_rs_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_rs_encoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_rs_encoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_rs_encoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_rs_encoder_sptr self, std::string name)"""
        return _atsc_swig.atsc_rs_encoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_rs_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_rs_encoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_rs_encoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_rs_encoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_rs_encoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_rs_encoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_rs_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_rs_encoder_sptr_message_subscribers(self, *args, **kwargs)

atsc_rs_encoder_sptr_swigregister = _atsc_swig.atsc_rs_encoder_sptr_swigregister
atsc_rs_encoder_sptr_swigregister(atsc_rs_encoder_sptr)

atsc_rs_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rs_encoder():
  """
    rs_encoder() -> atsc_rs_encoder_sptr

    Reed-Solomon encoder for ATSC

    input: atsc_mpeg_packet_no_sync; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc_swig.rs_encoder()
class atsc_rs_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_rs_decoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_rs_decoder)> self) -> atsc_rs_decoder_sptr
        __init__(boost::shared_ptr<(atsc_rs_decoder)> self, atsc_rs_decoder * p) -> atsc_rs_decoder_sptr
        """
        this = _atsc_swig.new_atsc_rs_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_rs_decoder_sptr self) -> atsc_rs_decoder *"""
        return _atsc_swig.atsc_rs_decoder_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_rs_decoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_rs_decoder_sptr self)"""
        return _atsc_swig.atsc_rs_decoder_sptr_reset(self)

    def history(self):
        """history(atsc_rs_decoder_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_rs_decoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_rs_decoder_sptr self, int which, int delay)
        declare_sample_delay(atsc_rs_decoder_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_rs_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_rs_decoder_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_rs_decoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_rs_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_decoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_rs_decoder_sptr self) -> double"""
        return _atsc_swig.atsc_rs_decoder_sptr_relative_rate(self)

    def start(self):
        """start(atsc_rs_decoder_sptr self) -> bool"""
        return _atsc_swig.atsc_rs_decoder_sptr_start(self)

    def stop(self):
        """stop(atsc_rs_decoder_sptr self) -> bool"""
        return _atsc_swig.atsc_rs_decoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_rs_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_rs_decoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_rs_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_rs_decoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_rs_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_rs_decoder_sptr self, int m)"""
        return _atsc_swig.atsc_rs_decoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_rs_decoder_sptr self)"""
        return _atsc_swig.atsc_rs_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_rs_decoder_sptr self) -> bool"""
        return _atsc_swig.atsc_rs_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_rs_decoder_sptr self, int m)"""
        return _atsc_swig.atsc_rs_decoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_rs_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_rs_decoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_rs_decoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_rs_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_rs_decoder_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_rs_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_rs_decoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_rs_decoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_rs_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_rs_decoder_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_rs_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_rs_decoder_sptr self, int which) -> float
        pc_input_buffers_full(atsc_rs_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_rs_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_rs_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_rs_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_rs_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_rs_decoder_sptr self, int which) -> float
        pc_output_buffers_full(atsc_rs_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_rs_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_rs_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_rs_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_rs_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_rs_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_rs_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_rs_decoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_rs_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_rs_decoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_rs_decoder_sptr self)"""
        return _atsc_swig.atsc_rs_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_rs_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_rs_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_rs_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_decoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_rs_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_rs_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_rs_decoder_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_rs_decoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_rs_decoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_rs_decoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_rs_decoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_rs_decoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_rs_decoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_rs_decoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_rs_decoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_rs_decoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_rs_decoder_sptr self) -> long"""
        return _atsc_swig.atsc_rs_decoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_rs_decoder_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_rs_decoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_rs_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_rs_decoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_rs_decoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_rs_decoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_rs_decoder_sptr self, std::string name)"""
        return _atsc_swig.atsc_rs_decoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_rs_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_rs_decoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_rs_decoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_rs_decoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_rs_decoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_rs_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_rs_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_rs_decoder_sptr_message_subscribers(self, *args, **kwargs)

atsc_rs_decoder_sptr_swigregister = _atsc_swig.atsc_rs_decoder_sptr_swigregister
atsc_rs_decoder_sptr_swigregister(atsc_rs_decoder_sptr)

atsc_rs_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rs_decoder():
  """
    rs_decoder() -> atsc_rs_decoder_sptr

    Reed-Solomon decoder for ATSC

    input: atsc_mpeg_packet_rs_encoded; output: atsc_mpeg_packet_no_sync.
    """
  return _atsc_swig.rs_decoder()
class atsc_interleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_interleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_interleaver)> self) -> atsc_interleaver_sptr
        __init__(boost::shared_ptr<(atsc_interleaver)> self, atsc_interleaver * p) -> atsc_interleaver_sptr
        """
        this = _atsc_swig.new_atsc_interleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_interleaver_sptr self) -> atsc_interleaver *"""
        return _atsc_swig.atsc_interleaver_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_interleaver_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_interleaver_sptr self)"""
        return _atsc_swig.atsc_interleaver_sptr_reset(self)

    def history(self):
        """history(atsc_interleaver_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_interleaver_sptr self, int which, int delay)
        declare_sample_delay(atsc_interleaver_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_interleaver_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_interleaver_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_interleaver_sptr self) -> int"""
        return _atsc_swig.atsc_interleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_interleaver_sptr self) -> double"""
        return _atsc_swig.atsc_interleaver_sptr_relative_rate(self)

    def start(self):
        """start(atsc_interleaver_sptr self) -> bool"""
        return _atsc_swig.atsc_interleaver_sptr_start(self)

    def stop(self):
        """stop(atsc_interleaver_sptr self) -> bool"""
        return _atsc_swig.atsc_interleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_interleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_interleaver_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_interleaver_sptr self) -> int"""
        return _atsc_swig.atsc_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_interleaver_sptr self, int m)"""
        return _atsc_swig.atsc_interleaver_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_interleaver_sptr self)"""
        return _atsc_swig.atsc_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_interleaver_sptr self) -> bool"""
        return _atsc_swig.atsc_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_interleaver_sptr self, int m)"""
        return _atsc_swig.atsc_interleaver_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_interleaver_sptr self) -> int"""
        return _atsc_swig.atsc_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_interleaver_sptr self, int i) -> long"""
        return _atsc_swig.atsc_interleaver_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_interleaver_sptr self, int i) -> long"""
        return _atsc_swig.atsc_interleaver_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(atsc_interleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_interleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_interleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(atsc_interleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_interleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_interleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_interleaver_sptr self) -> float"""
        return _atsc_swig.atsc_interleaver_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_interleaver_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_interleaver_sptr self)"""
        return _atsc_swig.atsc_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_interleaver_sptr self) -> int"""
        return _atsc_swig.atsc_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_interleaver_sptr self) -> int"""
        return _atsc_swig.atsc_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_interleaver_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_interleaver_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_interleaver_sptr self) -> std::string"""
        return _atsc_swig.atsc_interleaver_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_interleaver_sptr self) -> std::string"""
        return _atsc_swig.atsc_interleaver_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_interleaver_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_interleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_interleaver_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_interleaver_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_interleaver_sptr self) -> long"""
        return _atsc_swig.atsc_interleaver_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_interleaver_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_interleaver_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_interleaver_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_interleaver_sptr self) -> std::string"""
        return _atsc_swig.atsc_interleaver_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_interleaver_sptr self, std::string name)"""
        return _atsc_swig.atsc_interleaver_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_interleaver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_interleaver_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_interleaver_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_interleaver_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_interleaver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_interleaver_sptr_message_subscribers(self, *args, **kwargs)

atsc_interleaver_sptr_swigregister = _atsc_swig.atsc_interleaver_sptr_swigregister
atsc_interleaver_sptr_swigregister(atsc_interleaver_sptr)

atsc_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interleaver():
  """
    interleaver() -> atsc_interleaver_sptr

    Interleave RS encoded ATSC data ( atsc_mpeg_packet_rs_encoded > atsc_mpeg_packet_rs_encoded)*

    input: atsc_mpeg_packet_rs_encoded; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc_swig.interleaver()
class atsc_deinterleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_deinterleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_deinterleaver)> self) -> atsc_deinterleaver_sptr
        __init__(boost::shared_ptr<(atsc_deinterleaver)> self, atsc_deinterleaver * p) -> atsc_deinterleaver_sptr
        """
        this = _atsc_swig.new_atsc_deinterleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_deinterleaver_sptr self) -> atsc_deinterleaver *"""
        return _atsc_swig.atsc_deinterleaver_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_deinterleaver_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_deinterleaver_sptr self)"""
        return _atsc_swig.atsc_deinterleaver_sptr_reset(self)

    def history(self):
        """history(atsc_deinterleaver_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_deinterleaver_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(atsc_deinterleaver_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_deinterleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_deinterleaver_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_deinterleaver_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_deinterleaver_sptr self) -> int"""
        return _atsc_swig.atsc_deinterleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_deinterleaver_sptr self) -> double"""
        return _atsc_swig.atsc_deinterleaver_sptr_relative_rate(self)

    def start(self):
        """start(atsc_deinterleaver_sptr self) -> bool"""
        return _atsc_swig.atsc_deinterleaver_sptr_start(self)

    def stop(self):
        """stop(atsc_deinterleaver_sptr self) -> bool"""
        return _atsc_swig.atsc_deinterleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_deinterleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_deinterleaver_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_deinterleaver_sptr self) -> int"""
        return _atsc_swig.atsc_deinterleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_deinterleaver_sptr self, int m)"""
        return _atsc_swig.atsc_deinterleaver_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_deinterleaver_sptr self)"""
        return _atsc_swig.atsc_deinterleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_deinterleaver_sptr self) -> bool"""
        return _atsc_swig.atsc_deinterleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_deinterleaver_sptr self, int m)"""
        return _atsc_swig.atsc_deinterleaver_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_deinterleaver_sptr self) -> int"""
        return _atsc_swig.atsc_deinterleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_deinterleaver_sptr self, int i) -> long"""
        return _atsc_swig.atsc_deinterleaver_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_deinterleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_deinterleaver_sptr self, int i) -> long"""
        return _atsc_swig.atsc_deinterleaver_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_deinterleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(atsc_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_deinterleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_deinterleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(atsc_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_deinterleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_deinterleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_deinterleaver_sptr self) -> float"""
        return _atsc_swig.atsc_deinterleaver_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_deinterleaver_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_deinterleaver_sptr self)"""
        return _atsc_swig.atsc_deinterleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_deinterleaver_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_deinterleaver_sptr self) -> int"""
        return _atsc_swig.atsc_deinterleaver_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_deinterleaver_sptr self) -> int"""
        return _atsc_swig.atsc_deinterleaver_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_deinterleaver_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_deinterleaver_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_deinterleaver_sptr self) -> std::string"""
        return _atsc_swig.atsc_deinterleaver_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_deinterleaver_sptr self) -> std::string"""
        return _atsc_swig.atsc_deinterleaver_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_deinterleaver_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_deinterleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_deinterleaver_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_deinterleaver_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_deinterleaver_sptr self) -> long"""
        return _atsc_swig.atsc_deinterleaver_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_deinterleaver_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_deinterleaver_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_deinterleaver_sptr self) -> std::string"""
        return _atsc_swig.atsc_deinterleaver_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_deinterleaver_sptr self, std::string name)"""
        return _atsc_swig.atsc_deinterleaver_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_deinterleaver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_deinterleaver_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_deinterleaver_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_deinterleaver_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_deinterleaver_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_deinterleaver_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_deinterleaver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_deinterleaver_sptr_message_subscribers(self, *args, **kwargs)

atsc_deinterleaver_sptr_swigregister = _atsc_swig.atsc_deinterleaver_sptr_swigregister
atsc_deinterleaver_sptr_swigregister(atsc_deinterleaver_sptr)

atsc_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def deinterleaver():
  """
    deinterleaver() -> atsc_deinterleaver_sptr

    Deinterleave RS encoded ATSC data ( atsc_mpeg_packet_rs_encoded > atsc_mpeg_packet_rs_encoded)

    input: atsc_mpeg_packet_rs_encoded; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc_swig.deinterleaver()
class atsc_trellis_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_trellis_encoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_trellis_encoder)> self) -> atsc_trellis_encoder_sptr
        __init__(boost::shared_ptr<(atsc_trellis_encoder)> self, atsc_trellis_encoder * p) -> atsc_trellis_encoder_sptr
        """
        this = _atsc_swig.new_atsc_trellis_encoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_trellis_encoder_sptr self) -> atsc_trellis_encoder *"""
        return _atsc_swig.atsc_trellis_encoder_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_trellis_encoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_trellis_encoder_sptr self)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_reset(self)

    def history(self):
        """history(atsc_trellis_encoder_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_trellis_encoder_sptr self, int which, int delay)
        declare_sample_delay(atsc_trellis_encoder_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_trellis_encoder_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_trellis_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_trellis_encoder_sptr self) -> double"""
        return _atsc_swig.atsc_trellis_encoder_sptr_relative_rate(self)

    def start(self):
        """start(atsc_trellis_encoder_sptr self) -> bool"""
        return _atsc_swig.atsc_trellis_encoder_sptr_start(self)

    def stop(self):
        """stop(atsc_trellis_encoder_sptr self) -> bool"""
        return _atsc_swig.atsc_trellis_encoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_trellis_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_trellis_encoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_trellis_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_trellis_encoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_trellis_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_trellis_encoder_sptr self, int m)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_trellis_encoder_sptr self)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_trellis_encoder_sptr self) -> bool"""
        return _atsc_swig.atsc_trellis_encoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_trellis_encoder_sptr self, int m)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_trellis_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_trellis_encoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_trellis_encoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_trellis_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_trellis_encoder_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_trellis_encoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_trellis_encoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_trellis_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_trellis_encoder_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_trellis_encoder_sptr self, int which) -> float
        pc_input_buffers_full(atsc_trellis_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_trellis_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_trellis_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_trellis_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_trellis_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_trellis_encoder_sptr self, int which) -> float
        pc_output_buffers_full(atsc_trellis_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_trellis_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_trellis_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_trellis_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_trellis_encoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_trellis_encoder_sptr self) -> float"""
        return _atsc_swig.atsc_trellis_encoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_trellis_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_trellis_encoder_sptr self)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_trellis_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_trellis_encoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_trellis_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_trellis_encoder_sptr self) -> int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_trellis_encoder_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_trellis_encoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_trellis_encoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_trellis_encoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_trellis_encoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_trellis_encoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_trellis_encoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_trellis_encoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_trellis_encoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_trellis_encoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_trellis_encoder_sptr self) -> long"""
        return _atsc_swig.atsc_trellis_encoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_trellis_encoder_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_trellis_encoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_trellis_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_trellis_encoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_trellis_encoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_trellis_encoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_trellis_encoder_sptr self, std::string name)"""
        return _atsc_swig.atsc_trellis_encoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_trellis_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_trellis_encoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_trellis_encoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_trellis_encoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_trellis_encoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_trellis_encoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_trellis_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_trellis_encoder_sptr_message_subscribers(self, *args, **kwargs)

atsc_trellis_encoder_sptr_swigregister = _atsc_swig.atsc_trellis_encoder_sptr_swigregister
atsc_trellis_encoder_sptr_swigregister(atsc_trellis_encoder_sptr)

atsc_trellis_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def trellis_encoder():
  """
    trellis_encoder() -> atsc_trellis_encoder_sptr

    ATSC 12-way interleaved trellis encoder (atsc_mpeg_packet_rs_encoded > atsc_data_segment)

    input: atsc_mpeg_packet_rs_encoded; output: atsc_data_segment.
    """
  return _atsc_swig.trellis_encoder()
class atsc_viterbi_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_viterbi_decoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_viterbi_decoder)> self) -> atsc_viterbi_decoder_sptr
        __init__(boost::shared_ptr<(atsc_viterbi_decoder)> self, atsc_viterbi_decoder * p) -> atsc_viterbi_decoder_sptr
        """
        this = _atsc_swig.new_atsc_viterbi_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_viterbi_decoder_sptr self) -> atsc_viterbi_decoder *"""
        return _atsc_swig.atsc_viterbi_decoder_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_viterbi_decoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_viterbi_decoder_sptr self)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_reset(self)

    def history(self):
        """history(atsc_viterbi_decoder_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_viterbi_decoder_sptr self, int which, int delay)
        declare_sample_delay(atsc_viterbi_decoder_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_viterbi_decoder_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_viterbi_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_viterbi_decoder_sptr self) -> double"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_relative_rate(self)

    def start(self):
        """start(atsc_viterbi_decoder_sptr self) -> bool"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_start(self)

    def stop(self):
        """stop(atsc_viterbi_decoder_sptr self) -> bool"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_viterbi_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_viterbi_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_viterbi_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_viterbi_decoder_sptr self, int m)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_viterbi_decoder_sptr self)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_viterbi_decoder_sptr self) -> bool"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_viterbi_decoder_sptr self, int m)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_viterbi_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_viterbi_decoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_viterbi_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_viterbi_decoder_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_viterbi_decoder_sptr self, int i) -> long"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_viterbi_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_viterbi_decoder_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_viterbi_decoder_sptr self, int which) -> float
        pc_input_buffers_full(atsc_viterbi_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_viterbi_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_viterbi_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_viterbi_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_viterbi_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_viterbi_decoder_sptr self, int which) -> float
        pc_output_buffers_full(atsc_viterbi_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_viterbi_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_viterbi_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_viterbi_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_viterbi_decoder_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_viterbi_decoder_sptr self) -> float"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_viterbi_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_viterbi_decoder_sptr self)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_viterbi_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_viterbi_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_viterbi_decoder_sptr self) -> int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_viterbi_decoder_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_viterbi_decoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_viterbi_decoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_viterbi_decoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_viterbi_decoder_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_viterbi_decoder_sptr self) -> long"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_viterbi_decoder_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_viterbi_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_viterbi_decoder_sptr self) -> std::string"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_viterbi_decoder_sptr self, std::string name)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_viterbi_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_viterbi_decoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_viterbi_decoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_viterbi_decoder_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_viterbi_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_viterbi_decoder_sptr_message_subscribers(self, *args, **kwargs)

atsc_viterbi_decoder_sptr_swigregister = _atsc_swig.atsc_viterbi_decoder_sptr_swigregister
atsc_viterbi_decoder_sptr_swigregister(atsc_viterbi_decoder_sptr)

atsc_viterbi_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def viterbi_decoder():
  """
    viterbi_decoder() -> atsc_viterbi_decoder_sptr

    ATSC 12-way interleaved viterbi decoder (atsc_soft_data_segment > atsc_mpeg_packet_rs_encoded)

    input: atsc_soft_data_segment; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc_swig.viterbi_decoder()
class atsc_ds_to_softds_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_ds_to_softds)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_ds_to_softds)> self) -> atsc_ds_to_softds_sptr
        __init__(boost::shared_ptr<(atsc_ds_to_softds)> self, atsc_ds_to_softds * p) -> atsc_ds_to_softds_sptr
        """
        this = _atsc_swig.new_atsc_ds_to_softds_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_ds_to_softds_sptr self) -> atsc_ds_to_softds *"""
        return _atsc_swig.atsc_ds_to_softds_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_ds_to_softds_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_ds_to_softds_sptr self)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_reset(self)

    def history(self):
        """history(atsc_ds_to_softds_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_ds_to_softds_sptr self, int which, int delay)
        declare_sample_delay(atsc_ds_to_softds_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_ds_to_softds_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_ds_to_softds_sptr self) -> int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_ds_to_softds_sptr self) -> double"""
        return _atsc_swig.atsc_ds_to_softds_sptr_relative_rate(self)

    def start(self):
        """start(atsc_ds_to_softds_sptr self) -> bool"""
        return _atsc_swig.atsc_ds_to_softds_sptr_start(self)

    def stop(self):
        """stop(atsc_ds_to_softds_sptr self) -> bool"""
        return _atsc_swig.atsc_ds_to_softds_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_ds_to_softds_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_ds_to_softds_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_ds_to_softds_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_ds_to_softds_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_ds_to_softds_sptr self) -> int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_ds_to_softds_sptr self, int m)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_ds_to_softds_sptr self)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_ds_to_softds_sptr self) -> bool"""
        return _atsc_swig.atsc_ds_to_softds_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_ds_to_softds_sptr self, int m)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_ds_to_softds_sptr self) -> int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_ds_to_softds_sptr self, int i) -> long"""
        return _atsc_swig.atsc_ds_to_softds_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_ds_to_softds_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_ds_to_softds_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_ds_to_softds_sptr self, int i) -> long"""
        return _atsc_swig.atsc_ds_to_softds_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_ds_to_softds_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_ds_to_softds_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_ds_to_softds_sptr self, int which) -> float
        pc_input_buffers_full(atsc_ds_to_softds_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_ds_to_softds_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_ds_to_softds_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_ds_to_softds_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_ds_to_softds_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_ds_to_softds_sptr self, int which) -> float
        pc_output_buffers_full(atsc_ds_to_softds_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_ds_to_softds_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_ds_to_softds_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_ds_to_softds_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_ds_to_softds_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_ds_to_softds_sptr self) -> float"""
        return _atsc_swig.atsc_ds_to_softds_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_ds_to_softds_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_ds_to_softds_sptr self)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_ds_to_softds_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_ds_to_softds_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_ds_to_softds_sptr self) -> int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_ds_to_softds_sptr self) -> int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_ds_to_softds_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_ds_to_softds_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_ds_to_softds_sptr self) -> std::string"""
        return _atsc_swig.atsc_ds_to_softds_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_ds_to_softds_sptr self) -> std::string"""
        return _atsc_swig.atsc_ds_to_softds_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_ds_to_softds_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_ds_to_softds_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_ds_to_softds_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_ds_to_softds_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_ds_to_softds_sptr self) -> long"""
        return _atsc_swig.atsc_ds_to_softds_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_ds_to_softds_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_ds_to_softds_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_ds_to_softds_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_ds_to_softds_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_ds_to_softds_sptr self) -> std::string"""
        return _atsc_swig.atsc_ds_to_softds_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_ds_to_softds_sptr self, std::string name)"""
        return _atsc_swig.atsc_ds_to_softds_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_ds_to_softds_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_ds_to_softds_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_ds_to_softds_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_ds_to_softds_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_ds_to_softds_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_ds_to_softds_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_ds_to_softds_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_ds_to_softds_sptr_message_subscribers(self, *args, **kwargs)

atsc_ds_to_softds_sptr_swigregister = _atsc_swig.atsc_ds_to_softds_sptr_swigregister
atsc_ds_to_softds_sptr_swigregister(atsc_ds_to_softds_sptr)

atsc_ds_to_softds_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ds_to_softds():
  """
    ds_to_softds() -> atsc_ds_to_softds_sptr

    Debug glue routine (atsc_data_segment > atsc_soft_data_segment)

    input: atsc_data_segment; output: atsc_soft_data_segment.
    """
  return _atsc_swig.ds_to_softds()
class atsc_field_sync_mux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_field_sync_mux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_field_sync_mux)> self) -> atsc_field_sync_mux_sptr
        __init__(boost::shared_ptr<(atsc_field_sync_mux)> self, atsc_field_sync_mux * p) -> atsc_field_sync_mux_sptr
        """
        this = _atsc_swig.new_atsc_field_sync_mux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_field_sync_mux_sptr self) -> atsc_field_sync_mux *"""
        return _atsc_swig.atsc_field_sync_mux_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_field_sync_mux_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_field_sync_mux_sptr self)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_reset(self)

    def history(self):
        """history(atsc_field_sync_mux_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_field_sync_mux_sptr self, int which, int delay)
        declare_sample_delay(atsc_field_sync_mux_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_field_sync_mux_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_field_sync_mux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_field_sync_mux_sptr self) -> double"""
        return _atsc_swig.atsc_field_sync_mux_sptr_relative_rate(self)

    def start(self):
        """start(atsc_field_sync_mux_sptr self) -> bool"""
        return _atsc_swig.atsc_field_sync_mux_sptr_start(self)

    def stop(self):
        """stop(atsc_field_sync_mux_sptr self) -> bool"""
        return _atsc_swig.atsc_field_sync_mux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_field_sync_mux_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_field_sync_mux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_field_sync_mux_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_field_sync_mux_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_field_sync_mux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_field_sync_mux_sptr self, int m)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_field_sync_mux_sptr self)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_field_sync_mux_sptr self) -> bool"""
        return _atsc_swig.atsc_field_sync_mux_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_field_sync_mux_sptr self, int m)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_field_sync_mux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_field_sync_mux_sptr self, int i) -> long"""
        return _atsc_swig.atsc_field_sync_mux_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_field_sync_mux_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_field_sync_mux_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_field_sync_mux_sptr self, int i) -> long"""
        return _atsc_swig.atsc_field_sync_mux_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_field_sync_mux_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_field_sync_mux_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_field_sync_mux_sptr self, int which) -> float
        pc_input_buffers_full(atsc_field_sync_mux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_field_sync_mux_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_field_sync_mux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_field_sync_mux_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_field_sync_mux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_field_sync_mux_sptr self, int which) -> float
        pc_output_buffers_full(atsc_field_sync_mux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_field_sync_mux_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_field_sync_mux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_field_sync_mux_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_field_sync_mux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_field_sync_mux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_mux_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_field_sync_mux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_field_sync_mux_sptr self)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_field_sync_mux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_field_sync_mux_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_field_sync_mux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_field_sync_mux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_field_sync_mux_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_field_sync_mux_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_field_sync_mux_sptr self) -> std::string"""
        return _atsc_swig.atsc_field_sync_mux_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_field_sync_mux_sptr self) -> std::string"""
        return _atsc_swig.atsc_field_sync_mux_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_field_sync_mux_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_field_sync_mux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_field_sync_mux_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_field_sync_mux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_field_sync_mux_sptr self) -> long"""
        return _atsc_swig.atsc_field_sync_mux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_field_sync_mux_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_field_sync_mux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_field_sync_mux_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_field_sync_mux_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_field_sync_mux_sptr self) -> std::string"""
        return _atsc_swig.atsc_field_sync_mux_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_field_sync_mux_sptr self, std::string name)"""
        return _atsc_swig.atsc_field_sync_mux_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_field_sync_mux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_field_sync_mux_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_field_sync_mux_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_field_sync_mux_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_field_sync_mux_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_field_sync_mux_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_field_sync_mux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_field_sync_mux_sptr_message_subscribers(self, *args, **kwargs)

atsc_field_sync_mux_sptr_swigregister = _atsc_swig.atsc_field_sync_mux_sptr_swigregister
atsc_field_sync_mux_sptr_swigregister(atsc_field_sync_mux_sptr)

atsc_field_sync_mux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def field_sync_mux():
  """
    field_sync_mux() -> atsc_field_sync_mux_sptr

    Insert ATSC Field Syncs as required (atsc_data_segment > atsc_data_segment)

    input: atsc_data_segment; output: atsc_data_segment.
    """
  return _atsc_swig.field_sync_mux()
class atsc_field_sync_demux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_field_sync_demux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_field_sync_demux)> self) -> atsc_field_sync_demux_sptr
        __init__(boost::shared_ptr<(atsc_field_sync_demux)> self, atsc_field_sync_demux * p) -> atsc_field_sync_demux_sptr
        """
        this = _atsc_swig.new_atsc_field_sync_demux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_field_sync_demux_sptr self) -> atsc_field_sync_demux *"""
        return _atsc_swig.atsc_field_sync_demux_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_field_sync_demux_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_field_sync_demux_sptr self)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_reset(self)

    def history(self):
        """history(atsc_field_sync_demux_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_field_sync_demux_sptr self, int which, int delay)
        declare_sample_delay(atsc_field_sync_demux_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_field_sync_demux_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_field_sync_demux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_field_sync_demux_sptr self) -> double"""
        return _atsc_swig.atsc_field_sync_demux_sptr_relative_rate(self)

    def start(self):
        """start(atsc_field_sync_demux_sptr self) -> bool"""
        return _atsc_swig.atsc_field_sync_demux_sptr_start(self)

    def stop(self):
        """stop(atsc_field_sync_demux_sptr self) -> bool"""
        return _atsc_swig.atsc_field_sync_demux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_field_sync_demux_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_field_sync_demux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_field_sync_demux_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_field_sync_demux_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_field_sync_demux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_field_sync_demux_sptr self, int m)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_field_sync_demux_sptr self)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_field_sync_demux_sptr self) -> bool"""
        return _atsc_swig.atsc_field_sync_demux_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_field_sync_demux_sptr self, int m)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_field_sync_demux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_field_sync_demux_sptr self, int i) -> long"""
        return _atsc_swig.atsc_field_sync_demux_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_field_sync_demux_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_field_sync_demux_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_field_sync_demux_sptr self, int i) -> long"""
        return _atsc_swig.atsc_field_sync_demux_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_field_sync_demux_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_field_sync_demux_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_field_sync_demux_sptr self, int which) -> float
        pc_input_buffers_full(atsc_field_sync_demux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_field_sync_demux_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_field_sync_demux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_field_sync_demux_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_field_sync_demux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_field_sync_demux_sptr self, int which) -> float
        pc_output_buffers_full(atsc_field_sync_demux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_field_sync_demux_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_field_sync_demux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_field_sync_demux_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_field_sync_demux_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_field_sync_demux_sptr self) -> float"""
        return _atsc_swig.atsc_field_sync_demux_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_field_sync_demux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_field_sync_demux_sptr self)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_field_sync_demux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_field_sync_demux_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_field_sync_demux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_field_sync_demux_sptr self) -> int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_field_sync_demux_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_field_sync_demux_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_field_sync_demux_sptr self) -> std::string"""
        return _atsc_swig.atsc_field_sync_demux_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_field_sync_demux_sptr self) -> std::string"""
        return _atsc_swig.atsc_field_sync_demux_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_field_sync_demux_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_field_sync_demux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_field_sync_demux_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_field_sync_demux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_field_sync_demux_sptr self) -> long"""
        return _atsc_swig.atsc_field_sync_demux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_field_sync_demux_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_field_sync_demux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_field_sync_demux_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_field_sync_demux_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_field_sync_demux_sptr self) -> std::string"""
        return _atsc_swig.atsc_field_sync_demux_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_field_sync_demux_sptr self, std::string name)"""
        return _atsc_swig.atsc_field_sync_demux_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_field_sync_demux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_field_sync_demux_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_field_sync_demux_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_field_sync_demux_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_field_sync_demux_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_field_sync_demux_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_field_sync_demux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_field_sync_demux_sptr_message_subscribers(self, *args, **kwargs)

atsc_field_sync_demux_sptr_swigregister = _atsc_swig.atsc_field_sync_demux_sptr_swigregister
atsc_field_sync_demux_sptr_swigregister(atsc_field_sync_demux_sptr)

atsc_field_sync_demux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def field_sync_demux():
  """
    field_sync_demux() -> atsc_field_sync_demux_sptr

    ATSC Field Sync Demux.

    This class accepts 1 stream of floats (data), and 1 stream of tags (syminfo). * It outputs one stream of atsc_soft_data_segment packets
    """
  return _atsc_swig.field_sync_demux()
class atsc_equalizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_equalizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_equalizer)> self) -> atsc_equalizer_sptr
        __init__(boost::shared_ptr<(atsc_equalizer)> self, atsc_equalizer * p) -> atsc_equalizer_sptr
        """
        this = _atsc_swig.new_atsc_equalizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_equalizer_sptr self) -> atsc_equalizer *"""
        return _atsc_swig.atsc_equalizer_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_equalizer_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_equalizer_sptr self)"""
        return _atsc_swig.atsc_equalizer_sptr_reset(self)

    def taps(self):
        """taps(atsc_equalizer_sptr self) -> pmt_vector_double"""
        return _atsc_swig.atsc_equalizer_sptr_taps(self)

    def history(self):
        """history(atsc_equalizer_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_equalizer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_equalizer_sptr self, int which, int delay)
        declare_sample_delay(atsc_equalizer_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_equalizer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_equalizer_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_equalizer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_equalizer_sptr self) -> int"""
        return _atsc_swig.atsc_equalizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_equalizer_sptr self) -> double"""
        return _atsc_swig.atsc_equalizer_sptr_relative_rate(self)

    def start(self):
        """start(atsc_equalizer_sptr self) -> bool"""
        return _atsc_swig.atsc_equalizer_sptr_start(self)

    def stop(self):
        """stop(atsc_equalizer_sptr self) -> bool"""
        return _atsc_swig.atsc_equalizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_equalizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_equalizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_equalizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_equalizer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_equalizer_sptr self) -> int"""
        return _atsc_swig.atsc_equalizer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_equalizer_sptr self, int m)"""
        return _atsc_swig.atsc_equalizer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_equalizer_sptr self)"""
        return _atsc_swig.atsc_equalizer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_equalizer_sptr self) -> bool"""
        return _atsc_swig.atsc_equalizer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_equalizer_sptr self, int m)"""
        return _atsc_swig.atsc_equalizer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_equalizer_sptr self) -> int"""
        return _atsc_swig.atsc_equalizer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_equalizer_sptr self, int i) -> long"""
        return _atsc_swig.atsc_equalizer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_equalizer_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_equalizer_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_equalizer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_equalizer_sptr self, int i) -> long"""
        return _atsc_swig.atsc_equalizer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_equalizer_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_equalizer_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_equalizer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_equalizer_sptr self, int which) -> float
        pc_input_buffers_full(atsc_equalizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_equalizer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_equalizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_equalizer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_equalizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_equalizer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_equalizer_sptr self, int which) -> float
        pc_output_buffers_full(atsc_equalizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_equalizer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_equalizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_equalizer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_equalizer_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_equalizer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_equalizer_sptr self) -> float"""
        return _atsc_swig.atsc_equalizer_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_equalizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_equalizer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_equalizer_sptr self)"""
        return _atsc_swig.atsc_equalizer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_equalizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_equalizer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_equalizer_sptr self) -> int"""
        return _atsc_swig.atsc_equalizer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_equalizer_sptr self) -> int"""
        return _atsc_swig.atsc_equalizer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_equalizer_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_equalizer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_equalizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_equalizer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_equalizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_equalizer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_equalizer_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_equalizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_equalizer_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_equalizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_equalizer_sptr self) -> long"""
        return _atsc_swig.atsc_equalizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_equalizer_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_equalizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_equalizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_equalizer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_equalizer_sptr self) -> std::string"""
        return _atsc_swig.atsc_equalizer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_equalizer_sptr self, std::string name)"""
        return _atsc_swig.atsc_equalizer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_equalizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_equalizer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_equalizer_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_equalizer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_equalizer_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_equalizer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_equalizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_equalizer_sptr_message_subscribers(self, *args, **kwargs)

atsc_equalizer_sptr_swigregister = _atsc_swig.atsc_equalizer_sptr_swigregister
atsc_equalizer_sptr_swigregister(atsc_equalizer_sptr)

atsc_equalizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def equalizer():
  """
    equalizer() -> atsc_equalizer_sptr

    ATSC equalizer (float,syminfo > float,syminfo)

    first inputs are data samples, second inputs are tags. first outputs are equalized data samples, second outputs are tags.
    """
  return _atsc_swig.equalizer()
class atsc_fs_checker_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_fs_checker)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_fs_checker)> self) -> atsc_fs_checker_sptr
        __init__(boost::shared_ptr<(atsc_fs_checker)> self, atsc_fs_checker * p) -> atsc_fs_checker_sptr
        """
        this = _atsc_swig.new_atsc_fs_checker_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_fs_checker_sptr self) -> atsc_fs_checker *"""
        return _atsc_swig.atsc_fs_checker_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_fs_checker_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_fs_checker_sptr self)"""
        return _atsc_swig.atsc_fs_checker_sptr_reset(self)

    def history(self):
        """history(atsc_fs_checker_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_fs_checker_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_fs_checker_sptr self, int which, int delay)
        declare_sample_delay(atsc_fs_checker_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_fs_checker_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_fs_checker_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_fs_checker_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_fs_checker_sptr self) -> int"""
        return _atsc_swig.atsc_fs_checker_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_fs_checker_sptr self) -> double"""
        return _atsc_swig.atsc_fs_checker_sptr_relative_rate(self)

    def start(self):
        """start(atsc_fs_checker_sptr self) -> bool"""
        return _atsc_swig.atsc_fs_checker_sptr_start(self)

    def stop(self):
        """stop(atsc_fs_checker_sptr self) -> bool"""
        return _atsc_swig.atsc_fs_checker_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_fs_checker_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_fs_checker_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_fs_checker_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_fs_checker_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_fs_checker_sptr self) -> int"""
        return _atsc_swig.atsc_fs_checker_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_fs_checker_sptr self, int m)"""
        return _atsc_swig.atsc_fs_checker_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_fs_checker_sptr self)"""
        return _atsc_swig.atsc_fs_checker_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_fs_checker_sptr self) -> bool"""
        return _atsc_swig.atsc_fs_checker_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_fs_checker_sptr self, int m)"""
        return _atsc_swig.atsc_fs_checker_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_fs_checker_sptr self) -> int"""
        return _atsc_swig.atsc_fs_checker_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_fs_checker_sptr self, int i) -> long"""
        return _atsc_swig.atsc_fs_checker_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_fs_checker_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_fs_checker_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_fs_checker_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_fs_checker_sptr self, int i) -> long"""
        return _atsc_swig.atsc_fs_checker_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_fs_checker_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_fs_checker_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_fs_checker_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_fs_checker_sptr self, int which) -> float
        pc_input_buffers_full(atsc_fs_checker_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fs_checker_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_fs_checker_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_fs_checker_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fs_checker_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_fs_checker_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_fs_checker_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fs_checker_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_fs_checker_sptr self, int which) -> float
        pc_output_buffers_full(atsc_fs_checker_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fs_checker_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_fs_checker_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_fs_checker_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fs_checker_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_fs_checker_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_fs_checker_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fs_checker_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_fs_checker_sptr self) -> float"""
        return _atsc_swig.atsc_fs_checker_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_fs_checker_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_fs_checker_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_fs_checker_sptr self)"""
        return _atsc_swig.atsc_fs_checker_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_fs_checker_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_fs_checker_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_fs_checker_sptr self) -> int"""
        return _atsc_swig.atsc_fs_checker_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_fs_checker_sptr self) -> int"""
        return _atsc_swig.atsc_fs_checker_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_fs_checker_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_fs_checker_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_fs_checker_sptr self) -> std::string"""
        return _atsc_swig.atsc_fs_checker_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_fs_checker_sptr self) -> std::string"""
        return _atsc_swig.atsc_fs_checker_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_fs_checker_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_fs_checker_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_fs_checker_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_fs_checker_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_fs_checker_sptr self) -> long"""
        return _atsc_swig.atsc_fs_checker_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_fs_checker_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_fs_checker_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_fs_checker_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_fs_checker_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_fs_checker_sptr self) -> std::string"""
        return _atsc_swig.atsc_fs_checker_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_fs_checker_sptr self, std::string name)"""
        return _atsc_swig.atsc_fs_checker_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_fs_checker_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_fs_checker_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_fs_checker_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_fs_checker_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_fs_checker_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_fs_checker_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_fs_checker_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_fs_checker_sptr_message_subscribers(self, *args, **kwargs)

atsc_fs_checker_sptr_swigregister = _atsc_swig.atsc_fs_checker_sptr_swigregister
atsc_fs_checker_sptr_swigregister(atsc_fs_checker_sptr)

atsc_fs_checker_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fs_checker():
  """
    fs_checker() -> atsc_fs_checker_sptr

    ATSC field sync checker (float,syminfo > float,syminfo)

    first output is delayed version of input. second output is set of tags, one-for-one with first output.
    """
  return _atsc_swig.fs_checker()
class atsc_bit_timing_loop_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_bit_timing_loop)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_bit_timing_loop)> self) -> atsc_bit_timing_loop_sptr
        __init__(boost::shared_ptr<(atsc_bit_timing_loop)> self, atsc_bit_timing_loop * p) -> atsc_bit_timing_loop_sptr
        """
        this = _atsc_swig.new_atsc_bit_timing_loop_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_bit_timing_loop_sptr self) -> atsc_bit_timing_loop *"""
        return _atsc_swig.atsc_bit_timing_loop_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_bit_timing_loop_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_bit_timing_loop_sptr self)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_reset(self)

    def history(self):
        """history(atsc_bit_timing_loop_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_bit_timing_loop_sptr self, int which, int delay)
        declare_sample_delay(atsc_bit_timing_loop_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_bit_timing_loop_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_bit_timing_loop_sptr self) -> int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_bit_timing_loop_sptr self) -> double"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_relative_rate(self)

    def start(self):
        """start(atsc_bit_timing_loop_sptr self) -> bool"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_start(self)

    def stop(self):
        """stop(atsc_bit_timing_loop_sptr self) -> bool"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_bit_timing_loop_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_bit_timing_loop_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_bit_timing_loop_sptr self) -> int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_bit_timing_loop_sptr self, int m)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_bit_timing_loop_sptr self)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_bit_timing_loop_sptr self) -> bool"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_bit_timing_loop_sptr self, int m)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_bit_timing_loop_sptr self) -> int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_bit_timing_loop_sptr self, int i) -> long"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_bit_timing_loop_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_bit_timing_loop_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_bit_timing_loop_sptr self, int i) -> long"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_bit_timing_loop_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_bit_timing_loop_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_bit_timing_loop_sptr self, int which) -> float
        pc_input_buffers_full(atsc_bit_timing_loop_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_bit_timing_loop_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_bit_timing_loop_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_bit_timing_loop_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_bit_timing_loop_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_bit_timing_loop_sptr self, int which) -> float
        pc_output_buffers_full(atsc_bit_timing_loop_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_bit_timing_loop_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_bit_timing_loop_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_bit_timing_loop_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_bit_timing_loop_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_bit_timing_loop_sptr self) -> float"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_bit_timing_loop_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_bit_timing_loop_sptr self)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_bit_timing_loop_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_bit_timing_loop_sptr self) -> int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_bit_timing_loop_sptr self) -> int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_bit_timing_loop_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_bit_timing_loop_sptr self) -> std::string"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_bit_timing_loop_sptr self) -> std::string"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_bit_timing_loop_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_bit_timing_loop_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_bit_timing_loop_sptr self) -> long"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_bit_timing_loop_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_bit_timing_loop_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_bit_timing_loop_sptr self) -> std::string"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_bit_timing_loop_sptr self, std::string name)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_bit_timing_loop_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_bit_timing_loop_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_bit_timing_loop_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_bit_timing_loop_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_bit_timing_loop_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_bit_timing_loop_sptr_message_subscribers(self, *args, **kwargs)

atsc_bit_timing_loop_sptr_swigregister = _atsc_swig.atsc_bit_timing_loop_sptr_swigregister
atsc_bit_timing_loop_sptr_swigregister(atsc_bit_timing_loop_sptr)

atsc_bit_timing_loop_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def bit_timing_loop():
  """
    bit_timing_loop() -> atsc_bit_timing_loop_sptr

    ATSC BitTimingLoop3

    This class accepts a single real input and produces two outputs, the raw symbol (float) and the tag (atsc_syminfo)
    """
  return _atsc_swig.bit_timing_loop()
class atsc_fpll_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_fpll)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_fpll)> self) -> atsc_fpll_sptr
        __init__(boost::shared_ptr<(atsc_fpll)> self, atsc_fpll * p) -> atsc_fpll_sptr
        """
        this = _atsc_swig.new_atsc_fpll_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_fpll_sptr self) -> atsc_fpll *"""
        return _atsc_swig.atsc_fpll_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_fpll_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_fpll_sptr self)"""
        return _atsc_swig.atsc_fpll_sptr_reset(self)

    def history(self):
        """history(atsc_fpll_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_fpll_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_fpll_sptr self, int which, int delay)
        declare_sample_delay(atsc_fpll_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_fpll_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_fpll_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_fpll_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_fpll_sptr self) -> int"""
        return _atsc_swig.atsc_fpll_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_fpll_sptr self) -> double"""
        return _atsc_swig.atsc_fpll_sptr_relative_rate(self)

    def start(self):
        """start(atsc_fpll_sptr self) -> bool"""
        return _atsc_swig.atsc_fpll_sptr_start(self)

    def stop(self):
        """stop(atsc_fpll_sptr self) -> bool"""
        return _atsc_swig.atsc_fpll_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_fpll_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_fpll_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_fpll_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_fpll_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_fpll_sptr self) -> int"""
        return _atsc_swig.atsc_fpll_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_fpll_sptr self, int m)"""
        return _atsc_swig.atsc_fpll_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_fpll_sptr self)"""
        return _atsc_swig.atsc_fpll_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_fpll_sptr self) -> bool"""
        return _atsc_swig.atsc_fpll_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_fpll_sptr self, int m)"""
        return _atsc_swig.atsc_fpll_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_fpll_sptr self) -> int"""
        return _atsc_swig.atsc_fpll_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_fpll_sptr self, int i) -> long"""
        return _atsc_swig.atsc_fpll_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_fpll_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_fpll_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_fpll_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_fpll_sptr self, int i) -> long"""
        return _atsc_swig.atsc_fpll_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_fpll_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_fpll_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_fpll_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_fpll_sptr self, int which) -> float
        pc_input_buffers_full(atsc_fpll_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fpll_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_fpll_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_fpll_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fpll_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_fpll_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_fpll_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fpll_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_fpll_sptr self, int which) -> float
        pc_output_buffers_full(atsc_fpll_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fpll_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_fpll_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_fpll_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fpll_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_fpll_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_fpll_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_fpll_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_fpll_sptr self) -> float"""
        return _atsc_swig.atsc_fpll_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_fpll_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_fpll_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_fpll_sptr self)"""
        return _atsc_swig.atsc_fpll_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_fpll_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_fpll_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_fpll_sptr self) -> int"""
        return _atsc_swig.atsc_fpll_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_fpll_sptr self) -> int"""
        return _atsc_swig.atsc_fpll_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_fpll_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_fpll_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_fpll_sptr self) -> std::string"""
        return _atsc_swig.atsc_fpll_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_fpll_sptr self) -> std::string"""
        return _atsc_swig.atsc_fpll_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_fpll_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_fpll_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_fpll_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_fpll_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_fpll_sptr self) -> long"""
        return _atsc_swig.atsc_fpll_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_fpll_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_fpll_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_fpll_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_fpll_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_fpll_sptr self) -> std::string"""
        return _atsc_swig.atsc_fpll_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_fpll_sptr self, std::string name)"""
        return _atsc_swig.atsc_fpll_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_fpll_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_fpll_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_fpll_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_fpll_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_fpll_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_fpll_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_fpll_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_fpll_sptr_message_subscribers(self, *args, **kwargs)

atsc_fpll_sptr_swigregister = _atsc_swig.atsc_fpll_sptr_swigregister
atsc_fpll_sptr_swigregister(atsc_fpll_sptr)

atsc_fpll_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fpll():
  """
    fpll() -> atsc_fpll_sptr

    ATSC FPLL (2nd Version)

    A/D > GrFIRfilterFFF -> GrAtscFPLL ->

    We use GrFIRfilterFFF to bandpass filter the signal of interest.

    This class accepts a single real input and produces a single real output
    """
  return _atsc_swig.fpll()
class atsc_depad_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_depad)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_depad)> self) -> atsc_depad_sptr
        __init__(boost::shared_ptr<(atsc_depad)> self, atsc_depad * p) -> atsc_depad_sptr
        """
        this = _atsc_swig.new_atsc_depad_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_depad_sptr self) -> atsc_depad *"""
        return _atsc_swig.atsc_depad_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_depad_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_depad_sptr self)"""
        return _atsc_swig.atsc_depad_sptr_reset(self)

    def history(self):
        """history(atsc_depad_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_depad_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_depad_sptr self, int which, int delay)
        declare_sample_delay(atsc_depad_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_depad_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_depad_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_depad_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_depad_sptr self) -> int"""
        return _atsc_swig.atsc_depad_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_depad_sptr self) -> double"""
        return _atsc_swig.atsc_depad_sptr_relative_rate(self)

    def start(self):
        """start(atsc_depad_sptr self) -> bool"""
        return _atsc_swig.atsc_depad_sptr_start(self)

    def stop(self):
        """stop(atsc_depad_sptr self) -> bool"""
        return _atsc_swig.atsc_depad_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_depad_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_depad_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_depad_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_depad_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_depad_sptr self) -> int"""
        return _atsc_swig.atsc_depad_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_depad_sptr self, int m)"""
        return _atsc_swig.atsc_depad_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_depad_sptr self)"""
        return _atsc_swig.atsc_depad_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_depad_sptr self) -> bool"""
        return _atsc_swig.atsc_depad_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_depad_sptr self, int m)"""
        return _atsc_swig.atsc_depad_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_depad_sptr self) -> int"""
        return _atsc_swig.atsc_depad_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_depad_sptr self, int i) -> long"""
        return _atsc_swig.atsc_depad_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_depad_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_depad_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_depad_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_depad_sptr self, int i) -> long"""
        return _atsc_swig.atsc_depad_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_depad_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_depad_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_depad_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_depad_sptr self, int which) -> float
        pc_input_buffers_full(atsc_depad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_depad_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_depad_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_depad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_depad_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_depad_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_depad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_depad_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_depad_sptr self, int which) -> float
        pc_output_buffers_full(atsc_depad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_depad_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_depad_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_depad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_depad_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_depad_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_depad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_depad_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_depad_sptr self) -> float"""
        return _atsc_swig.atsc_depad_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_depad_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_depad_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_depad_sptr self)"""
        return _atsc_swig.atsc_depad_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_depad_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_depad_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_depad_sptr self) -> int"""
        return _atsc_swig.atsc_depad_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_depad_sptr self) -> int"""
        return _atsc_swig.atsc_depad_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_depad_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_depad_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_depad_sptr self) -> std::string"""
        return _atsc_swig.atsc_depad_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_depad_sptr self) -> std::string"""
        return _atsc_swig.atsc_depad_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_depad_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_depad_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_depad_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_depad_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_depad_sptr self) -> long"""
        return _atsc_swig.atsc_depad_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_depad_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_depad_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_depad_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_depad_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_depad_sptr self) -> std::string"""
        return _atsc_swig.atsc_depad_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_depad_sptr self, std::string name)"""
        return _atsc_swig.atsc_depad_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_depad_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_depad_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_depad_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_depad_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_depad_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_depad_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_depad_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_depad_sptr_message_subscribers(self, *args, **kwargs)

atsc_depad_sptr_swigregister = _atsc_swig.atsc_depad_sptr_swigregister
atsc_depad_sptr_swigregister(atsc_depad_sptr)

atsc_depad_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def depad():
  """
    depad() -> atsc_depad_sptr

    depad mpeg ts packets from 256 byte atsc_mpeg_packet to 188 byte char

    input: atsc_mpeg_packet; output: unsigned char
    """
  return _atsc_swig.depad()
class atsc_pad_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_pad)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(atsc_pad)> self) -> atsc_pad_sptr
        __init__(boost::shared_ptr<(atsc_pad)> self, atsc_pad * p) -> atsc_pad_sptr
        """
        this = _atsc_swig.new_atsc_pad_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(atsc_pad_sptr self) -> atsc_pad *"""
        return _atsc_swig.atsc_pad_sptr___deref__(self)

    __swig_destroy__ = _atsc_swig.delete_atsc_pad_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(atsc_pad_sptr self)"""
        return _atsc_swig.atsc_pad_sptr_reset(self)

    def history(self):
        """history(atsc_pad_sptr self) -> unsigned int"""
        return _atsc_swig.atsc_pad_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(atsc_pad_sptr self, int which, int delay)
        declare_sample_delay(atsc_pad_sptr self, unsigned int delay)
        """
        return _atsc_swig.atsc_pad_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(atsc_pad_sptr self, int which) -> unsigned int"""
        return _atsc_swig.atsc_pad_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(atsc_pad_sptr self) -> int"""
        return _atsc_swig.atsc_pad_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(atsc_pad_sptr self) -> double"""
        return _atsc_swig.atsc_pad_sptr_relative_rate(self)

    def start(self):
        """start(atsc_pad_sptr self) -> bool"""
        return _atsc_swig.atsc_pad_sptr_start(self)

    def stop(self):
        """stop(atsc_pad_sptr self) -> bool"""
        return _atsc_swig.atsc_pad_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(atsc_pad_sptr self, unsigned int which_input) -> uint64_t"""
        return _atsc_swig.atsc_pad_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(atsc_pad_sptr self, unsigned int which_output) -> uint64_t"""
        return _atsc_swig.atsc_pad_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(atsc_pad_sptr self) -> int"""
        return _atsc_swig.atsc_pad_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(atsc_pad_sptr self, int m)"""
        return _atsc_swig.atsc_pad_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(atsc_pad_sptr self)"""
        return _atsc_swig.atsc_pad_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(atsc_pad_sptr self) -> bool"""
        return _atsc_swig.atsc_pad_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(atsc_pad_sptr self, int m)"""
        return _atsc_swig.atsc_pad_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(atsc_pad_sptr self) -> int"""
        return _atsc_swig.atsc_pad_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(atsc_pad_sptr self, int i) -> long"""
        return _atsc_swig.atsc_pad_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(atsc_pad_sptr self, long max_output_buffer)
        set_max_output_buffer(atsc_pad_sptr self, int port, long max_output_buffer)
        """
        return _atsc_swig.atsc_pad_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(atsc_pad_sptr self, int i) -> long"""
        return _atsc_swig.atsc_pad_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(atsc_pad_sptr self, long min_output_buffer)
        set_min_output_buffer(atsc_pad_sptr self, int port, long min_output_buffer)
        """
        return _atsc_swig.atsc_pad_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(atsc_pad_sptr self, int which) -> float
        pc_input_buffers_full(atsc_pad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_pad_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(atsc_pad_sptr self, int which) -> float
        pc_input_buffers_full_avg(atsc_pad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_pad_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(atsc_pad_sptr self, int which) -> float
        pc_input_buffers_full_var(atsc_pad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_pad_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(atsc_pad_sptr self, int which) -> float
        pc_output_buffers_full(atsc_pad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_pad_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(atsc_pad_sptr self, int which) -> float
        pc_output_buffers_full_avg(atsc_pad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_pad_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(atsc_pad_sptr self, int which) -> float
        pc_output_buffers_full_var(atsc_pad_sptr self) -> pmt_vector_float
        """
        return _atsc_swig.atsc_pad_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(atsc_pad_sptr self) -> float"""
        return _atsc_swig.atsc_pad_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(atsc_pad_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _atsc_swig.atsc_pad_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(atsc_pad_sptr self)"""
        return _atsc_swig.atsc_pad_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(atsc_pad_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _atsc_swig.atsc_pad_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(atsc_pad_sptr self) -> int"""
        return _atsc_swig.atsc_pad_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(atsc_pad_sptr self) -> int"""
        return _atsc_swig.atsc_pad_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(atsc_pad_sptr self, int priority) -> int"""
        return _atsc_swig.atsc_pad_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(atsc_pad_sptr self) -> std::string"""
        return _atsc_swig.atsc_pad_sptr_name(self)

    def symbol_name(self):
        """symbol_name(atsc_pad_sptr self) -> std::string"""
        return _atsc_swig.atsc_pad_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(atsc_pad_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_pad_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(atsc_pad_sptr self) -> io_signature_sptr"""
        return _atsc_swig.atsc_pad_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(atsc_pad_sptr self) -> long"""
        return _atsc_swig.atsc_pad_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(atsc_pad_sptr self) -> basic_block_sptr"""
        return _atsc_swig.atsc_pad_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(atsc_pad_sptr self, int ninputs, int noutputs) -> bool"""
        return _atsc_swig.atsc_pad_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(atsc_pad_sptr self) -> std::string"""
        return _atsc_swig.atsc_pad_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(atsc_pad_sptr self, std::string name)"""
        return _atsc_swig.atsc_pad_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(atsc_pad_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _atsc_swig.atsc_pad_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(atsc_pad_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_pad_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(atsc_pad_sptr self) -> swig_int_ptr"""
        return _atsc_swig.atsc_pad_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(atsc_pad_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _atsc_swig.atsc_pad_sptr_message_subscribers(self, *args, **kwargs)

atsc_pad_sptr_swigregister = _atsc_swig.atsc_pad_sptr_swigregister
atsc_pad_sptr_swigregister(atsc_pad_sptr)

atsc_pad_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pad():
  """
    pad() -> atsc_pad_sptr

    pad mpeg ts packets from 188 byte char to to 256 byte atsc_mpeg_packet

    input: unsigned char; output: atsc_mpeg_packet
    """
  return _atsc_swig.pad()


