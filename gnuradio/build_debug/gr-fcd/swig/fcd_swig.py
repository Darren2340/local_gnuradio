# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fcd_swig', [dirname(__file__)])
        except ImportError:
            import _fcd_swig
            return _fcd_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_fcd_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fcd_swig = swig_import_helper()
    del swig_import_helper
else:
    import _fcd_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _fcd_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _fcd_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _fcd_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _fcd_swig.high_res_timer_epoch()
class source_c(object):
    """
    Funcube Dongle source block.

    This class provides a Funcube Dongle soure block by wrapping the USB audio interface and the USB HID control interface of the Funcube Dongle into one convenient source block.

    The Funcube Dongle needs to have firmware 18f or later for the control interface to work properly. As of early 2011, FCDs still come with firmware 18b. You can use qthid 2.2 (not 3) to upgrade the firmware:

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fcd_source_c.

    This is effectively the public constructor. To avoid accidental use of raw pointers, fcd_source_c's constructor is private. fcd_make_source_c is the public interface for creating new instances.

    Args:
        device_name : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(device_name=""):
        """
        make(std::string const device_name="") -> source_c_sptr

        Funcube Dongle source block.

        This class provides a Funcube Dongle soure block by wrapping the USB audio interface and the USB HID control interface of the Funcube Dongle into one convenient source block.

        The Funcube Dongle needs to have firmware 18f or later for the control interface to work properly. As of early 2011, FCDs still come with firmware 18b. You can use qthid 2.2 (not 3) to upgrade the firmware:

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fcd_source_c.

        This is effectively the public constructor. To avoid accidental use of raw pointers, fcd_source_c's constructor is private. fcd_make_source_c is the public interface for creating new instances.

        Args:
            device_name : 
        """
        return _fcd_swig.source_c_make(device_name)

    make = staticmethod(make)
    def set_freq(self, *args):
        """
        set_freq(source_c self, int freq)
        set_freq(source_c self, float freq)

        Set frequency with Hz resolution.

        Set the frequency of the Funcube Dongle with 1 Hz resolution applying the frequency correction set by set_freq_corr().
        """
        return _fcd_swig.source_c_set_freq(self, *args)

    def set_freq_khz(self, *args, **kwargs):
        """
        set_freq_khz(source_c self, int freq)

        Set frequency with kHz resolution.

        Sets the frequency of the Funcube Dongle with 1 kHz resolution applying the frequency correction set by set_freq_corr().
        """
        return _fcd_swig.source_c_set_freq_khz(self, *args, **kwargs)

    def set_lna_gain(self, *args, **kwargs):
        """
        set_lna_gain(source_c self, float gain)

        Set LNA gain.

        Set the LNA gain in the FCD. Valid range is -5 to


        By default the LNA gain is set to 20 dB and this is a good value for most cases. In noisy areas you may try to reduce the gain.
        """
        return _fcd_swig.source_c_set_lna_gain(self, *args, **kwargs)

    def set_mixer_gain(self, *args, **kwargs):
        """
        set_mixer_gain(source_c self, float gain)

        Set mixer gain.

        Set the mixer gain in the FCD. Valid values are +4 and +12 dB.

        By default the mixer gain is set to +12 dB and this is a good value for most cases. In noisy areas you may try to reduce the gain.
        """
        return _fcd_swig.source_c_set_mixer_gain(self, *args, **kwargs)

    def set_freq_corr(self, *args, **kwargs):
        """
        set_freq_corr(source_c self, int ppm)

        Set new frequency correction.

        Version 1.1 FCDs (S/N 810 or later) need a correction of -12 ppm. Earlier FCDs need roughly -120 ppm (default for gr-fcd).

        Ref:
        """
        return _fcd_swig.source_c_set_freq_corr(self, *args, **kwargs)

    def set_dc_corr(self, *args, **kwargs):
        """
        set_dc_corr(source_c self, double _dci, double _dcq)

        Set DC offset correction.

        Set DC offset correction in the device. Default is 0.0.
        """
        return _fcd_swig.source_c_set_dc_corr(self, *args, **kwargs)

    def set_iq_corr(self, *args, **kwargs):
        """
        set_iq_corr(source_c self, double _gain, double _phase)

        Set IQ phase and gain balance.

        Set IQ phase and gain balance in the device. The default values are 0.0 for phase and 1.0 for gain.
        """
        return _fcd_swig.source_c_set_iq_corr(self, *args, **kwargs)

    __swig_destroy__ = _fcd_swig.delete_source_c
    __del__ = lambda self : None;
source_c_swigregister = _fcd_swig.source_c_swigregister
source_c_swigregister(source_c)

def source_c_make(device_name=""):
  """
    source_c_make(std::string const device_name="") -> source_c_sptr

    Funcube Dongle source block.

    This class provides a Funcube Dongle soure block by wrapping the USB audio interface and the USB HID control interface of the Funcube Dongle into one convenient source block.

    The Funcube Dongle needs to have firmware 18f or later for the control interface to work properly. As of early 2011, FCDs still come with firmware 18b. You can use qthid 2.2 (not 3) to upgrade the firmware:

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fcd_source_c.

    This is effectively the public constructor. To avoid accidental use of raw pointers, fcd_source_c's constructor is private. fcd_make_source_c is the public interface for creating new instances.

    Args:
        device_name : 
    """
  return _fcd_swig.source_c_make(device_name)

class source_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fcd::source_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::fcd::source_c)> self) -> source_c_sptr
        __init__(boost::shared_ptr<(gr::fcd::source_c)> self, source_c p) -> source_c_sptr
        """
        this = _fcd_swig.new_source_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(source_c_sptr self) -> source_c"""
        return _fcd_swig.source_c_sptr___deref__(self)

    __swig_destroy__ = _fcd_swig.delete_source_c_sptr
    __del__ = lambda self : None;
    def make(self, device_name=""):
        """
        make(source_c_sptr self, std::string const device_name="") -> source_c_sptr

        Funcube Dongle source block.

        This class provides a Funcube Dongle soure block by wrapping the USB audio interface and the USB HID control interface of the Funcube Dongle into one convenient source block.

        The Funcube Dongle needs to have firmware 18f or later for the control interface to work properly. As of early 2011, FCDs still come with firmware 18b. You can use qthid 2.2 (not 3) to upgrade the firmware:

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fcd_source_c.

        This is effectively the public constructor. To avoid accidental use of raw pointers, fcd_source_c's constructor is private. fcd_make_source_c is the public interface for creating new instances.

        Args:
            device_name : 
        """
        return _fcd_swig.source_c_sptr_make(self, device_name)

    def set_freq(self, *args):
        """
        set_freq(source_c_sptr self, int freq)
        set_freq(source_c_sptr self, float freq)

        Set frequency with Hz resolution.

        Set the frequency of the Funcube Dongle with 1 Hz resolution applying the frequency correction set by set_freq_corr().
        """
        return _fcd_swig.source_c_sptr_set_freq(self, *args)

    def set_freq_khz(self, *args, **kwargs):
        """
        set_freq_khz(source_c_sptr self, int freq)

        Set frequency with kHz resolution.

        Sets the frequency of the Funcube Dongle with 1 kHz resolution applying the frequency correction set by set_freq_corr().
        """
        return _fcd_swig.source_c_sptr_set_freq_khz(self, *args, **kwargs)

    def set_lna_gain(self, *args, **kwargs):
        """
        set_lna_gain(source_c_sptr self, float gain)

        Set LNA gain.

        Set the LNA gain in the FCD. Valid range is -5 to


        By default the LNA gain is set to 20 dB and this is a good value for most cases. In noisy areas you may try to reduce the gain.
        """
        return _fcd_swig.source_c_sptr_set_lna_gain(self, *args, **kwargs)

    def set_mixer_gain(self, *args, **kwargs):
        """
        set_mixer_gain(source_c_sptr self, float gain)

        Set mixer gain.

        Set the mixer gain in the FCD. Valid values are +4 and +12 dB.

        By default the mixer gain is set to +12 dB and this is a good value for most cases. In noisy areas you may try to reduce the gain.
        """
        return _fcd_swig.source_c_sptr_set_mixer_gain(self, *args, **kwargs)

    def set_freq_corr(self, *args, **kwargs):
        """
        set_freq_corr(source_c_sptr self, int ppm)

        Set new frequency correction.

        Version 1.1 FCDs (S/N 810 or later) need a correction of -12 ppm. Earlier FCDs need roughly -120 ppm (default for gr-fcd).

        Ref:
        """
        return _fcd_swig.source_c_sptr_set_freq_corr(self, *args, **kwargs)

    def set_dc_corr(self, *args, **kwargs):
        """
        set_dc_corr(source_c_sptr self, double _dci, double _dcq)

        Set DC offset correction.

        Set DC offset correction in the device. Default is 0.0.
        """
        return _fcd_swig.source_c_sptr_set_dc_corr(self, *args, **kwargs)

    def set_iq_corr(self, *args, **kwargs):
        """
        set_iq_corr(source_c_sptr self, double _gain, double _phase)

        Set IQ phase and gain balance.

        Set IQ phase and gain balance in the device. The default values are 0.0 for phase and 1.0 for gain.
        """
        return _fcd_swig.source_c_sptr_set_iq_corr(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(source_c_sptr self, basic_block_sptr block)
        primitive_connect(source_c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _fcd_swig.source_c_sptr_primitive_connect(self, *args)

    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(source_c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(source_c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _fcd_swig.source_c_sptr_primitive_msg_connect(self, *args)

    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(source_c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(source_c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _fcd_swig.source_c_sptr_primitive_msg_disconnect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(source_c_sptr self, basic_block_sptr block)
        primitive_disconnect(source_c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _fcd_swig.source_c_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(source_c_sptr self)"""
        return _fcd_swig.source_c_sptr_disconnect_all(self)

    def lock(self):
        """lock(source_c_sptr self)"""
        return _fcd_swig.source_c_sptr_lock(self)

    def unlock(self):
        """unlock(source_c_sptr self)"""
        return _fcd_swig.source_c_sptr_unlock(self)

    def primitive_message_port_register_hier_in(self, *args, **kwargs):
        """primitive_message_port_register_hier_in(source_c_sptr self, swig_int_ptr port_id)"""
        return _fcd_swig.source_c_sptr_primitive_message_port_register_hier_in(self, *args, **kwargs)

    def primitive_message_port_register_hier_out(self, *args, **kwargs):
        """primitive_message_port_register_hier_out(source_c_sptr self, swig_int_ptr port_id)"""
        return _fcd_swig.source_c_sptr_primitive_message_port_register_hier_out(self, *args, **kwargs)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(source_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fcd_swig.source_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(source_c_sptr self)"""
        return _fcd_swig.source_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(source_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fcd_swig.source_c_sptr_processor_affinity(self)

    def to_hier_block2(self):
        """to_hier_block2(source_c_sptr self) -> hier_block2_sptr"""
        return _fcd_swig.source_c_sptr_to_hier_block2(self)

    def name(self):
        """name(source_c_sptr self) -> std::string"""
        return _fcd_swig.source_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(source_c_sptr self) -> std::string"""
        return _fcd_swig.source_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(source_c_sptr self) -> io_signature_sptr"""
        return _fcd_swig.source_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(source_c_sptr self) -> io_signature_sptr"""
        return _fcd_swig.source_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(source_c_sptr self) -> long"""
        return _fcd_swig.source_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(source_c_sptr self) -> basic_block_sptr"""
        return _fcd_swig.source_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(source_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _fcd_swig.source_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(source_c_sptr self) -> std::string"""
        return _fcd_swig.source_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(source_c_sptr self, std::string name)"""
        return _fcd_swig.source_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(source_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fcd_swig.source_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(source_c_sptr self) -> swig_int_ptr"""
        return _fcd_swig.source_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(source_c_sptr self) -> swig_int_ptr"""
        return _fcd_swig.source_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(source_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fcd_swig.source_c_sptr_message_subscribers(self, *args, **kwargs)

source_c_sptr_swigregister = _fcd_swig.source_c_sptr_swigregister
source_c_sptr_swigregister(source_c_sptr)

source_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
source_c = source_c.make;



