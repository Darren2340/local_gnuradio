// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `gnuradio.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_darren_repos_local_gnuradio_gnuradio_build_debug_gnuradio_runtime_lib_controlport__gnuradio_h__
#define ___home_darren_repos_local_gnuradio_gnuradio_build_debug_gnuradio_runtime_lib_controlport__gnuradio_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GNURadio
{

class Knob;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::Knob>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::Knob*);

class KnobB;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobB>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobB*);

class KnobC;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobC>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobC*);

class KnobI;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobI>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobI*);

class KnobT;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobT>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobT*);

class KnobF;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobF>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobF*);

class KnobD;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobD>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobD*);

class KnobL;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobL>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobL*);

class KnobS;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobS>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobS*);

class KnobZ;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobZ>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobZ*);

class KnobVecB;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecB>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecB*);

class KnobVecC;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecC>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecC*);

class KnobVecI;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecI>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecI*);

class KnobVecT;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecT>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecT*);

class KnobVecF;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecF>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecF*);

class KnobVecD;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecD>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecD*);

class KnobVecL;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecL>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecL*);

class KnobVecS;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecS>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::KnobVecS*);

class StreamReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::StreamReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::StreamReceiver*);

class ControlPort;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::ControlPort>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GNURadio::ControlPort*);

}

}

namespace GNURadio
{

class Knob;
bool operator==(const Knob&, const Knob&);
bool operator<(const Knob&, const Knob&);
::Ice::Object* upCast(::GNURadio::Knob*);
typedef ::IceInternal::Handle< ::GNURadio::Knob> KnobPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::Knob> KnobPrx;
void __patch(KnobPtr&, const ::Ice::ObjectPtr&);

class KnobB;
bool operator==(const KnobB&, const KnobB&);
bool operator<(const KnobB&, const KnobB&);
::Ice::Object* upCast(::GNURadio::KnobB*);
typedef ::IceInternal::Handle< ::GNURadio::KnobB> KnobBPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobB> KnobBPrx;
void __patch(KnobBPtr&, const ::Ice::ObjectPtr&);

class KnobC;
bool operator==(const KnobC&, const KnobC&);
bool operator<(const KnobC&, const KnobC&);
::Ice::Object* upCast(::GNURadio::KnobC*);
typedef ::IceInternal::Handle< ::GNURadio::KnobC> KnobCPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobC> KnobCPrx;
void __patch(KnobCPtr&, const ::Ice::ObjectPtr&);

class KnobI;
bool operator==(const KnobI&, const KnobI&);
bool operator<(const KnobI&, const KnobI&);
::Ice::Object* upCast(::GNURadio::KnobI*);
typedef ::IceInternal::Handle< ::GNURadio::KnobI> KnobIPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobI> KnobIPrx;
void __patch(KnobIPtr&, const ::Ice::ObjectPtr&);

class KnobT;
bool operator==(const KnobT&, const KnobT&);
bool operator<(const KnobT&, const KnobT&);
::Ice::Object* upCast(::GNURadio::KnobT*);
typedef ::IceInternal::Handle< ::GNURadio::KnobT> KnobTPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobT> KnobTPrx;
void __patch(KnobTPtr&, const ::Ice::ObjectPtr&);

class KnobF;
bool operator==(const KnobF&, const KnobF&);
bool operator<(const KnobF&, const KnobF&);
::Ice::Object* upCast(::GNURadio::KnobF*);
typedef ::IceInternal::Handle< ::GNURadio::KnobF> KnobFPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobF> KnobFPrx;
void __patch(KnobFPtr&, const ::Ice::ObjectPtr&);

class KnobD;
bool operator==(const KnobD&, const KnobD&);
bool operator<(const KnobD&, const KnobD&);
::Ice::Object* upCast(::GNURadio::KnobD*);
typedef ::IceInternal::Handle< ::GNURadio::KnobD> KnobDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobD> KnobDPrx;
void __patch(KnobDPtr&, const ::Ice::ObjectPtr&);

class KnobL;
bool operator==(const KnobL&, const KnobL&);
bool operator<(const KnobL&, const KnobL&);
::Ice::Object* upCast(::GNURadio::KnobL*);
typedef ::IceInternal::Handle< ::GNURadio::KnobL> KnobLPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobL> KnobLPrx;
void __patch(KnobLPtr&, const ::Ice::ObjectPtr&);

class KnobS;
bool operator==(const KnobS&, const KnobS&);
bool operator<(const KnobS&, const KnobS&);
::Ice::Object* upCast(::GNURadio::KnobS*);
typedef ::IceInternal::Handle< ::GNURadio::KnobS> KnobSPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobS> KnobSPrx;
void __patch(KnobSPtr&, const ::Ice::ObjectPtr&);

class KnobZ;
bool operator==(const KnobZ&, const KnobZ&);
bool operator<(const KnobZ&, const KnobZ&);
::Ice::Object* upCast(::GNURadio::KnobZ*);
typedef ::IceInternal::Handle< ::GNURadio::KnobZ> KnobZPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobZ> KnobZPrx;
void __patch(KnobZPtr&, const ::Ice::ObjectPtr&);

class KnobVecB;
bool operator==(const KnobVecB&, const KnobVecB&);
bool operator<(const KnobVecB&, const KnobVecB&);
::Ice::Object* upCast(::GNURadio::KnobVecB*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecB> KnobVecBPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecB> KnobVecBPrx;
void __patch(KnobVecBPtr&, const ::Ice::ObjectPtr&);

class KnobVecC;
bool operator==(const KnobVecC&, const KnobVecC&);
bool operator<(const KnobVecC&, const KnobVecC&);
::Ice::Object* upCast(::GNURadio::KnobVecC*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecC> KnobVecCPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecC> KnobVecCPrx;
void __patch(KnobVecCPtr&, const ::Ice::ObjectPtr&);

class KnobVecI;
bool operator==(const KnobVecI&, const KnobVecI&);
bool operator<(const KnobVecI&, const KnobVecI&);
::Ice::Object* upCast(::GNURadio::KnobVecI*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecI> KnobVecIPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecI> KnobVecIPrx;
void __patch(KnobVecIPtr&, const ::Ice::ObjectPtr&);

class KnobVecT;
bool operator==(const KnobVecT&, const KnobVecT&);
bool operator<(const KnobVecT&, const KnobVecT&);
::Ice::Object* upCast(::GNURadio::KnobVecT*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecT> KnobVecTPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecT> KnobVecTPrx;
void __patch(KnobVecTPtr&, const ::Ice::ObjectPtr&);

class KnobVecF;
bool operator==(const KnobVecF&, const KnobVecF&);
bool operator<(const KnobVecF&, const KnobVecF&);
::Ice::Object* upCast(::GNURadio::KnobVecF*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecF> KnobVecFPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecF> KnobVecFPrx;
void __patch(KnobVecFPtr&, const ::Ice::ObjectPtr&);

class KnobVecD;
bool operator==(const KnobVecD&, const KnobVecD&);
bool operator<(const KnobVecD&, const KnobVecD&);
::Ice::Object* upCast(::GNURadio::KnobVecD*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecD> KnobVecDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecD> KnobVecDPrx;
void __patch(KnobVecDPtr&, const ::Ice::ObjectPtr&);

class KnobVecL;
bool operator==(const KnobVecL&, const KnobVecL&);
bool operator<(const KnobVecL&, const KnobVecL&);
::Ice::Object* upCast(::GNURadio::KnobVecL*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecL> KnobVecLPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecL> KnobVecLPrx;
void __patch(KnobVecLPtr&, const ::Ice::ObjectPtr&);

class KnobVecS;
bool operator==(const KnobVecS&, const KnobVecS&);
bool operator<(const KnobVecS&, const KnobVecS&);
::Ice::Object* upCast(::GNURadio::KnobVecS*);
typedef ::IceInternal::Handle< ::GNURadio::KnobVecS> KnobVecSPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::KnobVecS> KnobVecSPrx;
void __patch(KnobVecSPtr&, const ::Ice::ObjectPtr&);

class StreamReceiver;
bool operator==(const StreamReceiver&, const StreamReceiver&);
bool operator<(const StreamReceiver&, const StreamReceiver&);
::Ice::Object* upCast(::GNURadio::StreamReceiver*);
typedef ::IceInternal::Handle< ::GNURadio::StreamReceiver> StreamReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::StreamReceiver> StreamReceiverPrx;
void __patch(StreamReceiverPtr&, const ::Ice::ObjectPtr&);

class ControlPort;
bool operator==(const ControlPort&, const ControlPort&);
bool operator<(const ControlPort&, const ControlPort&);
::Ice::Object* upCast(::GNURadio::ControlPort*);
typedef ::IceInternal::Handle< ::GNURadio::ControlPort> ControlPortPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GNURadio::ControlPort> ControlPortPrx;
void __patch(ControlPortPtr&, const ::Ice::ObjectPtr&);

}

namespace GNURadio
{

struct complex
{
    ::Ice::Float re;
    ::Ice::Float im;
};

typedef ::std::vector<bool> VectorB;

typedef ::std::vector< ::Ice::Byte> VectorC;

typedef ::std::vector< ::Ice::Int> VectorI;

typedef ::std::vector< ::Ice::Float> VectorF;

typedef ::std::vector< ::Ice::Double> VectorD;

typedef ::std::vector< ::std::string> VectorS;

typedef ::std::vector< ::Ice::Long> VectorL;

typedef ::std::vector< ::Ice::Short> VectorT;

enum KnobType
{
    KNOBBOOL,
    KNOBCHAR,
    KNOBINT,
    KNOBFLOAT,
    KNOBDOUBLE,
    KNOBSTRING,
    KNOBLONG,
    KNOBVECBOOL,
    KNOBVECCHAR,
    KNOBVECINT,
    KNOBVECFLOAT,
    KNOBVECDOUBLE,
    KNOBVECSTRING,
    KNOBVECLONG,
    KNOBSHORT
};

const ::Ice::Int DISPNULL = 0;

const ::Ice::Int DISPTIME = 1;

const ::Ice::Int DISPXY = 2;

const ::Ice::Int DISPPSD = 4;

const ::Ice::Int DISPSPEC = 8;

const ::Ice::Int DISPRAST = 16;

const ::Ice::Int DISPOPTCPLX = 256;

const ::Ice::Int DISPOPTLOG = 512;

const ::Ice::Int DISPOPTSTEM = 1024;

const ::Ice::Int DISPOPTSTRIP = 2048;

const ::Ice::Int DISPOPTSCATTER = 4096;

struct KnobProp
{
    ::GNURadio::KnobType type;
    ::std::string units;
    ::std::string description;
    ::Ice::Int display;
    ::GNURadio::KnobPtr min;
    ::GNURadio::KnobPtr max;
    ::GNURadio::KnobPtr defaultvalue;
};

typedef ::std::vector< ::std::string> KnobIDList;

typedef ::std::map< ::std::string, ::GNURadio::KnobPtr> KnobMap;

typedef ::std::map< ::std::string, ::GNURadio::KnobProp> KnobPropMap;

typedef ::std::map< ::std::string, ::std::string> WaveformArgMap;

}

namespace Ice
{
template<>
struct StreamableTraits< ::GNURadio::complex>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::GNURadio::complex, S>
{
    static void write(S* __os, const ::GNURadio::complex& v)
    {
        __os->write(v.re);
        __os->write(v.im);
    }
};

template<class S>
struct StreamReader< ::GNURadio::complex, S>
{
    static void read(S* __is, ::GNURadio::complex& v)
    {
        __is->read(v.re);
        __is->read(v.im);
    }
};

template<>
struct StreamableTraits< ::GNURadio::KnobType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 14;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::GNURadio::KnobProp>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::GNURadio::KnobProp, S>
{
    static void write(S* __os, const ::GNURadio::KnobProp& v)
    {
        __os->write(v.type);
        __os->write(v.units);
        __os->write(v.description);
        __os->write(v.display);
        __os->write(v.min);
        __os->write(v.max);
        __os->write(v.defaultvalue);
    }
};

template<class S>
struct StreamReader< ::GNURadio::KnobProp, S>
{
    static void read(S* __is, ::GNURadio::KnobProp& v)
    {
        __is->read(v.type);
        __is->read(v.units);
        __is->read(v.description);
        __is->read(v.display);
        __is->read(v.min);
        __is->read(v.max);
        __is->read(v.defaultvalue);
    }
};

}

namespace GNURadio
{

class Callback_StreamReceiver_push_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StreamReceiver_push_Base> Callback_StreamReceiver_pushPtr;

class Callback_ControlPort_set_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ControlPort_set_Base> Callback_ControlPort_setPtr;

class Callback_ControlPort_get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ControlPort_get_Base> Callback_ControlPort_getPtr;

class Callback_ControlPort_getRe_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ControlPort_getRe_Base> Callback_ControlPort_getRePtr;

class Callback_ControlPort_properties_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ControlPort_properties_Base> Callback_ControlPort_propertiesPtr;

class Callback_ControlPort_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ControlPort_shutdown_Base> Callback_ControlPort_shutdownPtr;

}

namespace IceProxy
{

namespace GNURadio
{

class Knob : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Knob> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_secure(bool __secure) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_twoway() const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_oneway() const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_batchOneway() const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_datagram() const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_batchDatagram() const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_compress(bool __compress) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Knob> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Knob*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobB : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobB> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_twoway() const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_oneway() const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_batchOneway() const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_datagram() const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_batchDatagram() const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobB> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobB*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobC : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobC> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_twoway() const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_oneway() const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_batchOneway() const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_datagram() const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_batchDatagram() const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobC> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobC*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobI : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobI> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_twoway() const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_oneway() const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_batchOneway() const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_datagram() const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_batchDatagram() const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobI> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobI*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobT : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobT> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_twoway() const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_oneway() const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_batchOneway() const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_datagram() const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_batchDatagram() const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobT> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobT*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobF : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobF> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_twoway() const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_oneway() const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_batchOneway() const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_datagram() const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_batchDatagram() const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobF> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobF*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobD : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobD> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_twoway() const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_oneway() const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_batchOneway() const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_datagram() const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_batchDatagram() const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobD> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobD*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobL : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobL> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_twoway() const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_oneway() const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_batchOneway() const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_datagram() const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_batchDatagram() const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobL> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobL*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobS : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobS> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_twoway() const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_oneway() const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_batchOneway() const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_datagram() const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_batchDatagram() const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobS> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobS*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobZ : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobZ> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_twoway() const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_oneway() const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_batchOneway() const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_datagram() const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_batchDatagram() const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobZ> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobZ*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecB : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_twoway() const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_oneway() const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_datagram() const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecB> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecB*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecC : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_twoway() const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_oneway() const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_datagram() const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecC> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecC*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecI : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_twoway() const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_oneway() const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_datagram() const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecI> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecI*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecT : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_twoway() const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_oneway() const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_datagram() const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecT> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecT*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecF : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_twoway() const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_oneway() const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_datagram() const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecF> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecF*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecD : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_twoway() const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_oneway() const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_datagram() const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecD> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecD*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecL : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_twoway() const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_oneway() const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_datagram() const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecL> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecL*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class KnobVecS : virtual public ::IceProxy::GNURadio::Knob
{
public:
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_secure(bool __secure) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_twoway() const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_oneway() const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_batchOneway() const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_datagram() const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_batchDatagram() const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_compress(bool __compress) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KnobVecS> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KnobVecS*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class StreamReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    void push(const ::GNURadio::VectorC& data)
    {
        push(data, 0);
    }
    void push(const ::GNURadio::VectorC& data, const ::Ice::Context& __ctx)
    {
        push(data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_push(const ::GNURadio::VectorC& data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_push(data, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_push(const ::GNURadio::VectorC& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_push(data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_push(const ::GNURadio::VectorC& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_push(data, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_push(const ::GNURadio::VectorC& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_push(data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC& data)
    {
        return begin_push(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC& data, const ::Ice::Context& __ctx)
    {
        return begin_push(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_push(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_push(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC& data, const ::GNURadio::Callback_StreamReceiver_pushPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_push(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC& data, const ::Ice::Context& __ctx, const ::GNURadio::Callback_StreamReceiver_pushPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_push(data, &__ctx, __del, __cookie);
    }

    void end_push(const ::Ice::AsyncResultPtr&);
    
private:

    void push(const ::GNURadio::VectorC&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_push(const ::GNURadio::VectorC&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_twoway() const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_oneway() const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_batchOneway() const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_datagram() const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<StreamReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<StreamReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ControlPort : virtual public ::IceProxy::Ice::Object
{
public:

    void set(const ::GNURadio::KnobMap& knobs)
    {
        set(knobs, 0);
    }
    void set(const ::GNURadio::KnobMap& knobs, const ::Ice::Context& __ctx)
    {
        set(knobs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_set(const ::GNURadio::KnobMap& knobs, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_set(knobs, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_set(const ::GNURadio::KnobMap& knobs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_set(knobs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_set(const ::GNURadio::KnobMap& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_set(knobs, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_set(const ::GNURadio::KnobMap& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_set(knobs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap& knobs)
    {
        return begin_set(knobs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap& knobs, const ::Ice::Context& __ctx)
    {
        return begin_set(knobs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap& knobs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap& knobs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(knobs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap& knobs, const ::GNURadio::Callback_ControlPort_setPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap& knobs, const ::Ice::Context& __ctx, const ::GNURadio::Callback_ControlPort_setPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_set(knobs, &__ctx, __del, __cookie);
    }

    void end_set(const ::Ice::AsyncResultPtr&);
    
private:

    void set(const ::GNURadio::KnobMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_set(const ::GNURadio::KnobMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList& knobs)
    {
        return get(knobs, 0);
    }
    ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx)
    {
        return get(knobs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_get(const ::GNURadio::KnobIDList& knobs, const ::IceInternal::Function<void (const ::GNURadio::KnobMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(knobs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::GNURadio::KnobIDList& knobs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(knobs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::GNURadio::KnobMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(knobs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(knobs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GNURadio::KnobMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::GNURadio::KnobMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
                ::GNURadio::KnobMap __ret;
                try
                {
                    __ret = __proxy->end_get(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::GNURadio::KnobMap&)> _response;
        };
        return begin_get(knobs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList& knobs)
    {
        return begin_get(knobs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx)
    {
        return begin_get(knobs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(knobs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList& knobs, const ::GNURadio::Callback_ControlPort_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::GNURadio::Callback_ControlPort_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(knobs, &__ctx, __del, __cookie);
    }

    ::GNURadio::KnobMap end_get(const ::Ice::AsyncResultPtr&);
    
private:

    ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_get(const ::GNURadio::KnobIDList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList& knobs)
    {
        return getRe(knobs, 0);
    }
    ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx)
    {
        return getRe(knobs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::IceInternal::Function<void (const ::GNURadio::KnobMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRe(knobs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRe(knobs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::GNURadio::KnobMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRe(knobs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRe(knobs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GNURadio::KnobMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::GNURadio::KnobMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
                ::GNURadio::KnobMap __ret;
                try
                {
                    __ret = __proxy->end_getRe(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::GNURadio::KnobMap&)> _response;
        };
        return begin_getRe(knobs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList& knobs)
    {
        return begin_getRe(knobs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx)
    {
        return begin_getRe(knobs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRe(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRe(knobs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::GNURadio::Callback_ControlPort_getRePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRe(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::GNURadio::Callback_ControlPort_getRePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRe(knobs, &__ctx, __del, __cookie);
    }

    ::GNURadio::KnobMap end_getRe(const ::Ice::AsyncResultPtr&);
    
private:

    ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRe(const ::GNURadio::KnobIDList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList& knobs)
    {
        return properties(knobs, 0);
    }
    ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx)
    {
        return properties(knobs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_properties(const ::GNURadio::KnobIDList& knobs, const ::IceInternal::Function<void (const ::GNURadio::KnobPropMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_properties(knobs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_properties(const ::GNURadio::KnobIDList& knobs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_properties(knobs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::GNURadio::KnobPropMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_properties(knobs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_properties(knobs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GNURadio::KnobPropMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::GNURadio::KnobPropMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
                ::GNURadio::KnobPropMap __ret;
                try
                {
                    __ret = __proxy->end_properties(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::GNURadio::KnobPropMap&)> _response;
        };
        return begin_properties(knobs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList& knobs)
    {
        return begin_properties(knobs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx)
    {
        return begin_properties(knobs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_properties(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_properties(knobs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList& knobs, const ::GNURadio::Callback_ControlPort_propertiesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_properties(knobs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList& knobs, const ::Ice::Context& __ctx, const ::GNURadio::Callback_ControlPort_propertiesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_properties(knobs, &__ctx, __del, __cookie);
    }

    ::GNURadio::KnobPropMap end_properties(const ::Ice::AsyncResultPtr&);
    
private:

    ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_properties(const ::GNURadio::KnobIDList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::GNURadio::Callback_ControlPort_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::GNURadio::Callback_ControlPort_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ControlPort> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_secure(bool __secure) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_twoway() const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_oneway() const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_batchOneway() const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_datagram() const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_batchDatagram() const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_compress(bool __compress) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ControlPort> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ControlPort*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace GNURadio
{

class Knob : virtual public ::IceDelegate::Ice::Object
{
public:
};

class KnobB : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobC : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobI : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobT : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobF : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobD : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobL : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobS : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobZ : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecB : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecC : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecI : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecT : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecF : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecD : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecL : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class KnobVecS : virtual public ::IceDelegate::GNURadio::Knob
{
public:
};

class StreamReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void push(const ::GNURadio::VectorC&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ControlPort : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void set(const ::GNURadio::KnobMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace GNURadio
{

class Knob : virtual public ::IceDelegate::GNURadio::Knob,
             virtual public ::IceDelegateM::Ice::Object
{
public:
};

class KnobB : virtual public ::IceDelegate::GNURadio::KnobB,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobC : virtual public ::IceDelegate::GNURadio::KnobC,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobI : virtual public ::IceDelegate::GNURadio::KnobI,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobT : virtual public ::IceDelegate::GNURadio::KnobT,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobF : virtual public ::IceDelegate::GNURadio::KnobF,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobD : virtual public ::IceDelegate::GNURadio::KnobD,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobL : virtual public ::IceDelegate::GNURadio::KnobL,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobS : virtual public ::IceDelegate::GNURadio::KnobS,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobZ : virtual public ::IceDelegate::GNURadio::KnobZ,
              virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecB : virtual public ::IceDelegate::GNURadio::KnobVecB,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecC : virtual public ::IceDelegate::GNURadio::KnobVecC,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecI : virtual public ::IceDelegate::GNURadio::KnobVecI,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecT : virtual public ::IceDelegate::GNURadio::KnobVecT,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecF : virtual public ::IceDelegate::GNURadio::KnobVecF,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecD : virtual public ::IceDelegate::GNURadio::KnobVecD,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecL : virtual public ::IceDelegate::GNURadio::KnobVecL,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class KnobVecS : virtual public ::IceDelegate::GNURadio::KnobVecS,
                 virtual public ::IceDelegateM::GNURadio::Knob
{
public:
};

class StreamReceiver : virtual public ::IceDelegate::GNURadio::StreamReceiver,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void push(const ::GNURadio::VectorC&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ControlPort : virtual public ::IceDelegate::GNURadio::ControlPort,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void set(const ::GNURadio::KnobMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace GNURadio
{

class Knob : virtual public ::IceDelegate::GNURadio::Knob,
             virtual public ::IceDelegateD::Ice::Object
{
public:
};

class KnobB : virtual public ::IceDelegate::GNURadio::KnobB,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobC : virtual public ::IceDelegate::GNURadio::KnobC,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobI : virtual public ::IceDelegate::GNURadio::KnobI,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobT : virtual public ::IceDelegate::GNURadio::KnobT,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobF : virtual public ::IceDelegate::GNURadio::KnobF,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobD : virtual public ::IceDelegate::GNURadio::KnobD,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobL : virtual public ::IceDelegate::GNURadio::KnobL,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobS : virtual public ::IceDelegate::GNURadio::KnobS,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobZ : virtual public ::IceDelegate::GNURadio::KnobZ,
              virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecB : virtual public ::IceDelegate::GNURadio::KnobVecB,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecC : virtual public ::IceDelegate::GNURadio::KnobVecC,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecI : virtual public ::IceDelegate::GNURadio::KnobVecI,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecT : virtual public ::IceDelegate::GNURadio::KnobVecT,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecF : virtual public ::IceDelegate::GNURadio::KnobVecF,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecD : virtual public ::IceDelegate::GNURadio::KnobVecD,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecL : virtual public ::IceDelegate::GNURadio::KnobVecL,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class KnobVecS : virtual public ::IceDelegate::GNURadio::KnobVecS,
                 virtual public ::IceDelegateD::GNURadio::Knob
{
public:
};

class StreamReceiver : virtual public ::IceDelegate::GNURadio::StreamReceiver,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void push(const ::GNURadio::VectorC&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ControlPort : virtual public ::IceDelegate::GNURadio::ControlPort,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void set(const ::GNURadio::KnobMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace GNURadio
{

class Knob : virtual public ::Ice::Object
{
public:

    typedef KnobPrx ProxyType;
    typedef KnobPtr PointerType;

    Knob()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~Knob() {}

    friend class Knob__staticInit;
};

class Knob__staticInit
{
public:

    ::GNURadio::Knob _init;
};

static Knob__staticInit _Knob_init;

inline bool operator==(const Knob& l, const Knob& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Knob& l, const Knob& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobB : public ::GNURadio::Knob
{
public:

    typedef KnobBPrx ProxyType;
    typedef KnobBPtr PointerType;

    KnobB()
    {
    }

    explicit KnobB(bool __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    bool value;

protected:

    virtual ~KnobB() {}
};

inline bool operator==(const KnobB& l, const KnobB& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobB& l, const KnobB& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobC : public ::GNURadio::Knob
{
public:

    typedef KnobCPrx ProxyType;
    typedef KnobCPtr PointerType;

    KnobC()
    {
    }

    explicit KnobC(::Ice::Byte __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::Ice::Byte value;

protected:

    virtual ~KnobC() {}
};

inline bool operator==(const KnobC& l, const KnobC& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobC& l, const KnobC& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobI : public ::GNURadio::Knob
{
public:

    typedef KnobIPrx ProxyType;
    typedef KnobIPtr PointerType;

    KnobI()
    {
    }

    explicit KnobI(::Ice::Int __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::Ice::Int value;

protected:

    virtual ~KnobI() {}
};

inline bool operator==(const KnobI& l, const KnobI& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobI& l, const KnobI& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobT : public ::GNURadio::Knob
{
public:

    typedef KnobTPrx ProxyType;
    typedef KnobTPtr PointerType;

    KnobT()
    {
    }

    explicit KnobT(::Ice::Short __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::Ice::Short value;

protected:

    virtual ~KnobT() {}
};

inline bool operator==(const KnobT& l, const KnobT& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobT& l, const KnobT& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobF : public ::GNURadio::Knob
{
public:

    typedef KnobFPrx ProxyType;
    typedef KnobFPtr PointerType;

    KnobF()
    {
    }

    explicit KnobF(::Ice::Float __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::Ice::Float value;

protected:

    virtual ~KnobF() {}
};

inline bool operator==(const KnobF& l, const KnobF& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobF& l, const KnobF& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobD : public ::GNURadio::Knob
{
public:

    typedef KnobDPrx ProxyType;
    typedef KnobDPtr PointerType;

    KnobD()
    {
    }

    explicit KnobD(::Ice::Double __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::Ice::Double value;

protected:

    virtual ~KnobD() {}
};

inline bool operator==(const KnobD& l, const KnobD& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobD& l, const KnobD& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobL : public ::GNURadio::Knob
{
public:

    typedef KnobLPrx ProxyType;
    typedef KnobLPtr PointerType;

    KnobL()
    {
    }

    explicit KnobL(::Ice::Long __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::Ice::Long value;

protected:

    virtual ~KnobL() {}
};

inline bool operator==(const KnobL& l, const KnobL& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobL& l, const KnobL& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobS : public ::GNURadio::Knob
{
public:

    typedef KnobSPrx ProxyType;
    typedef KnobSPtr PointerType;

    KnobS()
    {
    }

    explicit KnobS(const ::std::string& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::std::string value;

protected:

    virtual ~KnobS() {}
};

inline bool operator==(const KnobS& l, const KnobS& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobS& l, const KnobS& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobZ : public ::GNURadio::Knob
{
public:

    typedef KnobZPrx ProxyType;
    typedef KnobZPtr PointerType;

    KnobZ()
    {
    }

    explicit KnobZ(const ::GNURadio::complex& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::complex value;

protected:

    virtual ~KnobZ() {}
};

inline bool operator==(const KnobZ& l, const KnobZ& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobZ& l, const KnobZ& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecB : public ::GNURadio::Knob
{
public:

    typedef KnobVecBPrx ProxyType;
    typedef KnobVecBPtr PointerType;

    KnobVecB()
    {
    }

    explicit KnobVecB(const ::GNURadio::VectorB& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorB value;

protected:

    virtual ~KnobVecB() {}
};

inline bool operator==(const KnobVecB& l, const KnobVecB& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecB& l, const KnobVecB& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecC : public ::GNURadio::Knob
{
public:

    typedef KnobVecCPrx ProxyType;
    typedef KnobVecCPtr PointerType;

    KnobVecC()
    {
    }

    explicit KnobVecC(const ::GNURadio::VectorC& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorC value;

protected:

    virtual ~KnobVecC() {}
};

inline bool operator==(const KnobVecC& l, const KnobVecC& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecC& l, const KnobVecC& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecI : public ::GNURadio::Knob
{
public:

    typedef KnobVecIPrx ProxyType;
    typedef KnobVecIPtr PointerType;

    KnobVecI()
    {
    }

    explicit KnobVecI(const ::GNURadio::VectorI& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorI value;

protected:

    virtual ~KnobVecI() {}
};

inline bool operator==(const KnobVecI& l, const KnobVecI& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecI& l, const KnobVecI& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecT : public ::GNURadio::Knob
{
public:

    typedef KnobVecTPrx ProxyType;
    typedef KnobVecTPtr PointerType;

    KnobVecT()
    {
    }

    explicit KnobVecT(const ::GNURadio::VectorT& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorT value;

protected:

    virtual ~KnobVecT() {}
};

inline bool operator==(const KnobVecT& l, const KnobVecT& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecT& l, const KnobVecT& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecF : public ::GNURadio::Knob
{
public:

    typedef KnobVecFPrx ProxyType;
    typedef KnobVecFPtr PointerType;

    KnobVecF()
    {
    }

    explicit KnobVecF(const ::GNURadio::VectorF& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorF value;

protected:

    virtual ~KnobVecF() {}
};

inline bool operator==(const KnobVecF& l, const KnobVecF& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecF& l, const KnobVecF& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecD : public ::GNURadio::Knob
{
public:

    typedef KnobVecDPrx ProxyType;
    typedef KnobVecDPtr PointerType;

    KnobVecD()
    {
    }

    explicit KnobVecD(const ::GNURadio::VectorD& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorD value;

protected:

    virtual ~KnobVecD() {}
};

inline bool operator==(const KnobVecD& l, const KnobVecD& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecD& l, const KnobVecD& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecL : public ::GNURadio::Knob
{
public:

    typedef KnobVecLPrx ProxyType;
    typedef KnobVecLPtr PointerType;

    KnobVecL()
    {
    }

    explicit KnobVecL(const ::GNURadio::VectorL& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorL value;

protected:

    virtual ~KnobVecL() {}
};

inline bool operator==(const KnobVecL& l, const KnobVecL& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecL& l, const KnobVecL& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class KnobVecS : public ::GNURadio::Knob
{
public:

    typedef KnobVecSPrx ProxyType;
    typedef KnobVecSPtr PointerType;

    KnobVecS()
    {
    }

    explicit KnobVecS(const ::GNURadio::VectorS& __ice_value) :
        value(__ice_value)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::GNURadio::Knob::__writeImpl;
    using ::GNURadio::Knob::__readImpl;
    #endif

public:

    ::GNURadio::VectorS value;

protected:

    virtual ~KnobVecS() {}
};

inline bool operator==(const KnobVecS& l, const KnobVecS& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KnobVecS& l, const KnobVecS& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class StreamReceiver : virtual public ::Ice::Object
{
public:

    typedef StreamReceiverPrx ProxyType;
    typedef StreamReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void push(const ::GNURadio::VectorC&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___push(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const StreamReceiver& l, const StreamReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const StreamReceiver& l, const StreamReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ControlPort : virtual public ::Ice::Object
{
public:

    typedef ControlPortPrx ProxyType;
    typedef ControlPortPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void set(const ::GNURadio::KnobMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___set(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::GNURadio::KnobMap get(const ::GNURadio::KnobIDList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::GNURadio::KnobMap getRe(const ::GNURadio::KnobIDList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRe(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::GNURadio::KnobPropMap properties(const ::GNURadio::KnobIDList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___properties(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ControlPort& l, const ControlPort& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ControlPort& l, const ControlPort& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GNURadio
{

template<class T>
class CallbackNC_StreamReceiver_push : public Callback_StreamReceiver_push_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StreamReceiver_push(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StreamReceiver_push<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StreamReceiver_push<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StreamReceiver_push<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StreamReceiver_push<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StreamReceiver_push : public Callback_StreamReceiver_push_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StreamReceiver_push(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StreamReceiver_push<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StreamReceiver_push<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StreamReceiver_push<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StreamReceiver_pushPtr
newCallback_StreamReceiver_push(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StreamReceiver_push<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ControlPort_set : public Callback_ControlPort_set_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ControlPort_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ControlPort_setPtr
newCallback_ControlPort_set(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_set<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_setPtr
newCallback_ControlPort_set(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_set<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ControlPort_setPtr
newCallback_ControlPort_set(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_set<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_setPtr
newCallback_ControlPort_set(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_set<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ControlPort_set : public Callback_ControlPort_set_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ControlPort_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ControlPort_setPtr
newCallback_ControlPort_set(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_set<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_setPtr
newCallback_ControlPort_set(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_set<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_setPtr
newCallback_ControlPort_set(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_set<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_setPtr
newCallback_ControlPort_set(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_set<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ControlPort_get : public Callback_ControlPort_get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GNURadio::KnobMap&);

    CallbackNC_ControlPort_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
        ::GNURadio::KnobMap __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ControlPort_getPtr
newCallback_ControlPort_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GNURadio::KnobMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_getPtr
newCallback_ControlPort_get(T* instance, void (T::*cb)(const ::GNURadio::KnobMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ControlPort_get : public Callback_ControlPort_get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GNURadio::KnobMap&, const CT&);

    Callback_ControlPort_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
        ::GNURadio::KnobMap __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ControlPort_getPtr
newCallback_ControlPort_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GNURadio::KnobMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_getPtr
newCallback_ControlPort_get(T* instance, void (T::*cb)(const ::GNURadio::KnobMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ControlPort_getRe : public Callback_ControlPort_getRe_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GNURadio::KnobMap&);

    CallbackNC_ControlPort_getRe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
        ::GNURadio::KnobMap __ret;
        try
        {
            __ret = __proxy->end_getRe(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ControlPort_getRePtr
newCallback_ControlPort_getRe(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GNURadio::KnobMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_getRe<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_getRePtr
newCallback_ControlPort_getRe(T* instance, void (T::*cb)(const ::GNURadio::KnobMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_getRe<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ControlPort_getRe : public Callback_ControlPort_getRe_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GNURadio::KnobMap&, const CT&);

    Callback_ControlPort_getRe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
        ::GNURadio::KnobMap __ret;
        try
        {
            __ret = __proxy->end_getRe(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ControlPort_getRePtr
newCallback_ControlPort_getRe(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GNURadio::KnobMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_getRe<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_getRePtr
newCallback_ControlPort_getRe(T* instance, void (T::*cb)(const ::GNURadio::KnobMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_getRe<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ControlPort_properties : public Callback_ControlPort_properties_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GNURadio::KnobPropMap&);

    CallbackNC_ControlPort_properties(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
        ::GNURadio::KnobPropMap __ret;
        try
        {
            __ret = __proxy->end_properties(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ControlPort_propertiesPtr
newCallback_ControlPort_properties(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GNURadio::KnobPropMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_properties<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_propertiesPtr
newCallback_ControlPort_properties(T* instance, void (T::*cb)(const ::GNURadio::KnobPropMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_properties<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ControlPort_properties : public Callback_ControlPort_properties_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GNURadio::KnobPropMap&, const CT&);

    Callback_ControlPort_properties(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GNURadio::ControlPortPrx __proxy = ::GNURadio::ControlPortPrx::uncheckedCast(__result->getProxy());
        ::GNURadio::KnobPropMap __ret;
        try
        {
            __ret = __proxy->end_properties(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ControlPort_propertiesPtr
newCallback_ControlPort_properties(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GNURadio::KnobPropMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_properties<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_propertiesPtr
newCallback_ControlPort_properties(T* instance, void (T::*cb)(const ::GNURadio::KnobPropMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_properties<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ControlPort_shutdown : public Callback_ControlPort_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ControlPort_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ControlPort_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ControlPort_shutdown : public Callback_ControlPort_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ControlPort_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ControlPort_shutdownPtr
newCallback_ControlPort_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ControlPort_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
