# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_trellis_swig', [dirname(__file__)])
        except ImportError:
            import _trellis_swig
            return _trellis_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_trellis_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _trellis_swig = swig_import_helper()
    del swig_import_helper
else:
    import _trellis_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _trellis_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _trellis_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _trellis_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _trellis_swig.high_res_timer_epoch()
TRELLIS_EUCLIDEAN = _trellis_swig.TRELLIS_EUCLIDEAN
TRELLIS_HARD_SYMBOL = _trellis_swig.TRELLIS_HARD_SYMBOL
TRELLIS_HARD_BIT = _trellis_swig.TRELLIS_HARD_BIT
class constellation(object):
    """Proxy of C++ gr::digital::constellation class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _trellis_swig.delete_constellation
    __del__ = lambda self : None;
    def map_to_points(self, *args, **kwargs):
        """map_to_points(constellation self, unsigned int value, gr_complex * points)"""
        return _trellis_swig.constellation_map_to_points(self, *args, **kwargs)

    def map_to_points_v(self, *args, **kwargs):
        """map_to_points_v(constellation self, unsigned int value) -> pmt_vector_cfloat"""
        return _trellis_swig.constellation_map_to_points_v(self, *args, **kwargs)

    def decision_maker(self, *args, **kwargs):
        """decision_maker(constellation self, gr_complex const * sample) -> unsigned int"""
        return _trellis_swig.constellation_decision_maker(self, *args, **kwargs)

    def decision_maker_v(self, *args, **kwargs):
        """decision_maker_v(constellation self, pmt_vector_cfloat sample) -> unsigned int"""
        return _trellis_swig.constellation_decision_maker_v(self, *args, **kwargs)

    def decision_maker_pe(self, *args, **kwargs):
        """decision_maker_pe(constellation self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _trellis_swig.constellation_decision_maker_pe(self, *args, **kwargs)

    def calc_metric(self, *args, **kwargs):
        """calc_metric(constellation self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _trellis_swig.constellation_calc_metric(self, *args, **kwargs)

    def calc_euclidean_metric(self, *args, **kwargs):
        """calc_euclidean_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _trellis_swig.constellation_calc_euclidean_metric(self, *args, **kwargs)

    def calc_hard_symbol_metric(self, *args, **kwargs):
        """calc_hard_symbol_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _trellis_swig.constellation_calc_hard_symbol_metric(self, *args, **kwargs)

    def points(self):
        """points(constellation self) -> pmt_vector_cfloat"""
        return _trellis_swig.constellation_points(self)

    def s_points(self):
        """s_points(constellation self) -> pmt_vector_cfloat"""
        return _trellis_swig.constellation_s_points(self)

    def v_points(self):
        """v_points(constellation self) -> gr_vector_vector_complexf"""
        return _trellis_swig.constellation_v_points(self)

    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation self) -> bool"""
        return _trellis_swig.constellation_apply_pre_diff_code(self)

    def set_pre_diff_code(self, *args, **kwargs):
        """set_pre_diff_code(constellation self, bool a)"""
        return _trellis_swig.constellation_set_pre_diff_code(self, *args, **kwargs)

    def pre_diff_code(self):
        """pre_diff_code(constellation self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.constellation_pre_diff_code(self)

    def rotational_symmetry(self):
        """rotational_symmetry(constellation self) -> unsigned int"""
        return _trellis_swig.constellation_rotational_symmetry(self)

    def dimensionality(self):
        """dimensionality(constellation self) -> unsigned int"""
        return _trellis_swig.constellation_dimensionality(self)

    def bits_per_symbol(self):
        """bits_per_symbol(constellation self) -> unsigned int"""
        return _trellis_swig.constellation_bits_per_symbol(self)

    def arity(self):
        """arity(constellation self) -> unsigned int"""
        return _trellis_swig.constellation_arity(self)

    def base(self):
        """base(constellation self) -> gr::digital::constellation_sptr"""
        return _trellis_swig.constellation_base(self)

    def as_pmt(self):
        """as_pmt(constellation self) -> swig_int_ptr"""
        return _trellis_swig.constellation_as_pmt(self)

    def gen_soft_dec_lut(self, *args, **kwargs):
        """gen_soft_dec_lut(constellation self, int precision, float npwr=1.0)"""
        return _trellis_swig.constellation_gen_soft_dec_lut(self, *args, **kwargs)

    def calc_soft_dec(self, *args, **kwargs):
        """calc_soft_dec(constellation self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _trellis_swig.constellation_calc_soft_dec(self, *args, **kwargs)

    def set_soft_dec_lut(self, *args, **kwargs):
        """
        set_soft_dec_lut(constellation self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, 
            int precision)
        """
        return _trellis_swig.constellation_set_soft_dec_lut(self, *args, **kwargs)

    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation self) -> bool"""
        return _trellis_swig.constellation_has_soft_dec_lut(self)

    def soft_decision_maker(self, *args, **kwargs):
        """soft_decision_maker(constellation self, gr_complex sample) -> pmt_vector_float"""
        return _trellis_swig.constellation_soft_decision_maker(self, *args, **kwargs)

constellation_swigregister = _trellis_swig.constellation_swigregister
constellation_swigregister(constellation)

class constellation_calcdist(constellation):
    """Proxy of C++ gr::digital::constellation_calcdist class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr
        """
        return _trellis_swig.constellation_calcdist_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_calcdist
    __del__ = lambda self : None;
constellation_calcdist_swigregister = _trellis_swig.constellation_calcdist_swigregister
constellation_calcdist_swigregister(constellation_calcdist)

def constellation_calcdist_make(*args, **kwargs):
  """
    constellation_calcdist_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr
    """
  return _trellis_swig.constellation_calcdist_make(*args, **kwargs)

class constellation_sector(constellation):
    """Proxy of C++ gr::digital::constellation_sector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _trellis_swig.delete_constellation_sector
    __del__ = lambda self : None;
constellation_sector_swigregister = _trellis_swig.constellation_sector_swigregister
constellation_sector_swigregister(constellation_sector)

class constellation_rect(constellation_sector):
    """Proxy of C++ gr::digital::constellation_rect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
            float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr
        """
        return _trellis_swig.constellation_rect_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_rect
    __del__ = lambda self : None;
constellation_rect_swigregister = _trellis_swig.constellation_rect_swigregister
constellation_rect_swigregister(constellation_rect)

def constellation_rect_make(*args, **kwargs):
  """
    constellation_rect_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
        float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr
    """
  return _trellis_swig.constellation_rect_make(*args, **kwargs)

class constellation_expl_rect(constellation_rect):
    """Proxy of C++ gr::digital::constellation_expl_rect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
            float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr
        """
        return _trellis_swig.constellation_expl_rect_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_expl_rect
    __del__ = lambda self : None;
constellation_expl_rect_swigregister = _trellis_swig.constellation_expl_rect_swigregister
constellation_expl_rect_swigregister(constellation_expl_rect)

def constellation_expl_rect_make(*args, **kwargs):
  """
    constellation_expl_rect_make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, 
        float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr
    """
  return _trellis_swig.constellation_expl_rect_make(*args, **kwargs)

class constellation_psk(constellation_sector):
    """Proxy of C++ gr::digital::constellation_psk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
            unsigned int n_sectors) -> gr::digital::constellation_psk::sptr
        """
        return _trellis_swig.constellation_psk_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_psk
    __del__ = lambda self : None;
constellation_psk_swigregister = _trellis_swig.constellation_psk_swigregister
constellation_psk_swigregister(constellation_psk)

def constellation_psk_make(*args, **kwargs):
  """
    constellation_psk_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, 
        unsigned int n_sectors) -> gr::digital::constellation_psk::sptr
    """
  return _trellis_swig.constellation_psk_make(*args, **kwargs)

class constellation_bpsk(constellation):
    """Proxy of C++ gr::digital::constellation_bpsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_bpsk::sptr"""
        return _trellis_swig.constellation_bpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_bpsk
    __del__ = lambda self : None;
constellation_bpsk_swigregister = _trellis_swig.constellation_bpsk_swigregister
constellation_bpsk_swigregister(constellation_bpsk)

def constellation_bpsk_make():
  """constellation_bpsk_make() -> gr::digital::constellation_bpsk::sptr"""
  return _trellis_swig.constellation_bpsk_make()

class constellation_qpsk(constellation):
    """Proxy of C++ gr::digital::constellation_qpsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_qpsk::sptr"""
        return _trellis_swig.constellation_qpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_qpsk
    __del__ = lambda self : None;
constellation_qpsk_swigregister = _trellis_swig.constellation_qpsk_swigregister
constellation_qpsk_swigregister(constellation_qpsk)

def constellation_qpsk_make():
  """constellation_qpsk_make() -> gr::digital::constellation_qpsk::sptr"""
  return _trellis_swig.constellation_qpsk_make()

class constellation_dqpsk(constellation):
    """Proxy of C++ gr::digital::constellation_dqpsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_dqpsk::sptr"""
        return _trellis_swig.constellation_dqpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_dqpsk
    __del__ = lambda self : None;
constellation_dqpsk_swigregister = _trellis_swig.constellation_dqpsk_swigregister
constellation_dqpsk_swigregister(constellation_dqpsk)

def constellation_dqpsk_make():
  """constellation_dqpsk_make() -> gr::digital::constellation_dqpsk::sptr"""
  return _trellis_swig.constellation_dqpsk_make()

class constellation_8psk(constellation):
    """Proxy of C++ gr::digital::constellation_8psk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> gr::digital::constellation_8psk::sptr"""
        return _trellis_swig.constellation_8psk_make()

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_8psk
    __del__ = lambda self : None;
constellation_8psk_swigregister = _trellis_swig.constellation_8psk_swigregister
constellation_8psk_swigregister(constellation_8psk)

def constellation_8psk_make():
  """constellation_8psk_make() -> gr::digital::constellation_8psk::sptr"""
  return _trellis_swig.constellation_8psk_make()

TRELLIS_MIN_SUM = _trellis_swig.TRELLIS_MIN_SUM
TRELLIS_SUM_PRODUCT = _trellis_swig.TRELLIS_SUM_PRODUCT
class fsm(object):
    """
    Finite State Machine Specification class.

    An instance of this class represents a finite state machine specification (FSMS) rather than the FSM itself. It particular the state of the FSM is not stored within an instance of this class.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(gr::trellis::fsm self) -> fsm
        __init__(gr::trellis::fsm self, fsm FSM) -> fsm
        __init__(gr::trellis::fsm self, int I, int S, int O, std::vector< int,std::allocator< int > > const & NS, std::vector< int,std::allocator< int > > const & OS) -> fsm
        __init__(gr::trellis::fsm self, char const * name) -> fsm
        __init__(gr::trellis::fsm self, int k, int n, std::vector< int,std::allocator< int > > const & G) -> fsm
        __init__(gr::trellis::fsm self, int mod_size, int ch_length) -> fsm
        __init__(gr::trellis::fsm self, int P, int M, int L) -> fsm
        __init__(gr::trellis::fsm self, fsm FSM1, fsm FSM2) -> fsm
        __init__(gr::trellis::fsm self, fsm FSM, int n) -> fsm

        Constructor to create an uninitialized FSMS.
        """
        this = _trellis_swig.new_fsm(*args)
        try: self.this.append(this)
        except: self.this = this
    def I(self):
        """I(fsm self) -> int"""
        return _trellis_swig.fsm_I(self)

    def S(self):
        """S(fsm self) -> int"""
        return _trellis_swig.fsm_S(self)

    def O(self):
        """O(fsm self) -> int"""
        return _trellis_swig.fsm_O(self)

    def NS(self):
        """NS(fsm self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.fsm_NS(self)

    def OS(self):
        """OS(fsm self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.fsm_OS(self)

    def PS(self):
        """PS(fsm self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &"""
        return _trellis_swig.fsm_PS(self)

    def PI(self):
        """PI(fsm self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &"""
        return _trellis_swig.fsm_PI(self)

    def TMi(self):
        """TMi(fsm self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.fsm_TMi(self)

    def TMl(self):
        """TMl(fsm self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.fsm_TMl(self)

    def write_trellis_svg(self, *args, **kwargs):
        """
        write_trellis_svg(fsm self, std::string filename, int number_stages)

        Creates an svg image of the trellis representation.
        """
        return _trellis_swig.fsm_write_trellis_svg(self, *args, **kwargs)

    def write_fsm_txt(self, *args, **kwargs):
        """
        write_fsm_txt(fsm self, std::string filename)

        Write the FSMS to a file.
        """
        return _trellis_swig.fsm_write_fsm_txt(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_fsm
    __del__ = lambda self : None;
fsm_swigregister = _trellis_swig.fsm_swigregister
fsm_swigregister(fsm)

class interleaver(object):
    """INTERLEAVER class."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(gr::trellis::interleaver self) -> interleaver
        __init__(gr::trellis::interleaver self, interleaver INTERLEAVER) -> interleaver
        __init__(gr::trellis::interleaver self, int K, std::vector< int,std::allocator< int > > const & INTER) -> interleaver
        __init__(gr::trellis::interleaver self, char const * name) -> interleaver
        __init__(gr::trellis::interleaver self, int K, int seed) -> interleaver
        """
        this = _trellis_swig.new_interleaver(*args)
        try: self.this.append(this)
        except: self.this = this
    def K(self):
        """K(interleaver self) -> int"""
        return _trellis_swig.interleaver_K(self)

    def INTER(self):
        """INTER(interleaver self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.interleaver_INTER(self)

    def DEINTER(self):
        """DEINTER(interleaver self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.interleaver_DEINTER(self)

    def write_interleaver_txt(self, *args, **kwargs):
        """write_interleaver_txt(interleaver self, std::string filename)"""
        return _trellis_swig.interleaver_write_interleaver_txt(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_interleaver
    __del__ = lambda self : None;
interleaver_swigregister = _trellis_swig.interleaver_swigregister
interleaver_swigregister(interleaver)

class constellation_metrics_cf(object):
    """
    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        constellation : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr::digital::constellation_sptr constellation, gr::digital::trellis_metric_type_t TYPE) -> constellation_metrics_cf_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            constellation : 
            TYPE : 
        """
        return _trellis_swig.constellation_metrics_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _trellis_swig.delete_constellation_metrics_cf
    __del__ = lambda self : None;
constellation_metrics_cf_swigregister = _trellis_swig.constellation_metrics_cf_swigregister
constellation_metrics_cf_swigregister(constellation_metrics_cf)

def constellation_metrics_cf_make(*args, **kwargs):
  """
    constellation_metrics_cf_make(gr::digital::constellation_sptr constellation, gr::digital::trellis_metric_type_t TYPE) -> constellation_metrics_cf_sptr

    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        constellation : 
        TYPE : 
    """
  return _trellis_swig.constellation_metrics_cf_make(*args, **kwargs)

class permutation(object):
    """
    Permutation.

    Constructor Specific Documentation:



    Args:
        K : 
        TABLE : 
        SYMS_PER_BLOCK : 
        NBYTES : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int K, std::vector< int,std::allocator< int > > const & TABLE, int SYMS_PER_BLOCK, 
            size_t NBYTES) -> permutation_sptr

        Permutation.

        Constructor Specific Documentation:



        Args:
            K : 
            TABLE : 
            SYMS_PER_BLOCK : 
            NBYTES : 
        """
        return _trellis_swig.permutation_make(*args, **kwargs)

    make = staticmethod(make)
    def K(self):
        """K(permutation self) -> int"""
        return _trellis_swig.permutation_K(self)

    def TABLE(self):
        """TABLE(permutation self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.permutation_TABLE(self)

    def SYMS_PER_BLOCK(self):
        """SYMS_PER_BLOCK(permutation self) -> int"""
        return _trellis_swig.permutation_SYMS_PER_BLOCK(self)

    def BYTES_PER_SYMBOL(self):
        """BYTES_PER_SYMBOL(permutation self) -> size_t"""
        return _trellis_swig.permutation_BYTES_PER_SYMBOL(self)

    __swig_destroy__ = _trellis_swig.delete_permutation
    __del__ = lambda self : None;
permutation_swigregister = _trellis_swig.permutation_swigregister
permutation_swigregister(permutation)

def permutation_make(*args, **kwargs):
  """
    permutation_make(int K, std::vector< int,std::allocator< int > > const & TABLE, int SYMS_PER_BLOCK, 
        size_t NBYTES) -> permutation_sptr

    Permutation.

    Constructor Specific Documentation:



    Args:
        K : 
        TABLE : 
        SYMS_PER_BLOCK : 
        NBYTES : 
    """
  return _trellis_swig.permutation_make(*args, **kwargs)

class siso_combined_f(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        POSTI : 
        POSTO : 
        d_SISO_TYPE : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, bool POSTI, bool POSTO, gr::trellis::siso_type_t d_SISO_TYPE, 
            int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> siso_combined_f_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            POSTI : 
            POSTO : 
            d_SISO_TYPE : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.siso_combined_f_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(siso_combined_f self) -> fsm"""
        return _trellis_swig.siso_combined_f_FSM(self)

    def K(self):
        """K(siso_combined_f self) -> int"""
        return _trellis_swig.siso_combined_f_K(self)

    def S0(self):
        """S0(siso_combined_f self) -> int"""
        return _trellis_swig.siso_combined_f_S0(self)

    def SK(self):
        """SK(siso_combined_f self) -> int"""
        return _trellis_swig.siso_combined_f_SK(self)

    def POSTI(self):
        """POSTI(siso_combined_f self) -> bool"""
        return _trellis_swig.siso_combined_f_POSTI(self)

    def POSTO(self):
        """POSTO(siso_combined_f self) -> bool"""
        return _trellis_swig.siso_combined_f_POSTO(self)

    def SISO_TYPE(self):
        """SISO_TYPE(siso_combined_f self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.siso_combined_f_SISO_TYPE(self)

    def D(self):
        """D(siso_combined_f self) -> int"""
        return _trellis_swig.siso_combined_f_D(self)

    def TABLE(self):
        """TABLE(siso_combined_f self) -> pmt_vector_float"""
        return _trellis_swig.siso_combined_f_TABLE(self)

    def TYPE(self):
        """TYPE(siso_combined_f self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.siso_combined_f_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_siso_combined_f
    __del__ = lambda self : None;
siso_combined_f_swigregister = _trellis_swig.siso_combined_f_swigregister
siso_combined_f_swigregister(siso_combined_f)

def siso_combined_f_make(*args, **kwargs):
  """
    siso_combined_f_make(fsm FSM, int K, int S0, int SK, bool POSTI, bool POSTO, gr::trellis::siso_type_t d_SISO_TYPE, 
        int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> siso_combined_f_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        POSTI : 
        POSTO : 
        d_SISO_TYPE : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.siso_combined_f_make(*args, **kwargs)

class siso_f(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        POSTI : 
        POSTO : 
        d_SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, bool POSTI, bool POSTO, gr::trellis::siso_type_t d_SISO_TYPE) -> siso_f_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            POSTI : 
            POSTO : 
            d_SISO_TYPE : 
        """
        return _trellis_swig.siso_f_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(siso_f self) -> fsm"""
        return _trellis_swig.siso_f_FSM(self)

    def K(self):
        """K(siso_f self) -> int"""
        return _trellis_swig.siso_f_K(self)

    def S0(self):
        """S0(siso_f self) -> int"""
        return _trellis_swig.siso_f_S0(self)

    def SK(self):
        """SK(siso_f self) -> int"""
        return _trellis_swig.siso_f_SK(self)

    def POSTI(self):
        """POSTI(siso_f self) -> bool"""
        return _trellis_swig.siso_f_POSTI(self)

    def POSTO(self):
        """POSTO(siso_f self) -> bool"""
        return _trellis_swig.siso_f_POSTO(self)

    def SISO_TYPE(self):
        """SISO_TYPE(siso_f self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.siso_f_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_siso_f
    __del__ = lambda self : None;
siso_f_swigregister = _trellis_swig.siso_f_swigregister
siso_f_swigregister(siso_f)

def siso_f_make(*args, **kwargs):
  """
    siso_f_make(fsm FSM, int K, int S0, int SK, bool POSTI, bool POSTO, gr::trellis::siso_type_t d_SISO_TYPE) -> siso_f_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        POSTI : 
        POSTO : 
        d_SISO_TYPE : 
    """
  return _trellis_swig.siso_f_make(*args, **kwargs)

class encoder_bb(object):
    """
    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int ST) -> encoder_bb_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(encoder_bb self) -> fsm"""
        return _trellis_swig.encoder_bb_FSM(self)

    def ST(self):
        """ST(encoder_bb self) -> int"""
        return _trellis_swig.encoder_bb_ST(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_bb
    __del__ = lambda self : None;
encoder_bb_swigregister = _trellis_swig.encoder_bb_swigregister
encoder_bb_swigregister(encoder_bb)

def encoder_bb_make(*args, **kwargs):
  """
    encoder_bb_make(fsm FSM, int ST) -> encoder_bb_sptr

    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
  return _trellis_swig.encoder_bb_make(*args, **kwargs)

class encoder_bs(object):
    """
    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int ST) -> encoder_bs_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_bs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(encoder_bs self) -> fsm"""
        return _trellis_swig.encoder_bs_FSM(self)

    def ST(self):
        """ST(encoder_bs self) -> int"""
        return _trellis_swig.encoder_bs_ST(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_bs
    __del__ = lambda self : None;
encoder_bs_swigregister = _trellis_swig.encoder_bs_swigregister
encoder_bs_swigregister(encoder_bs)

def encoder_bs_make(*args, **kwargs):
  """
    encoder_bs_make(fsm FSM, int ST) -> encoder_bs_sptr

    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
  return _trellis_swig.encoder_bs_make(*args, **kwargs)

class encoder_bi(object):
    """
    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int ST) -> encoder_bi_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_bi_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(encoder_bi self) -> fsm"""
        return _trellis_swig.encoder_bi_FSM(self)

    def ST(self):
        """ST(encoder_bi self) -> int"""
        return _trellis_swig.encoder_bi_ST(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_bi
    __del__ = lambda self : None;
encoder_bi_swigregister = _trellis_swig.encoder_bi_swigregister
encoder_bi_swigregister(encoder_bi)

def encoder_bi_make(*args, **kwargs):
  """
    encoder_bi_make(fsm FSM, int ST) -> encoder_bi_sptr

    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
  return _trellis_swig.encoder_bi_make(*args, **kwargs)

class encoder_ss(object):
    """
    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int ST) -> encoder_ss_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(encoder_ss self) -> fsm"""
        return _trellis_swig.encoder_ss_FSM(self)

    def ST(self):
        """ST(encoder_ss self) -> int"""
        return _trellis_swig.encoder_ss_ST(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_ss
    __del__ = lambda self : None;
encoder_ss_swigregister = _trellis_swig.encoder_ss_swigregister
encoder_ss_swigregister(encoder_ss)

def encoder_ss_make(*args, **kwargs):
  """
    encoder_ss_make(fsm FSM, int ST) -> encoder_ss_sptr

    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
  return _trellis_swig.encoder_ss_make(*args, **kwargs)

class encoder_si(object):
    """
    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int ST) -> encoder_si_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_si_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(encoder_si self) -> fsm"""
        return _trellis_swig.encoder_si_FSM(self)

    def ST(self):
        """ST(encoder_si self) -> int"""
        return _trellis_swig.encoder_si_ST(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_si
    __del__ = lambda self : None;
encoder_si_swigregister = _trellis_swig.encoder_si_swigregister
encoder_si_swigregister(encoder_si)

def encoder_si_make(*args, **kwargs):
  """
    encoder_si_make(fsm FSM, int ST) -> encoder_si_sptr

    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
  return _trellis_swig.encoder_si_make(*args, **kwargs)

class encoder_ii(object):
    """
    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int ST) -> encoder_ii_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(encoder_ii self) -> fsm"""
        return _trellis_swig.encoder_ii_FSM(self)

    def ST(self):
        """ST(encoder_ii self) -> int"""
        return _trellis_swig.encoder_ii_ST(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_ii
    __del__ = lambda self : None;
encoder_ii_swigregister = _trellis_swig.encoder_ii_swigregister
encoder_ii_swigregister(encoder_ii)

def encoder_ii_make(*args, **kwargs):
  """
    encoder_ii_make(fsm FSM, int ST) -> encoder_ii_sptr

    Convolutional encoder.

    Constructor Specific Documentation:



    Args:
        FSM : 
        ST : 
    """
  return _trellis_swig.encoder_ii_make(*args, **kwargs)

class sccc_encoder_bb(object):
    """
    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bb_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_encoder_bb self) -> fsm"""
        return _trellis_swig.sccc_encoder_bb_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_bb self) -> int"""
        return _trellis_swig.sccc_encoder_bb_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_bb self) -> fsm"""
        return _trellis_swig.sccc_encoder_bb_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_bb self) -> int"""
        return _trellis_swig.sccc_encoder_bb_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_bb self) -> interleaver"""
        return _trellis_swig.sccc_encoder_bb_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_bb self) -> int"""
        return _trellis_swig.sccc_encoder_bb_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_bb
    __del__ = lambda self : None;
sccc_encoder_bb_swigregister = _trellis_swig.sccc_encoder_bb_swigregister
sccc_encoder_bb_swigregister(sccc_encoder_bb)

def sccc_encoder_bb_make(*args, **kwargs):
  """
    sccc_encoder_bb_make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bb_sptr

    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.sccc_encoder_bb_make(*args, **kwargs)

class sccc_encoder_bs(object):
    """
    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bs_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_bs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_encoder_bs self) -> fsm"""
        return _trellis_swig.sccc_encoder_bs_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_bs self) -> int"""
        return _trellis_swig.sccc_encoder_bs_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_bs self) -> fsm"""
        return _trellis_swig.sccc_encoder_bs_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_bs self) -> int"""
        return _trellis_swig.sccc_encoder_bs_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_bs self) -> interleaver"""
        return _trellis_swig.sccc_encoder_bs_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_bs self) -> int"""
        return _trellis_swig.sccc_encoder_bs_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_bs
    __del__ = lambda self : None;
sccc_encoder_bs_swigregister = _trellis_swig.sccc_encoder_bs_swigregister
sccc_encoder_bs_swigregister(sccc_encoder_bs)

def sccc_encoder_bs_make(*args, **kwargs):
  """
    sccc_encoder_bs_make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bs_sptr

    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.sccc_encoder_bs_make(*args, **kwargs)

class sccc_encoder_bi(object):
    """
    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bi_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_bi_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_encoder_bi self) -> fsm"""
        return _trellis_swig.sccc_encoder_bi_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_bi self) -> int"""
        return _trellis_swig.sccc_encoder_bi_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_bi self) -> fsm"""
        return _trellis_swig.sccc_encoder_bi_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_bi self) -> int"""
        return _trellis_swig.sccc_encoder_bi_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_bi self) -> interleaver"""
        return _trellis_swig.sccc_encoder_bi_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_bi self) -> int"""
        return _trellis_swig.sccc_encoder_bi_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_bi
    __del__ = lambda self : None;
sccc_encoder_bi_swigregister = _trellis_swig.sccc_encoder_bi_swigregister
sccc_encoder_bi_swigregister(sccc_encoder_bi)

def sccc_encoder_bi_make(*args, **kwargs):
  """
    sccc_encoder_bi_make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bi_sptr

    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.sccc_encoder_bi_make(*args, **kwargs)

class sccc_encoder_ss(object):
    """
    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_ss_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_encoder_ss self) -> fsm"""
        return _trellis_swig.sccc_encoder_ss_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_ss self) -> int"""
        return _trellis_swig.sccc_encoder_ss_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_ss self) -> fsm"""
        return _trellis_swig.sccc_encoder_ss_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_ss self) -> int"""
        return _trellis_swig.sccc_encoder_ss_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_ss self) -> interleaver"""
        return _trellis_swig.sccc_encoder_ss_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_ss self) -> int"""
        return _trellis_swig.sccc_encoder_ss_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_ss
    __del__ = lambda self : None;
sccc_encoder_ss_swigregister = _trellis_swig.sccc_encoder_ss_swigregister
sccc_encoder_ss_swigregister(sccc_encoder_ss)

def sccc_encoder_ss_make(*args, **kwargs):
  """
    sccc_encoder_ss_make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_ss_sptr

    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.sccc_encoder_ss_make(*args, **kwargs)

class sccc_encoder_si(object):
    """
    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_si_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_si_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_encoder_si self) -> fsm"""
        return _trellis_swig.sccc_encoder_si_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_si self) -> int"""
        return _trellis_swig.sccc_encoder_si_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_si self) -> fsm"""
        return _trellis_swig.sccc_encoder_si_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_si self) -> int"""
        return _trellis_swig.sccc_encoder_si_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_si self) -> interleaver"""
        return _trellis_swig.sccc_encoder_si_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_si self) -> int"""
        return _trellis_swig.sccc_encoder_si_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_si
    __del__ = lambda self : None;
sccc_encoder_si_swigregister = _trellis_swig.sccc_encoder_si_swigregister
sccc_encoder_si_swigregister(sccc_encoder_si)

def sccc_encoder_si_make(*args, **kwargs):
  """
    sccc_encoder_si_make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_si_sptr

    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.sccc_encoder_si_make(*args, **kwargs)

class sccc_encoder_ii(object):
    """
    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_ii_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_encoder_ii self) -> fsm"""
        return _trellis_swig.sccc_encoder_ii_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_ii self) -> int"""
        return _trellis_swig.sccc_encoder_ii_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_ii self) -> fsm"""
        return _trellis_swig.sccc_encoder_ii_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_ii self) -> int"""
        return _trellis_swig.sccc_encoder_ii_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_ii self) -> interleaver"""
        return _trellis_swig.sccc_encoder_ii_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_ii self) -> int"""
        return _trellis_swig.sccc_encoder_ii_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_ii
    __del__ = lambda self : None;
sccc_encoder_ii_swigregister = _trellis_swig.sccc_encoder_ii_swigregister
sccc_encoder_ii_swigregister(sccc_encoder_ii)

def sccc_encoder_ii_make(*args, **kwargs):
  """
    sccc_encoder_ii_make(fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_ii_sptr

    SCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo : 
        FSMi : 
        STi : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.sccc_encoder_ii_make(*args, **kwargs)

class pccc_encoder_bb(object):
    """
    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bb_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_encoder_bb self) -> fsm"""
        return _trellis_swig.pccc_encoder_bb_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_bb self) -> int"""
        return _trellis_swig.pccc_encoder_bb_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_bb self) -> fsm"""
        return _trellis_swig.pccc_encoder_bb_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_bb self) -> int"""
        return _trellis_swig.pccc_encoder_bb_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_bb self) -> interleaver"""
        return _trellis_swig.pccc_encoder_bb_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_bb self) -> int"""
        return _trellis_swig.pccc_encoder_bb_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_bb
    __del__ = lambda self : None;
pccc_encoder_bb_swigregister = _trellis_swig.pccc_encoder_bb_swigregister
pccc_encoder_bb_swigregister(pccc_encoder_bb)

def pccc_encoder_bb_make(*args, **kwargs):
  """
    pccc_encoder_bb_make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bb_sptr

    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.pccc_encoder_bb_make(*args, **kwargs)

class pccc_encoder_bs(object):
    """
    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bs_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_bs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_encoder_bs self) -> fsm"""
        return _trellis_swig.pccc_encoder_bs_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_bs self) -> int"""
        return _trellis_swig.pccc_encoder_bs_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_bs self) -> fsm"""
        return _trellis_swig.pccc_encoder_bs_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_bs self) -> int"""
        return _trellis_swig.pccc_encoder_bs_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_bs self) -> interleaver"""
        return _trellis_swig.pccc_encoder_bs_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_bs self) -> int"""
        return _trellis_swig.pccc_encoder_bs_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_bs
    __del__ = lambda self : None;
pccc_encoder_bs_swigregister = _trellis_swig.pccc_encoder_bs_swigregister
pccc_encoder_bs_swigregister(pccc_encoder_bs)

def pccc_encoder_bs_make(*args, **kwargs):
  """
    pccc_encoder_bs_make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bs_sptr

    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.pccc_encoder_bs_make(*args, **kwargs)

class pccc_encoder_bi(object):
    """
    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bi_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_bi_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_encoder_bi self) -> fsm"""
        return _trellis_swig.pccc_encoder_bi_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_bi self) -> int"""
        return _trellis_swig.pccc_encoder_bi_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_bi self) -> fsm"""
        return _trellis_swig.pccc_encoder_bi_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_bi self) -> int"""
        return _trellis_swig.pccc_encoder_bi_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_bi self) -> interleaver"""
        return _trellis_swig.pccc_encoder_bi_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_bi self) -> int"""
        return _trellis_swig.pccc_encoder_bi_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_bi
    __del__ = lambda self : None;
pccc_encoder_bi_swigregister = _trellis_swig.pccc_encoder_bi_swigregister
pccc_encoder_bi_swigregister(pccc_encoder_bi)

def pccc_encoder_bi_make(*args, **kwargs):
  """
    pccc_encoder_bi_make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bi_sptr

    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.pccc_encoder_bi_make(*args, **kwargs)

class pccc_encoder_ss(object):
    """
    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_ss_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_encoder_ss self) -> fsm"""
        return _trellis_swig.pccc_encoder_ss_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_ss self) -> int"""
        return _trellis_swig.pccc_encoder_ss_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_ss self) -> fsm"""
        return _trellis_swig.pccc_encoder_ss_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_ss self) -> int"""
        return _trellis_swig.pccc_encoder_ss_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_ss self) -> interleaver"""
        return _trellis_swig.pccc_encoder_ss_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_ss self) -> int"""
        return _trellis_swig.pccc_encoder_ss_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_ss
    __del__ = lambda self : None;
pccc_encoder_ss_swigregister = _trellis_swig.pccc_encoder_ss_swigregister
pccc_encoder_ss_swigregister(pccc_encoder_ss)

def pccc_encoder_ss_make(*args, **kwargs):
  """
    pccc_encoder_ss_make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_ss_sptr

    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.pccc_encoder_ss_make(*args, **kwargs)

class pccc_encoder_si(object):
    """
    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_si_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_si_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_encoder_si self) -> fsm"""
        return _trellis_swig.pccc_encoder_si_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_si self) -> int"""
        return _trellis_swig.pccc_encoder_si_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_si self) -> fsm"""
        return _trellis_swig.pccc_encoder_si_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_si self) -> int"""
        return _trellis_swig.pccc_encoder_si_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_si self) -> interleaver"""
        return _trellis_swig.pccc_encoder_si_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_si self) -> int"""
        return _trellis_swig.pccc_encoder_si_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_si
    __del__ = lambda self : None;
pccc_encoder_si_swigregister = _trellis_swig.pccc_encoder_si_swigregister
pccc_encoder_si_swigregister(pccc_encoder_si)

def pccc_encoder_si_make(*args, **kwargs):
  """
    pccc_encoder_si_make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_si_sptr

    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.pccc_encoder_si_make(*args, **kwargs)

class pccc_encoder_ii(object):
    """
    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_ii_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_encoder_ii self) -> fsm"""
        return _trellis_swig.pccc_encoder_ii_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_ii self) -> int"""
        return _trellis_swig.pccc_encoder_ii_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_ii self) -> fsm"""
        return _trellis_swig.pccc_encoder_ii_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_ii self) -> int"""
        return _trellis_swig.pccc_encoder_ii_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_ii self) -> interleaver"""
        return _trellis_swig.pccc_encoder_ii_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_ii self) -> int"""
        return _trellis_swig.pccc_encoder_ii_blocklength(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_ii
    __del__ = lambda self : None;
pccc_encoder_ii_swigregister = _trellis_swig.pccc_encoder_ii_swigregister
pccc_encoder_ii_swigregister(pccc_encoder_ii)

def pccc_encoder_ii_make(*args, **kwargs):
  """
    pccc_encoder_ii_make(fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_ii_sptr

    PCCC encoder.

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST1 : 
        FSM2 : 
        ST2 : 
        INTERLEAVER : 
        blocklength : 
    """
  return _trellis_swig.pccc_encoder_ii_make(*args, **kwargs)

class metrics_s(object):
    """
    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int O, int D, std::vector< short,std::allocator< short > > const & TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_s_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_s_make(*args, **kwargs)

    make = staticmethod(make)
    def O(self):
        """O(metrics_s self) -> int"""
        return _trellis_swig.metrics_s_O(self)

    def D(self):
        """D(metrics_s self) -> int"""
        return _trellis_swig.metrics_s_D(self)

    def TYPE(self):
        """TYPE(metrics_s self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_s_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_s self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.metrics_s_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_s self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.metrics_s_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_metrics_s
    __del__ = lambda self : None;
metrics_s_swigregister = _trellis_swig.metrics_s_swigregister
metrics_s_swigregister(metrics_s)

def metrics_s_make(*args, **kwargs):
  """
    metrics_s_make(int O, int D, std::vector< short,std::allocator< short > > const & TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_s_sptr

    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.metrics_s_make(*args, **kwargs)

class metrics_i(object):
    """
    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int O, int D, std::vector< int,std::allocator< int > > const & TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_i_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_i_make(*args, **kwargs)

    make = staticmethod(make)
    def O(self):
        """O(metrics_i self) -> int"""
        return _trellis_swig.metrics_i_O(self)

    def D(self):
        """D(metrics_i self) -> int"""
        return _trellis_swig.metrics_i_D(self)

    def TYPE(self):
        """TYPE(metrics_i self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_i_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_i self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.metrics_i_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_i self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.metrics_i_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_metrics_i
    __del__ = lambda self : None;
metrics_i_swigregister = _trellis_swig.metrics_i_swigregister
metrics_i_swigregister(metrics_i)

def metrics_i_make(*args, **kwargs):
  """
    metrics_i_make(int O, int D, std::vector< int,std::allocator< int > > const & TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_i_sptr

    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.metrics_i_make(*args, **kwargs)

class metrics_f(object):
    """
    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int O, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_f_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_f_make(*args, **kwargs)

    make = staticmethod(make)
    def O(self):
        """O(metrics_f self) -> int"""
        return _trellis_swig.metrics_f_O(self)

    def D(self):
        """D(metrics_f self) -> int"""
        return _trellis_swig.metrics_f_D(self)

    def TYPE(self):
        """TYPE(metrics_f self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_f_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_f self) -> pmt_vector_float"""
        return _trellis_swig.metrics_f_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_f self, pmt_vector_float table)"""
        return _trellis_swig.metrics_f_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_metrics_f
    __del__ = lambda self : None;
metrics_f_swigregister = _trellis_swig.metrics_f_swigregister
metrics_f_swigregister(metrics_f)

def metrics_f_make(*args, **kwargs):
  """
    metrics_f_make(int O, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_f_sptr

    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.metrics_f_make(*args, **kwargs)

class metrics_c(object):
    """
    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int O, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_c_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_c_make(*args, **kwargs)

    make = staticmethod(make)
    def O(self):
        """O(metrics_c self) -> int"""
        return _trellis_swig.metrics_c_O(self)

    def D(self):
        """D(metrics_c self) -> int"""
        return _trellis_swig.metrics_c_D(self)

    def TYPE(self):
        """TYPE(metrics_c self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_c_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_c self) -> pmt_vector_cfloat"""
        return _trellis_swig.metrics_c_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_c self, pmt_vector_cfloat table)"""
        return _trellis_swig.metrics_c_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_metrics_c
    __del__ = lambda self : None;
metrics_c_swigregister = _trellis_swig.metrics_c_swigregister
metrics_c_swigregister(metrics_c)

def metrics_c_make(*args, **kwargs):
  """
    metrics_c_make(int O, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_c_sptr

    Evaluate metrics for use by the Viterbi algorithm.

    Constructor Specific Documentation:



    Args:
        O : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.metrics_c_make(*args, **kwargs)

class pccc_decoder_b(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST10 : 
        ST1K : 
        FSM2 : 
        ST20 : 
        ST2K : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_b_sptr

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST10 : 
            ST1K : 
            FSM2 : 
            ST20 : 
            ST2K : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.pccc_decoder_b_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_b self) -> fsm"""
        return _trellis_swig.pccc_decoder_b_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_b self) -> fsm"""
        return _trellis_swig.pccc_decoder_b_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_b self) -> int"""
        return _trellis_swig.pccc_decoder_b_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_b self) -> int"""
        return _trellis_swig.pccc_decoder_b_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_b self) -> int"""
        return _trellis_swig.pccc_decoder_b_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_b self) -> int"""
        return _trellis_swig.pccc_decoder_b_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_b self) -> interleaver"""
        return _trellis_swig.pccc_decoder_b_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_b self) -> int"""
        return _trellis_swig.pccc_decoder_b_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_b self) -> int"""
        return _trellis_swig.pccc_decoder_b_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_b self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_b_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_b
    __del__ = lambda self : None;
pccc_decoder_b_swigregister = _trellis_swig.pccc_decoder_b_swigregister
pccc_decoder_b_swigregister(pccc_decoder_b)

def pccc_decoder_b_make(*args, **kwargs):
  """
    pccc_decoder_b_make(fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_b_sptr

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST10 : 
        ST1K : 
        FSM2 : 
        ST20 : 
        ST2K : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
  return _trellis_swig.pccc_decoder_b_make(*args, **kwargs)

class pccc_decoder_s(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST10 : 
        ST1K : 
        FSM2 : 
        ST20 : 
        ST2K : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_s_sptr

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST10 : 
            ST1K : 
            FSM2 : 
            ST20 : 
            ST2K : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.pccc_decoder_s_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_s self) -> fsm"""
        return _trellis_swig.pccc_decoder_s_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_s self) -> fsm"""
        return _trellis_swig.pccc_decoder_s_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_s self) -> int"""
        return _trellis_swig.pccc_decoder_s_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_s self) -> int"""
        return _trellis_swig.pccc_decoder_s_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_s self) -> int"""
        return _trellis_swig.pccc_decoder_s_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_s self) -> int"""
        return _trellis_swig.pccc_decoder_s_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_s self) -> interleaver"""
        return _trellis_swig.pccc_decoder_s_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_s self) -> int"""
        return _trellis_swig.pccc_decoder_s_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_s self) -> int"""
        return _trellis_swig.pccc_decoder_s_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_s self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_s_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_s
    __del__ = lambda self : None;
pccc_decoder_s_swigregister = _trellis_swig.pccc_decoder_s_swigregister
pccc_decoder_s_swigregister(pccc_decoder_s)

def pccc_decoder_s_make(*args, **kwargs):
  """
    pccc_decoder_s_make(fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_s_sptr

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST10 : 
        ST1K : 
        FSM2 : 
        ST20 : 
        ST2K : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
  return _trellis_swig.pccc_decoder_s_make(*args, **kwargs)

class pccc_decoder_i(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST10 : 
        ST1K : 
        FSM2 : 
        ST20 : 
        ST2K : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_i_sptr

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST10 : 
            ST1K : 
            FSM2 : 
            ST20 : 
            ST2K : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.pccc_decoder_i_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_i self) -> fsm"""
        return _trellis_swig.pccc_decoder_i_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_i self) -> fsm"""
        return _trellis_swig.pccc_decoder_i_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_i self) -> int"""
        return _trellis_swig.pccc_decoder_i_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_i self) -> int"""
        return _trellis_swig.pccc_decoder_i_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_i self) -> int"""
        return _trellis_swig.pccc_decoder_i_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_i self) -> int"""
        return _trellis_swig.pccc_decoder_i_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_i self) -> interleaver"""
        return _trellis_swig.pccc_decoder_i_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_i self) -> int"""
        return _trellis_swig.pccc_decoder_i_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_i self) -> int"""
        return _trellis_swig.pccc_decoder_i_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_i self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_i_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_i
    __del__ = lambda self : None;
pccc_decoder_i_swigregister = _trellis_swig.pccc_decoder_i_swigregister
pccc_decoder_i_swigregister(pccc_decoder_i)

def pccc_decoder_i_make(*args, **kwargs):
  """
    pccc_decoder_i_make(fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_i_sptr

    Constructor Specific Documentation:



    Args:
        FSM1 : 
        ST10 : 
        ST1K : 
        FSM2 : 
        ST20 : 
        ST2K : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
  return _trellis_swig.pccc_decoder_i_make(*args, **kwargs)

class pccc_decoder_combined_fb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_fb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_fb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_combined_fb self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fb_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_fb self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fb_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_fb self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_fb_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_fb self) -> pmt_vector_float"""
        return _trellis_swig.pccc_decoder_combined_fb_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_fb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_fb_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_fb self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_fb_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_fb self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_fb self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_fb_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_fb
    __del__ = lambda self : None;
pccc_decoder_combined_fb_swigregister = _trellis_swig.pccc_decoder_combined_fb_swigregister
pccc_decoder_combined_fb_swigregister(pccc_decoder_combined_fb)

def pccc_decoder_combined_fb_make(*args, **kwargs):
  """
    pccc_decoder_combined_fb_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> pccc_decoder_combined_fb_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.pccc_decoder_combined_fb_make(*args, **kwargs)

class pccc_decoder_combined_fs(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_fs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_fs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_combined_fs self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fs_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_fs self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fs_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_fs self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_fs_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_fs self) -> pmt_vector_float"""
        return _trellis_swig.pccc_decoder_combined_fs_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_fs self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_fs_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_fs self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_fs_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_fs self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_fs self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_fs_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_fs
    __del__ = lambda self : None;
pccc_decoder_combined_fs_swigregister = _trellis_swig.pccc_decoder_combined_fs_swigregister
pccc_decoder_combined_fs_swigregister(pccc_decoder_combined_fs)

def pccc_decoder_combined_fs_make(*args, **kwargs):
  """
    pccc_decoder_combined_fs_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> pccc_decoder_combined_fs_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.pccc_decoder_combined_fs_make(*args, **kwargs)

class pccc_decoder_combined_fi(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_fi_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_fi_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_combined_fi self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fi_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_fi self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fi_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_fi self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_fi_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_fi self) -> pmt_vector_float"""
        return _trellis_swig.pccc_decoder_combined_fi_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_fi self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_fi_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_fi self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_fi_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_fi self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_fi self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_fi_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_fi
    __del__ = lambda self : None;
pccc_decoder_combined_fi_swigregister = _trellis_swig.pccc_decoder_combined_fi_swigregister
pccc_decoder_combined_fi_swigregister(pccc_decoder_combined_fi)

def pccc_decoder_combined_fi_make(*args, **kwargs):
  """
    pccc_decoder_combined_fi_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> pccc_decoder_combined_fi_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.pccc_decoder_combined_fi_make(*args, **kwargs)

class pccc_decoder_combined_cb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_cb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_cb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_combined_cb self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cb_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_cb self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cb_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_cb self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_cb_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_cb self) -> pmt_vector_cfloat"""
        return _trellis_swig.pccc_decoder_combined_cb_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_cb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_cb_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_cb self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_cb_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_cb self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_cb self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_cb_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_cb
    __del__ = lambda self : None;
pccc_decoder_combined_cb_swigregister = _trellis_swig.pccc_decoder_combined_cb_swigregister
pccc_decoder_combined_cb_swigregister(pccc_decoder_combined_cb)

def pccc_decoder_combined_cb_make(*args, **kwargs):
  """
    pccc_decoder_combined_cb_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> pccc_decoder_combined_cb_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.pccc_decoder_combined_cb_make(*args, **kwargs)

class pccc_decoder_combined_cs(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_cs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_cs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_combined_cs self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cs_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_cs self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cs_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_cs self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_cs_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_cs self) -> pmt_vector_cfloat"""
        return _trellis_swig.pccc_decoder_combined_cs_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_cs self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_cs_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_cs self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_cs_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_cs self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_cs self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_cs_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_cs
    __del__ = lambda self : None;
pccc_decoder_combined_cs_swigregister = _trellis_swig.pccc_decoder_combined_cs_swigregister
pccc_decoder_combined_cs_swigregister(pccc_decoder_combined_cs)

def pccc_decoder_combined_cs_make(*args, **kwargs):
  """
    pccc_decoder_combined_cs_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> pccc_decoder_combined_cs_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.pccc_decoder_combined_cs_make(*args, **kwargs)

class pccc_decoder_combined_ci(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_ci_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_ci_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM1(self):
        """FSM1(pccc_decoder_combined_ci self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_ci_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_ci self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_ci_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_ci self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_ci_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_ci self) -> pmt_vector_cfloat"""
        return _trellis_swig.pccc_decoder_combined_ci_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_ci self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_ci_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_ci self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_ci_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_ci self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_ci self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_ci_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_ci
    __del__ = lambda self : None;
pccc_decoder_combined_ci_swigregister = _trellis_swig.pccc_decoder_combined_ci_swigregister
pccc_decoder_combined_ci_swigregister(pccc_decoder_combined_ci)

def pccc_decoder_combined_ci_make(*args, **kwargs):
  """
    pccc_decoder_combined_ci_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> pccc_decoder_combined_ci_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.pccc_decoder_combined_ci_make(*args, **kwargs)

class viterbi_b(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK) -> viterbi_b_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
        """
        return _trellis_swig.viterbi_b_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_b self) -> fsm"""
        return _trellis_swig.viterbi_b_FSM(self)

    def K(self):
        """K(viterbi_b self) -> int"""
        return _trellis_swig.viterbi_b_K(self)

    def S0(self):
        """S0(viterbi_b self) -> int"""
        return _trellis_swig.viterbi_b_S0(self)

    def SK(self):
        """SK(viterbi_b self) -> int"""
        return _trellis_swig.viterbi_b_SK(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_b
    __del__ = lambda self : None;
viterbi_b_swigregister = _trellis_swig.viterbi_b_swigregister
viterbi_b_swigregister(viterbi_b)

def viterbi_b_make(*args, **kwargs):
  """
    viterbi_b_make(fsm FSM, int K, int S0, int SK) -> viterbi_b_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
    """
  return _trellis_swig.viterbi_b_make(*args, **kwargs)

class viterbi_s(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK) -> viterbi_s_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
        """
        return _trellis_swig.viterbi_s_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_s self) -> fsm"""
        return _trellis_swig.viterbi_s_FSM(self)

    def K(self):
        """K(viterbi_s self) -> int"""
        return _trellis_swig.viterbi_s_K(self)

    def S0(self):
        """S0(viterbi_s self) -> int"""
        return _trellis_swig.viterbi_s_S0(self)

    def SK(self):
        """SK(viterbi_s self) -> int"""
        return _trellis_swig.viterbi_s_SK(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_s
    __del__ = lambda self : None;
viterbi_s_swigregister = _trellis_swig.viterbi_s_swigregister
viterbi_s_swigregister(viterbi_s)

def viterbi_s_make(*args, **kwargs):
  """
    viterbi_s_make(fsm FSM, int K, int S0, int SK) -> viterbi_s_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
    """
  return _trellis_swig.viterbi_s_make(*args, **kwargs)

class viterbi_i(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK) -> viterbi_i_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
        """
        return _trellis_swig.viterbi_i_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_i self) -> fsm"""
        return _trellis_swig.viterbi_i_FSM(self)

    def K(self):
        """K(viterbi_i self) -> int"""
        return _trellis_swig.viterbi_i_K(self)

    def S0(self):
        """S0(viterbi_i self) -> int"""
        return _trellis_swig.viterbi_i_S0(self)

    def SK(self):
        """SK(viterbi_i self) -> int"""
        return _trellis_swig.viterbi_i_SK(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_i
    __del__ = lambda self : None;
viterbi_i_swigregister = _trellis_swig.viterbi_i_swigregister
viterbi_i_swigregister(viterbi_i)

def viterbi_i_make(*args, **kwargs):
  """
    viterbi_i_make(fsm FSM, int K, int S0, int SK) -> viterbi_i_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
    """
  return _trellis_swig.viterbi_i_make(*args, **kwargs)

class viterbi_combined_sb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_sb_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_sb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_sb self) -> fsm"""
        return _trellis_swig.viterbi_combined_sb_FSM(self)

    def K(self):
        """K(viterbi_combined_sb self) -> int"""
        return _trellis_swig.viterbi_combined_sb_K(self)

    def S0(self):
        """S0(viterbi_combined_sb self) -> int"""
        return _trellis_swig.viterbi_combined_sb_S0(self)

    def SK(self):
        """SK(viterbi_combined_sb self) -> int"""
        return _trellis_swig.viterbi_combined_sb_SK(self)

    def D(self):
        """D(viterbi_combined_sb self) -> int"""
        return _trellis_swig.viterbi_combined_sb_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_sb self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.viterbi_combined_sb_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_sb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_sb_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_sb self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.viterbi_combined_sb_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_sb
    __del__ = lambda self : None;
viterbi_combined_sb_swigregister = _trellis_swig.viterbi_combined_sb_swigregister
viterbi_combined_sb_swigregister(viterbi_combined_sb)

def viterbi_combined_sb_make(*args, **kwargs):
  """
    viterbi_combined_sb_make(fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
        gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_sb_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_sb_make(*args, **kwargs)

class viterbi_combined_ss(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ss_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_ss self) -> fsm"""
        return _trellis_swig.viterbi_combined_ss_FSM(self)

    def K(self):
        """K(viterbi_combined_ss self) -> int"""
        return _trellis_swig.viterbi_combined_ss_K(self)

    def S0(self):
        """S0(viterbi_combined_ss self) -> int"""
        return _trellis_swig.viterbi_combined_ss_S0(self)

    def SK(self):
        """SK(viterbi_combined_ss self) -> int"""
        return _trellis_swig.viterbi_combined_ss_SK(self)

    def D(self):
        """D(viterbi_combined_ss self) -> int"""
        return _trellis_swig.viterbi_combined_ss_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ss self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.viterbi_combined_ss_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ss self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ss_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ss self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.viterbi_combined_ss_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ss
    __del__ = lambda self : None;
viterbi_combined_ss_swigregister = _trellis_swig.viterbi_combined_ss_swigregister
viterbi_combined_ss_swigregister(viterbi_combined_ss)

def viterbi_combined_ss_make(*args, **kwargs):
  """
    viterbi_combined_ss_make(fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
        gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ss_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_ss_make(*args, **kwargs)

class viterbi_combined_si(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_si_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_si_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_si self) -> fsm"""
        return _trellis_swig.viterbi_combined_si_FSM(self)

    def K(self):
        """K(viterbi_combined_si self) -> int"""
        return _trellis_swig.viterbi_combined_si_K(self)

    def S0(self):
        """S0(viterbi_combined_si self) -> int"""
        return _trellis_swig.viterbi_combined_si_S0(self)

    def SK(self):
        """SK(viterbi_combined_si self) -> int"""
        return _trellis_swig.viterbi_combined_si_SK(self)

    def D(self):
        """D(viterbi_combined_si self) -> int"""
        return _trellis_swig.viterbi_combined_si_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_si self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.viterbi_combined_si_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_si self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_si_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_si self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.viterbi_combined_si_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_si
    __del__ = lambda self : None;
viterbi_combined_si_swigregister = _trellis_swig.viterbi_combined_si_swigregister
viterbi_combined_si_swigregister(viterbi_combined_si)

def viterbi_combined_si_make(*args, **kwargs):
  """
    viterbi_combined_si_make(fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
        gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_si_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_si_make(*args, **kwargs)

class viterbi_combined_ib(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ib_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ib_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_ib self) -> fsm"""
        return _trellis_swig.viterbi_combined_ib_FSM(self)

    def K(self):
        """K(viterbi_combined_ib self) -> int"""
        return _trellis_swig.viterbi_combined_ib_K(self)

    def S0(self):
        """S0(viterbi_combined_ib self) -> int"""
        return _trellis_swig.viterbi_combined_ib_S0(self)

    def SK(self):
        """SK(viterbi_combined_ib self) -> int"""
        return _trellis_swig.viterbi_combined_ib_SK(self)

    def D(self):
        """D(viterbi_combined_ib self) -> int"""
        return _trellis_swig.viterbi_combined_ib_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ib self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ib_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ib self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ib_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ib self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.viterbi_combined_ib_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ib
    __del__ = lambda self : None;
viterbi_combined_ib_swigregister = _trellis_swig.viterbi_combined_ib_swigregister
viterbi_combined_ib_swigregister(viterbi_combined_ib)

def viterbi_combined_ib_make(*args, **kwargs):
  """
    viterbi_combined_ib_make(fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
        gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ib_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_ib_make(*args, **kwargs)

class viterbi_combined_is(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_is_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_is_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_is self) -> fsm"""
        return _trellis_swig.viterbi_combined_is_FSM(self)

    def K(self):
        """K(viterbi_combined_is self) -> int"""
        return _trellis_swig.viterbi_combined_is_K(self)

    def S0(self):
        """S0(viterbi_combined_is self) -> int"""
        return _trellis_swig.viterbi_combined_is_S0(self)

    def SK(self):
        """SK(viterbi_combined_is self) -> int"""
        return _trellis_swig.viterbi_combined_is_SK(self)

    def D(self):
        """D(viterbi_combined_is self) -> int"""
        return _trellis_swig.viterbi_combined_is_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_is self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_is_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_is self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_is_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_is self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.viterbi_combined_is_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_is
    __del__ = lambda self : None;
viterbi_combined_is_swigregister = _trellis_swig.viterbi_combined_is_swigregister
viterbi_combined_is_swigregister(viterbi_combined_is)

def viterbi_combined_is_make(*args, **kwargs):
  """
    viterbi_combined_is_make(fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
        gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_is_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_is_make(*args, **kwargs)

class viterbi_combined_ii(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ii_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_ii self) -> fsm"""
        return _trellis_swig.viterbi_combined_ii_FSM(self)

    def K(self):
        """K(viterbi_combined_ii self) -> int"""
        return _trellis_swig.viterbi_combined_ii_K(self)

    def S0(self):
        """S0(viterbi_combined_ii self) -> int"""
        return _trellis_swig.viterbi_combined_ii_S0(self)

    def SK(self):
        """SK(viterbi_combined_ii self) -> int"""
        return _trellis_swig.viterbi_combined_ii_SK(self)

    def D(self):
        """D(viterbi_combined_ii self) -> int"""
        return _trellis_swig.viterbi_combined_ii_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ii self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ii_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ii self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ii_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ii self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.viterbi_combined_ii_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ii
    __del__ = lambda self : None;
viterbi_combined_ii_swigregister = _trellis_swig.viterbi_combined_ii_swigregister
viterbi_combined_ii_swigregister(viterbi_combined_ii)

def viterbi_combined_ii_make(*args, **kwargs):
  """
    viterbi_combined_ii_make(fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
        gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ii_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_ii_make(*args, **kwargs)

class viterbi_combined_fb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fb_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_fb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_fb self) -> fsm"""
        return _trellis_swig.viterbi_combined_fb_FSM(self)

    def K(self):
        """K(viterbi_combined_fb self) -> int"""
        return _trellis_swig.viterbi_combined_fb_K(self)

    def S0(self):
        """S0(viterbi_combined_fb self) -> int"""
        return _trellis_swig.viterbi_combined_fb_S0(self)

    def SK(self):
        """SK(viterbi_combined_fb self) -> int"""
        return _trellis_swig.viterbi_combined_fb_SK(self)

    def D(self):
        """D(viterbi_combined_fb self) -> int"""
        return _trellis_swig.viterbi_combined_fb_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_fb self) -> pmt_vector_float"""
        return _trellis_swig.viterbi_combined_fb_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_fb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_fb_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_fb self, pmt_vector_float table)"""
        return _trellis_swig.viterbi_combined_fb_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_fb
    __del__ = lambda self : None;
viterbi_combined_fb_swigregister = _trellis_swig.viterbi_combined_fb_swigregister
viterbi_combined_fb_swigregister(viterbi_combined_fb)

def viterbi_combined_fb_make(*args, **kwargs):
  """
    viterbi_combined_fb_make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fb_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_fb_make(*args, **kwargs)

class viterbi_combined_fs(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fs_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_fs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_fs self) -> fsm"""
        return _trellis_swig.viterbi_combined_fs_FSM(self)

    def K(self):
        """K(viterbi_combined_fs self) -> int"""
        return _trellis_swig.viterbi_combined_fs_K(self)

    def S0(self):
        """S0(viterbi_combined_fs self) -> int"""
        return _trellis_swig.viterbi_combined_fs_S0(self)

    def SK(self):
        """SK(viterbi_combined_fs self) -> int"""
        return _trellis_swig.viterbi_combined_fs_SK(self)

    def D(self):
        """D(viterbi_combined_fs self) -> int"""
        return _trellis_swig.viterbi_combined_fs_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_fs self) -> pmt_vector_float"""
        return _trellis_swig.viterbi_combined_fs_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_fs self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_fs_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_fs self, pmt_vector_float table)"""
        return _trellis_swig.viterbi_combined_fs_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_fs
    __del__ = lambda self : None;
viterbi_combined_fs_swigregister = _trellis_swig.viterbi_combined_fs_swigregister
viterbi_combined_fs_swigregister(viterbi_combined_fs)

def viterbi_combined_fs_make(*args, **kwargs):
  """
    viterbi_combined_fs_make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fs_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_fs_make(*args, **kwargs)

class viterbi_combined_fi(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fi_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_fi_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_fi self) -> fsm"""
        return _trellis_swig.viterbi_combined_fi_FSM(self)

    def K(self):
        """K(viterbi_combined_fi self) -> int"""
        return _trellis_swig.viterbi_combined_fi_K(self)

    def S0(self):
        """S0(viterbi_combined_fi self) -> int"""
        return _trellis_swig.viterbi_combined_fi_S0(self)

    def SK(self):
        """SK(viterbi_combined_fi self) -> int"""
        return _trellis_swig.viterbi_combined_fi_SK(self)

    def D(self):
        """D(viterbi_combined_fi self) -> int"""
        return _trellis_swig.viterbi_combined_fi_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_fi self) -> pmt_vector_float"""
        return _trellis_swig.viterbi_combined_fi_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_fi self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_fi_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_fi self, pmt_vector_float table)"""
        return _trellis_swig.viterbi_combined_fi_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_fi
    __del__ = lambda self : None;
viterbi_combined_fi_swigregister = _trellis_swig.viterbi_combined_fi_swigregister
viterbi_combined_fi_swigregister(viterbi_combined_fi)

def viterbi_combined_fi_make(*args, **kwargs):
  """
    viterbi_combined_fi_make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fi_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_fi_make(*args, **kwargs)

class viterbi_combined_cb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_cb_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_cb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_cb self) -> fsm"""
        return _trellis_swig.viterbi_combined_cb_FSM(self)

    def K(self):
        """K(viterbi_combined_cb self) -> int"""
        return _trellis_swig.viterbi_combined_cb_K(self)

    def S0(self):
        """S0(viterbi_combined_cb self) -> int"""
        return _trellis_swig.viterbi_combined_cb_S0(self)

    def SK(self):
        """SK(viterbi_combined_cb self) -> int"""
        return _trellis_swig.viterbi_combined_cb_SK(self)

    def D(self):
        """D(viterbi_combined_cb self) -> int"""
        return _trellis_swig.viterbi_combined_cb_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_cb self) -> pmt_vector_cfloat"""
        return _trellis_swig.viterbi_combined_cb_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_cb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_cb_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_cb self, pmt_vector_cfloat table)"""
        return _trellis_swig.viterbi_combined_cb_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_cb
    __del__ = lambda self : None;
viterbi_combined_cb_swigregister = _trellis_swig.viterbi_combined_cb_swigregister
viterbi_combined_cb_swigregister(viterbi_combined_cb)

def viterbi_combined_cb_make(*args, **kwargs):
  """
    viterbi_combined_cb_make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_cb_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_cb_make(*args, **kwargs)

class viterbi_combined_cs(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_cs_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_cs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_cs self) -> fsm"""
        return _trellis_swig.viterbi_combined_cs_FSM(self)

    def K(self):
        """K(viterbi_combined_cs self) -> int"""
        return _trellis_swig.viterbi_combined_cs_K(self)

    def S0(self):
        """S0(viterbi_combined_cs self) -> int"""
        return _trellis_swig.viterbi_combined_cs_S0(self)

    def SK(self):
        """SK(viterbi_combined_cs self) -> int"""
        return _trellis_swig.viterbi_combined_cs_SK(self)

    def D(self):
        """D(viterbi_combined_cs self) -> int"""
        return _trellis_swig.viterbi_combined_cs_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_cs self) -> pmt_vector_cfloat"""
        return _trellis_swig.viterbi_combined_cs_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_cs self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_cs_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_cs self, pmt_vector_cfloat table)"""
        return _trellis_swig.viterbi_combined_cs_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_cs
    __del__ = lambda self : None;
viterbi_combined_cs_swigregister = _trellis_swig.viterbi_combined_cs_swigregister
viterbi_combined_cs_swigregister(viterbi_combined_cs)

def viterbi_combined_cs_make(*args, **kwargs):
  """
    viterbi_combined_cs_make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_cs_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_cs_make(*args, **kwargs)

class viterbi_combined_ci(object):
    """
    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ci_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ci_make(*args, **kwargs)

    make = staticmethod(make)
    def FSM(self):
        """FSM(viterbi_combined_ci self) -> fsm"""
        return _trellis_swig.viterbi_combined_ci_FSM(self)

    def K(self):
        """K(viterbi_combined_ci self) -> int"""
        return _trellis_swig.viterbi_combined_ci_K(self)

    def S0(self):
        """S0(viterbi_combined_ci self) -> int"""
        return _trellis_swig.viterbi_combined_ci_S0(self)

    def SK(self):
        """SK(viterbi_combined_ci self) -> int"""
        return _trellis_swig.viterbi_combined_ci_SK(self)

    def D(self):
        """D(viterbi_combined_ci self) -> int"""
        return _trellis_swig.viterbi_combined_ci_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ci self) -> pmt_vector_cfloat"""
        return _trellis_swig.viterbi_combined_ci_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ci self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ci_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ci self, pmt_vector_cfloat table)"""
        return _trellis_swig.viterbi_combined_ci_set_TABLE(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ci
    __del__ = lambda self : None;
viterbi_combined_ci_swigregister = _trellis_swig.viterbi_combined_ci_swigregister
viterbi_combined_ci_swigregister(viterbi_combined_ci)

def viterbi_combined_ci_make(*args, **kwargs):
  """
    viterbi_combined_ci_make(fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ci_sptr

    Constructor Specific Documentation:



    Args:
        FSM : 
        K : 
        S0 : 
        SK : 
        D : 
        TABLE : 
        TYPE : 
    """
  return _trellis_swig.viterbi_combined_ci_make(*args, **kwargs)

class sccc_decoder_b(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_b_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.sccc_decoder_b_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_b self) -> fsm"""
        return _trellis_swig.sccc_decoder_b_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_b self) -> fsm"""
        return _trellis_swig.sccc_decoder_b_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_b self) -> int"""
        return _trellis_swig.sccc_decoder_b_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_b self) -> int"""
        return _trellis_swig.sccc_decoder_b_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_b self) -> int"""
        return _trellis_swig.sccc_decoder_b_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_b self) -> int"""
        return _trellis_swig.sccc_decoder_b_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_b self) -> interleaver"""
        return _trellis_swig.sccc_decoder_b_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_b self) -> int"""
        return _trellis_swig.sccc_decoder_b_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_b self) -> int"""
        return _trellis_swig.sccc_decoder_b_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_b self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_b_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_b
    __del__ = lambda self : None;
sccc_decoder_b_swigregister = _trellis_swig.sccc_decoder_b_swigregister
sccc_decoder_b_swigregister(sccc_decoder_b)

def sccc_decoder_b_make(*args, **kwargs):
  """
    sccc_decoder_b_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_b_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
  return _trellis_swig.sccc_decoder_b_make(*args, **kwargs)

class sccc_decoder_s(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_s_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.sccc_decoder_s_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_s self) -> fsm"""
        return _trellis_swig.sccc_decoder_s_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_s self) -> fsm"""
        return _trellis_swig.sccc_decoder_s_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_s self) -> int"""
        return _trellis_swig.sccc_decoder_s_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_s self) -> int"""
        return _trellis_swig.sccc_decoder_s_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_s self) -> int"""
        return _trellis_swig.sccc_decoder_s_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_s self) -> int"""
        return _trellis_swig.sccc_decoder_s_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_s self) -> interleaver"""
        return _trellis_swig.sccc_decoder_s_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_s self) -> int"""
        return _trellis_swig.sccc_decoder_s_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_s self) -> int"""
        return _trellis_swig.sccc_decoder_s_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_s self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_s_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_s
    __del__ = lambda self : None;
sccc_decoder_s_swigregister = _trellis_swig.sccc_decoder_s_swigregister
sccc_decoder_s_swigregister(sccc_decoder_s)

def sccc_decoder_s_make(*args, **kwargs):
  """
    sccc_decoder_s_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_s_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
  return _trellis_swig.sccc_decoder_s_make(*args, **kwargs)

class sccc_decoder_i(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_i_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.sccc_decoder_i_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_i self) -> fsm"""
        return _trellis_swig.sccc_decoder_i_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_i self) -> fsm"""
        return _trellis_swig.sccc_decoder_i_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_i self) -> int"""
        return _trellis_swig.sccc_decoder_i_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_i self) -> int"""
        return _trellis_swig.sccc_decoder_i_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_i self) -> int"""
        return _trellis_swig.sccc_decoder_i_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_i self) -> int"""
        return _trellis_swig.sccc_decoder_i_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_i self) -> interleaver"""
        return _trellis_swig.sccc_decoder_i_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_i self) -> int"""
        return _trellis_swig.sccc_decoder_i_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_i self) -> int"""
        return _trellis_swig.sccc_decoder_i_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_i self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_i_SISO_TYPE(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_i
    __del__ = lambda self : None;
sccc_decoder_i_swigregister = _trellis_swig.sccc_decoder_i_swigregister
sccc_decoder_i_swigregister(sccc_decoder_i)

def sccc_decoder_i_make(*args, **kwargs):
  """
    sccc_decoder_i_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_i_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
    """
  return _trellis_swig.sccc_decoder_i_make(*args, **kwargs)

class sccc_decoder_combined_fb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_fb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_fb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_combined_fb self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fb_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_fb self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fb_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_fb self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_fb_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_fb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_fb self) -> pmt_vector_float"""
        return _trellis_swig.sccc_decoder_combined_fb_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_fb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_fb_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_fb self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_fb_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_fb self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_fb self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_fb_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_fb
    __del__ = lambda self : None;
sccc_decoder_combined_fb_swigregister = _trellis_swig.sccc_decoder_combined_fb_swigregister
sccc_decoder_combined_fb_swigregister(sccc_decoder_combined_fb)

def sccc_decoder_combined_fb_make(*args, **kwargs):
  """
    sccc_decoder_combined_fb_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> sccc_decoder_combined_fb_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.sccc_decoder_combined_fb_make(*args, **kwargs)

class sccc_decoder_combined_fs(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_fs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_fs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_combined_fs self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fs_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_fs self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fs_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_fs self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_fs_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_fs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_fs self) -> pmt_vector_float"""
        return _trellis_swig.sccc_decoder_combined_fs_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_fs self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_fs_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_fs self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_fs_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_fs self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_fs self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_fs_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_fs
    __del__ = lambda self : None;
sccc_decoder_combined_fs_swigregister = _trellis_swig.sccc_decoder_combined_fs_swigregister
sccc_decoder_combined_fs_swigregister(sccc_decoder_combined_fs)

def sccc_decoder_combined_fs_make(*args, **kwargs):
  """
    sccc_decoder_combined_fs_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> sccc_decoder_combined_fs_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.sccc_decoder_combined_fs_make(*args, **kwargs)

class sccc_decoder_combined_fi(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_fi_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_fi_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_combined_fi self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fi_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_fi self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fi_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_fi self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_fi_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_fi self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_fi self) -> pmt_vector_float"""
        return _trellis_swig.sccc_decoder_combined_fi_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_fi self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_fi_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_fi self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_fi_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_fi self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_fi self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_fi_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_fi
    __del__ = lambda self : None;
sccc_decoder_combined_fi_swigregister = _trellis_swig.sccc_decoder_combined_fi_swigregister
sccc_decoder_combined_fi_swigregister(sccc_decoder_combined_fi)

def sccc_decoder_combined_fi_make(*args, **kwargs):
  """
    sccc_decoder_combined_fi_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> sccc_decoder_combined_fi_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.sccc_decoder_combined_fi_make(*args, **kwargs)

class sccc_decoder_combined_cb(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_cb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_cb_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_combined_cb self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cb_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_cb self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cb_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_cb self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_cb_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_cb self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_cb self) -> pmt_vector_cfloat"""
        return _trellis_swig.sccc_decoder_combined_cb_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_cb self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_cb_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_cb self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_cb_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_cb self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_cb self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_cb_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_cb
    __del__ = lambda self : None;
sccc_decoder_combined_cb_swigregister = _trellis_swig.sccc_decoder_combined_cb_swigregister
sccc_decoder_combined_cb_swigregister(sccc_decoder_combined_cb)

def sccc_decoder_combined_cb_make(*args, **kwargs):
  """
    sccc_decoder_combined_cb_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> sccc_decoder_combined_cb_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.sccc_decoder_combined_cb_make(*args, **kwargs)

class sccc_decoder_combined_cs(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_cs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_cs_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_combined_cs self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cs_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_cs self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cs_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_cs self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_cs_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_cs self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_cs self) -> pmt_vector_cfloat"""
        return _trellis_swig.sccc_decoder_combined_cs_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_cs self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_cs_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_cs self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_cs_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_cs self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_cs self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_cs_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_cs
    __del__ = lambda self : None;
sccc_decoder_combined_cs_swigregister = _trellis_swig.sccc_decoder_combined_cs_swigregister
sccc_decoder_combined_cs_swigregister(sccc_decoder_combined_cs)

def sccc_decoder_combined_cs_make(*args, **kwargs):
  """
    sccc_decoder_combined_cs_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> sccc_decoder_combined_cs_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.sccc_decoder_combined_cs_make(*args, **kwargs)

class sccc_decoder_combined_ci(object):
    """
    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_ci_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_ci_make(*args, **kwargs)

    make = staticmethod(make)
    def FSMo(self):
        """FSMo(sccc_decoder_combined_ci self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_ci_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_ci self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_ci_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_ci self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_ci_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_ci self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_ci self) -> pmt_vector_cfloat"""
        return _trellis_swig.sccc_decoder_combined_ci_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_ci self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_ci_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_ci self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_ci_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_ci self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_ci self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_ci_set_scaling(self, *args, **kwargs)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_ci
    __del__ = lambda self : None;
sccc_decoder_combined_ci_swigregister = _trellis_swig.sccc_decoder_combined_ci_swigregister
sccc_decoder_combined_ci_swigregister(sccc_decoder_combined_ci)

def sccc_decoder_combined_ci_make(*args, **kwargs):
  """
    sccc_decoder_combined_ci_make(fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
        int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
        pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
        float scaling) -> sccc_decoder_combined_ci_sptr

    Constructor Specific Documentation:



    Args:
        FSMo : 
        STo0 : 
        SToK : 
        FSMi : 
        STi0 : 
        STiK : 
        INTERLEAVER : 
        blocklength : 
        repetitions : 
        SISO_TYPE : 
        D : 
        TABLE : 
        METRIC_TYPE : 
        scaling : 
    """
  return _trellis_swig.sccc_decoder_combined_ci_make(*args, **kwargs)

class constellation_metrics_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::constellation_metrics_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::constellation_metrics_cf)> self) -> constellation_metrics_cf_sptr
        __init__(boost::shared_ptr<(gr::trellis::constellation_metrics_cf)> self, constellation_metrics_cf p) -> constellation_metrics_cf_sptr
        """
        this = _trellis_swig.new_constellation_metrics_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(constellation_metrics_cf_sptr self) -> constellation_metrics_cf"""
        return _trellis_swig.constellation_metrics_cf_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_constellation_metrics_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(constellation_metrics_cf_sptr self, gr::digital::constellation_sptr constellation, gr::digital::trellis_metric_type_t TYPE) -> constellation_metrics_cf_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            constellation : 
            TYPE : 
        """
        return _trellis_swig.constellation_metrics_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(constellation_metrics_cf_sptr self) -> unsigned int"""
        return _trellis_swig.constellation_metrics_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(constellation_metrics_cf_sptr self, int which, int delay)
        declare_sample_delay(constellation_metrics_cf_sptr self, unsigned int delay)
        """
        return _trellis_swig.constellation_metrics_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(constellation_metrics_cf_sptr self, int which) -> unsigned int"""
        return _trellis_swig.constellation_metrics_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(constellation_metrics_cf_sptr self) -> int"""
        return _trellis_swig.constellation_metrics_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(constellation_metrics_cf_sptr self) -> double"""
        return _trellis_swig.constellation_metrics_cf_sptr_relative_rate(self)

    def start(self):
        """start(constellation_metrics_cf_sptr self) -> bool"""
        return _trellis_swig.constellation_metrics_cf_sptr_start(self)

    def stop(self):
        """stop(constellation_metrics_cf_sptr self) -> bool"""
        return _trellis_swig.constellation_metrics_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(constellation_metrics_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.constellation_metrics_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(constellation_metrics_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.constellation_metrics_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(constellation_metrics_cf_sptr self) -> int"""
        return _trellis_swig.constellation_metrics_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(constellation_metrics_cf_sptr self, int m)"""
        return _trellis_swig.constellation_metrics_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(constellation_metrics_cf_sptr self)"""
        return _trellis_swig.constellation_metrics_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(constellation_metrics_cf_sptr self) -> bool"""
        return _trellis_swig.constellation_metrics_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(constellation_metrics_cf_sptr self, int m)"""
        return _trellis_swig.constellation_metrics_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(constellation_metrics_cf_sptr self) -> int"""
        return _trellis_swig.constellation_metrics_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(constellation_metrics_cf_sptr self, int i) -> long"""
        return _trellis_swig.constellation_metrics_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(constellation_metrics_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(constellation_metrics_cf_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.constellation_metrics_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(constellation_metrics_cf_sptr self, int i) -> long"""
        return _trellis_swig.constellation_metrics_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(constellation_metrics_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(constellation_metrics_cf_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.constellation_metrics_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(constellation_metrics_cf_sptr self, int which) -> float
        pc_input_buffers_full(constellation_metrics_cf_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.constellation_metrics_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(constellation_metrics_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(constellation_metrics_cf_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.constellation_metrics_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(constellation_metrics_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(constellation_metrics_cf_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.constellation_metrics_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(constellation_metrics_cf_sptr self, int which) -> float
        pc_output_buffers_full(constellation_metrics_cf_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.constellation_metrics_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(constellation_metrics_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(constellation_metrics_cf_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.constellation_metrics_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(constellation_metrics_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(constellation_metrics_cf_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.constellation_metrics_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(constellation_metrics_cf_sptr self) -> float"""
        return _trellis_swig.constellation_metrics_cf_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(constellation_metrics_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.constellation_metrics_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(constellation_metrics_cf_sptr self)"""
        return _trellis_swig.constellation_metrics_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(constellation_metrics_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.constellation_metrics_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(constellation_metrics_cf_sptr self) -> int"""
        return _trellis_swig.constellation_metrics_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(constellation_metrics_cf_sptr self) -> int"""
        return _trellis_swig.constellation_metrics_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(constellation_metrics_cf_sptr self, int priority) -> int"""
        return _trellis_swig.constellation_metrics_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(constellation_metrics_cf_sptr self) -> std::string"""
        return _trellis_swig.constellation_metrics_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(constellation_metrics_cf_sptr self) -> std::string"""
        return _trellis_swig.constellation_metrics_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(constellation_metrics_cf_sptr self) -> io_signature_sptr"""
        return _trellis_swig.constellation_metrics_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(constellation_metrics_cf_sptr self) -> io_signature_sptr"""
        return _trellis_swig.constellation_metrics_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(constellation_metrics_cf_sptr self) -> long"""
        return _trellis_swig.constellation_metrics_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(constellation_metrics_cf_sptr self) -> basic_block_sptr"""
        return _trellis_swig.constellation_metrics_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(constellation_metrics_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.constellation_metrics_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(constellation_metrics_cf_sptr self) -> std::string"""
        return _trellis_swig.constellation_metrics_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(constellation_metrics_cf_sptr self, std::string name)"""
        return _trellis_swig.constellation_metrics_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(constellation_metrics_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.constellation_metrics_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(constellation_metrics_cf_sptr self) -> swig_int_ptr"""
        return _trellis_swig.constellation_metrics_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(constellation_metrics_cf_sptr self) -> swig_int_ptr"""
        return _trellis_swig.constellation_metrics_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(constellation_metrics_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.constellation_metrics_cf_sptr_message_subscribers(self, *args, **kwargs)

constellation_metrics_cf_sptr_swigregister = _trellis_swig.constellation_metrics_cf_sptr_swigregister
constellation_metrics_cf_sptr_swigregister(constellation_metrics_cf_sptr)

constellation_metrics_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
constellation_metrics_cf = constellation_metrics_cf.make;

class permutation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::permutation)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::permutation)> self) -> permutation_sptr
        __init__(boost::shared_ptr<(gr::trellis::permutation)> self, permutation p) -> permutation_sptr
        """
        this = _trellis_swig.new_permutation_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(permutation_sptr self) -> permutation"""
        return _trellis_swig.permutation_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_permutation_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(permutation_sptr self, int K, std::vector< int,std::allocator< int > > const & TABLE, int SYMS_PER_BLOCK, 
            size_t NBYTES) -> permutation_sptr

        Permutation.

        Constructor Specific Documentation:



        Args:
            K : 
            TABLE : 
            SYMS_PER_BLOCK : 
            NBYTES : 
        """
        return _trellis_swig.permutation_sptr_make(self, *args, **kwargs)

    def K(self):
        """K(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_K(self)

    def TABLE(self):
        """TABLE(permutation_sptr self) -> std::vector< int,std::allocator< int > > const &"""
        return _trellis_swig.permutation_sptr_TABLE(self)

    def SYMS_PER_BLOCK(self):
        """SYMS_PER_BLOCK(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_SYMS_PER_BLOCK(self)

    def BYTES_PER_SYMBOL(self):
        """BYTES_PER_SYMBOL(permutation_sptr self) -> size_t"""
        return _trellis_swig.permutation_sptr_BYTES_PER_SYMBOL(self)

    def history(self):
        """history(permutation_sptr self) -> unsigned int"""
        return _trellis_swig.permutation_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(permutation_sptr self, int which, int delay)
        declare_sample_delay(permutation_sptr self, unsigned int delay)
        """
        return _trellis_swig.permutation_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(permutation_sptr self, int which) -> unsigned int"""
        return _trellis_swig.permutation_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(permutation_sptr self) -> double"""
        return _trellis_swig.permutation_sptr_relative_rate(self)

    def start(self):
        """start(permutation_sptr self) -> bool"""
        return _trellis_swig.permutation_sptr_start(self)

    def stop(self):
        """stop(permutation_sptr self) -> bool"""
        return _trellis_swig.permutation_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(permutation_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.permutation_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(permutation_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.permutation_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(permutation_sptr self, int m)"""
        return _trellis_swig.permutation_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(permutation_sptr self)"""
        return _trellis_swig.permutation_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(permutation_sptr self) -> bool"""
        return _trellis_swig.permutation_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(permutation_sptr self, int m)"""
        return _trellis_swig.permutation_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(permutation_sptr self, int i) -> long"""
        return _trellis_swig.permutation_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(permutation_sptr self, long max_output_buffer)
        set_max_output_buffer(permutation_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.permutation_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(permutation_sptr self, int i) -> long"""
        return _trellis_swig.permutation_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(permutation_sptr self, long min_output_buffer)
        set_min_output_buffer(permutation_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.permutation_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(permutation_sptr self, int which) -> float
        pc_input_buffers_full(permutation_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.permutation_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(permutation_sptr self, int which) -> float
        pc_input_buffers_full_avg(permutation_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.permutation_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(permutation_sptr self, int which) -> float
        pc_input_buffers_full_var(permutation_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.permutation_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(permutation_sptr self, int which) -> float
        pc_output_buffers_full(permutation_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.permutation_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(permutation_sptr self, int which) -> float
        pc_output_buffers_full_avg(permutation_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.permutation_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(permutation_sptr self, int which) -> float
        pc_output_buffers_full_var(permutation_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.permutation_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(permutation_sptr self) -> float"""
        return _trellis_swig.permutation_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(permutation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.permutation_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(permutation_sptr self)"""
        return _trellis_swig.permutation_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(permutation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.permutation_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(permutation_sptr self) -> int"""
        return _trellis_swig.permutation_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(permutation_sptr self, int priority) -> int"""
        return _trellis_swig.permutation_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(permutation_sptr self) -> std::string"""
        return _trellis_swig.permutation_sptr_name(self)

    def symbol_name(self):
        """symbol_name(permutation_sptr self) -> std::string"""
        return _trellis_swig.permutation_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(permutation_sptr self) -> io_signature_sptr"""
        return _trellis_swig.permutation_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(permutation_sptr self) -> io_signature_sptr"""
        return _trellis_swig.permutation_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(permutation_sptr self) -> long"""
        return _trellis_swig.permutation_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(permutation_sptr self) -> basic_block_sptr"""
        return _trellis_swig.permutation_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(permutation_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.permutation_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(permutation_sptr self) -> std::string"""
        return _trellis_swig.permutation_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(permutation_sptr self, std::string name)"""
        return _trellis_swig.permutation_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(permutation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.permutation_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(permutation_sptr self) -> swig_int_ptr"""
        return _trellis_swig.permutation_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(permutation_sptr self) -> swig_int_ptr"""
        return _trellis_swig.permutation_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(permutation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.permutation_sptr_message_subscribers(self, *args, **kwargs)

permutation_sptr_swigregister = _trellis_swig.permutation_sptr_swigregister
permutation_sptr_swigregister(permutation_sptr)

permutation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
permutation = permutation.make;

class siso_combined_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::siso_combined_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::siso_combined_f)> self) -> siso_combined_f_sptr
        __init__(boost::shared_ptr<(gr::trellis::siso_combined_f)> self, siso_combined_f p) -> siso_combined_f_sptr
        """
        this = _trellis_swig.new_siso_combined_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(siso_combined_f_sptr self) -> siso_combined_f"""
        return _trellis_swig.siso_combined_f_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_siso_combined_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(siso_combined_f_sptr self, fsm FSM, int K, int S0, int SK, bool POSTI, bool POSTO, gr::trellis::siso_type_t d_SISO_TYPE, 
            int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> siso_combined_f_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            POSTI : 
            POSTO : 
            d_SISO_TYPE : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.siso_combined_f_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(siso_combined_f_sptr self) -> fsm"""
        return _trellis_swig.siso_combined_f_sptr_FSM(self)

    def K(self):
        """K(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_K(self)

    def S0(self):
        """S0(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_S0(self)

    def SK(self):
        """SK(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_SK(self)

    def POSTI(self):
        """POSTI(siso_combined_f_sptr self) -> bool"""
        return _trellis_swig.siso_combined_f_sptr_POSTI(self)

    def POSTO(self):
        """POSTO(siso_combined_f_sptr self) -> bool"""
        return _trellis_swig.siso_combined_f_sptr_POSTO(self)

    def SISO_TYPE(self):
        """SISO_TYPE(siso_combined_f_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.siso_combined_f_sptr_SISO_TYPE(self)

    def D(self):
        """D(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_D(self)

    def TABLE(self):
        """TABLE(siso_combined_f_sptr self) -> pmt_vector_float"""
        return _trellis_swig.siso_combined_f_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(siso_combined_f_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.siso_combined_f_sptr_TYPE(self)

    def history(self):
        """history(siso_combined_f_sptr self) -> unsigned int"""
        return _trellis_swig.siso_combined_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(siso_combined_f_sptr self, int which, int delay)
        declare_sample_delay(siso_combined_f_sptr self, unsigned int delay)
        """
        return _trellis_swig.siso_combined_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(siso_combined_f_sptr self, int which) -> unsigned int"""
        return _trellis_swig.siso_combined_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(siso_combined_f_sptr self) -> double"""
        return _trellis_swig.siso_combined_f_sptr_relative_rate(self)

    def start(self):
        """start(siso_combined_f_sptr self) -> bool"""
        return _trellis_swig.siso_combined_f_sptr_start(self)

    def stop(self):
        """stop(siso_combined_f_sptr self) -> bool"""
        return _trellis_swig.siso_combined_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(siso_combined_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.siso_combined_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(siso_combined_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.siso_combined_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(siso_combined_f_sptr self, int m)"""
        return _trellis_swig.siso_combined_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(siso_combined_f_sptr self)"""
        return _trellis_swig.siso_combined_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(siso_combined_f_sptr self) -> bool"""
        return _trellis_swig.siso_combined_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(siso_combined_f_sptr self, int m)"""
        return _trellis_swig.siso_combined_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(siso_combined_f_sptr self, int i) -> long"""
        return _trellis_swig.siso_combined_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(siso_combined_f_sptr self, long max_output_buffer)
        set_max_output_buffer(siso_combined_f_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.siso_combined_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(siso_combined_f_sptr self, int i) -> long"""
        return _trellis_swig.siso_combined_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(siso_combined_f_sptr self, long min_output_buffer)
        set_min_output_buffer(siso_combined_f_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.siso_combined_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(siso_combined_f_sptr self, int which) -> float
        pc_input_buffers_full(siso_combined_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_combined_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(siso_combined_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(siso_combined_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_combined_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(siso_combined_f_sptr self, int which) -> float
        pc_input_buffers_full_var(siso_combined_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_combined_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(siso_combined_f_sptr self, int which) -> float
        pc_output_buffers_full(siso_combined_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_combined_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(siso_combined_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(siso_combined_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_combined_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(siso_combined_f_sptr self, int which) -> float
        pc_output_buffers_full_var(siso_combined_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_combined_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(siso_combined_f_sptr self) -> float"""
        return _trellis_swig.siso_combined_f_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(siso_combined_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.siso_combined_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(siso_combined_f_sptr self)"""
        return _trellis_swig.siso_combined_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(siso_combined_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.siso_combined_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(siso_combined_f_sptr self) -> int"""
        return _trellis_swig.siso_combined_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(siso_combined_f_sptr self, int priority) -> int"""
        return _trellis_swig.siso_combined_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(siso_combined_f_sptr self) -> std::string"""
        return _trellis_swig.siso_combined_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(siso_combined_f_sptr self) -> std::string"""
        return _trellis_swig.siso_combined_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(siso_combined_f_sptr self) -> io_signature_sptr"""
        return _trellis_swig.siso_combined_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(siso_combined_f_sptr self) -> io_signature_sptr"""
        return _trellis_swig.siso_combined_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(siso_combined_f_sptr self) -> long"""
        return _trellis_swig.siso_combined_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(siso_combined_f_sptr self) -> basic_block_sptr"""
        return _trellis_swig.siso_combined_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(siso_combined_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.siso_combined_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(siso_combined_f_sptr self) -> std::string"""
        return _trellis_swig.siso_combined_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(siso_combined_f_sptr self, std::string name)"""
        return _trellis_swig.siso_combined_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(siso_combined_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.siso_combined_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(siso_combined_f_sptr self) -> swig_int_ptr"""
        return _trellis_swig.siso_combined_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(siso_combined_f_sptr self) -> swig_int_ptr"""
        return _trellis_swig.siso_combined_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(siso_combined_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.siso_combined_f_sptr_message_subscribers(self, *args, **kwargs)

siso_combined_f_sptr_swigregister = _trellis_swig.siso_combined_f_sptr_swigregister
siso_combined_f_sptr_swigregister(siso_combined_f_sptr)

siso_combined_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
siso_combined_f = siso_combined_f.make;

class siso_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::siso_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::siso_f)> self) -> siso_f_sptr
        __init__(boost::shared_ptr<(gr::trellis::siso_f)> self, siso_f p) -> siso_f_sptr
        """
        this = _trellis_swig.new_siso_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(siso_f_sptr self) -> siso_f"""
        return _trellis_swig.siso_f_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_siso_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(siso_f_sptr self, fsm FSM, int K, int S0, int SK, bool POSTI, bool POSTO, gr::trellis::siso_type_t d_SISO_TYPE) -> siso_f_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            POSTI : 
            POSTO : 
            d_SISO_TYPE : 
        """
        return _trellis_swig.siso_f_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(siso_f_sptr self) -> fsm"""
        return _trellis_swig.siso_f_sptr_FSM(self)

    def K(self):
        """K(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_K(self)

    def S0(self):
        """S0(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_S0(self)

    def SK(self):
        """SK(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_SK(self)

    def POSTI(self):
        """POSTI(siso_f_sptr self) -> bool"""
        return _trellis_swig.siso_f_sptr_POSTI(self)

    def POSTO(self):
        """POSTO(siso_f_sptr self) -> bool"""
        return _trellis_swig.siso_f_sptr_POSTO(self)

    def SISO_TYPE(self):
        """SISO_TYPE(siso_f_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.siso_f_sptr_SISO_TYPE(self)

    def history(self):
        """history(siso_f_sptr self) -> unsigned int"""
        return _trellis_swig.siso_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(siso_f_sptr self, int which, int delay)
        declare_sample_delay(siso_f_sptr self, unsigned int delay)
        """
        return _trellis_swig.siso_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(siso_f_sptr self, int which) -> unsigned int"""
        return _trellis_swig.siso_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(siso_f_sptr self) -> double"""
        return _trellis_swig.siso_f_sptr_relative_rate(self)

    def start(self):
        """start(siso_f_sptr self) -> bool"""
        return _trellis_swig.siso_f_sptr_start(self)

    def stop(self):
        """stop(siso_f_sptr self) -> bool"""
        return _trellis_swig.siso_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(siso_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.siso_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(siso_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.siso_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(siso_f_sptr self, int m)"""
        return _trellis_swig.siso_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(siso_f_sptr self)"""
        return _trellis_swig.siso_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(siso_f_sptr self) -> bool"""
        return _trellis_swig.siso_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(siso_f_sptr self, int m)"""
        return _trellis_swig.siso_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(siso_f_sptr self, int i) -> long"""
        return _trellis_swig.siso_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(siso_f_sptr self, long max_output_buffer)
        set_max_output_buffer(siso_f_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.siso_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(siso_f_sptr self, int i) -> long"""
        return _trellis_swig.siso_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(siso_f_sptr self, long min_output_buffer)
        set_min_output_buffer(siso_f_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.siso_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(siso_f_sptr self, int which) -> float
        pc_input_buffers_full(siso_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(siso_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(siso_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(siso_f_sptr self, int which) -> float
        pc_input_buffers_full_var(siso_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(siso_f_sptr self, int which) -> float
        pc_output_buffers_full(siso_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(siso_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(siso_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(siso_f_sptr self, int which) -> float
        pc_output_buffers_full_var(siso_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.siso_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(siso_f_sptr self) -> float"""
        return _trellis_swig.siso_f_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(siso_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.siso_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(siso_f_sptr self)"""
        return _trellis_swig.siso_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(siso_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.siso_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(siso_f_sptr self) -> int"""
        return _trellis_swig.siso_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(siso_f_sptr self, int priority) -> int"""
        return _trellis_swig.siso_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(siso_f_sptr self) -> std::string"""
        return _trellis_swig.siso_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(siso_f_sptr self) -> std::string"""
        return _trellis_swig.siso_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(siso_f_sptr self) -> io_signature_sptr"""
        return _trellis_swig.siso_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(siso_f_sptr self) -> io_signature_sptr"""
        return _trellis_swig.siso_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(siso_f_sptr self) -> long"""
        return _trellis_swig.siso_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(siso_f_sptr self) -> basic_block_sptr"""
        return _trellis_swig.siso_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(siso_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.siso_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(siso_f_sptr self) -> std::string"""
        return _trellis_swig.siso_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(siso_f_sptr self, std::string name)"""
        return _trellis_swig.siso_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(siso_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.siso_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(siso_f_sptr self) -> swig_int_ptr"""
        return _trellis_swig.siso_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(siso_f_sptr self) -> swig_int_ptr"""
        return _trellis_swig.siso_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(siso_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.siso_f_sptr_message_subscribers(self, *args, **kwargs)

siso_f_sptr_swigregister = _trellis_swig.siso_f_sptr_swigregister
siso_f_sptr_swigregister(siso_f_sptr)

siso_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
siso_f = siso_f.make;

class encoder_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::encoder_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::encoder_bb)> self) -> encoder_bb_sptr
        __init__(boost::shared_ptr<(gr::trellis::encoder_bb)> self, encoder_bb p) -> encoder_bb_sptr
        """
        this = _trellis_swig.new_encoder_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(encoder_bb_sptr self) -> encoder_bb"""
        return _trellis_swig.encoder_bb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(encoder_bb_sptr self, fsm FSM, int ST) -> encoder_bb_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_bb_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(encoder_bb_sptr self) -> fsm"""
        return _trellis_swig.encoder_bb_sptr_FSM(self)

    def ST(self):
        """ST(encoder_bb_sptr self) -> int"""
        return _trellis_swig.encoder_bb_sptr_ST(self)

    def history(self):
        """history(encoder_bb_sptr self) -> unsigned int"""
        return _trellis_swig.encoder_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encoder_bb_sptr self, int which, int delay)
        declare_sample_delay(encoder_bb_sptr self, unsigned int delay)
        """
        return _trellis_swig.encoder_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(encoder_bb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.encoder_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(encoder_bb_sptr self) -> int"""
        return _trellis_swig.encoder_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(encoder_bb_sptr self) -> double"""
        return _trellis_swig.encoder_bb_sptr_relative_rate(self)

    def start(self):
        """start(encoder_bb_sptr self) -> bool"""
        return _trellis_swig.encoder_bb_sptr_start(self)

    def stop(self):
        """stop(encoder_bb_sptr self) -> bool"""
        return _trellis_swig.encoder_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(encoder_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.encoder_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(encoder_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.encoder_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(encoder_bb_sptr self) -> int"""
        return _trellis_swig.encoder_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(encoder_bb_sptr self, int m)"""
        return _trellis_swig.encoder_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encoder_bb_sptr self)"""
        return _trellis_swig.encoder_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encoder_bb_sptr self) -> bool"""
        return _trellis_swig.encoder_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(encoder_bb_sptr self, int m)"""
        return _trellis_swig.encoder_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(encoder_bb_sptr self) -> int"""
        return _trellis_swig.encoder_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(encoder_bb_sptr self, int i) -> long"""
        return _trellis_swig.encoder_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encoder_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(encoder_bb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.encoder_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(encoder_bb_sptr self, int i) -> long"""
        return _trellis_swig.encoder_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encoder_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(encoder_bb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.encoder_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full(encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full(encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(encoder_bb_sptr self) -> float"""
        return _trellis_swig.encoder_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(encoder_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.encoder_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(encoder_bb_sptr self)"""
        return _trellis_swig.encoder_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(encoder_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.encoder_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(encoder_bb_sptr self) -> int"""
        return _trellis_swig.encoder_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(encoder_bb_sptr self) -> int"""
        return _trellis_swig.encoder_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(encoder_bb_sptr self, int priority) -> int"""
        return _trellis_swig.encoder_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.encoder_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.encoder_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(encoder_bb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(encoder_bb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(encoder_bb_sptr self) -> long"""
        return _trellis_swig.encoder_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(encoder_bb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.encoder_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(encoder_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.encoder_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.encoder_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(encoder_bb_sptr self, std::string name)"""
        return _trellis_swig.encoder_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(encoder_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.encoder_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(encoder_bb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(encoder_bb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(encoder_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.encoder_bb_sptr_message_subscribers(self, *args, **kwargs)

encoder_bb_sptr_swigregister = _trellis_swig.encoder_bb_sptr_swigregister
encoder_bb_sptr_swigregister(encoder_bb_sptr)

encoder_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encoder_bb = encoder_bb.make;

class encoder_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::encoder_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::encoder_bs)> self) -> encoder_bs_sptr
        __init__(boost::shared_ptr<(gr::trellis::encoder_bs)> self, encoder_bs p) -> encoder_bs_sptr
        """
        this = _trellis_swig.new_encoder_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(encoder_bs_sptr self) -> encoder_bs"""
        return _trellis_swig.encoder_bs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_bs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(encoder_bs_sptr self, fsm FSM, int ST) -> encoder_bs_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_bs_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(encoder_bs_sptr self) -> fsm"""
        return _trellis_swig.encoder_bs_sptr_FSM(self)

    def ST(self):
        """ST(encoder_bs_sptr self) -> int"""
        return _trellis_swig.encoder_bs_sptr_ST(self)

    def history(self):
        """history(encoder_bs_sptr self) -> unsigned int"""
        return _trellis_swig.encoder_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encoder_bs_sptr self, int which, int delay)
        declare_sample_delay(encoder_bs_sptr self, unsigned int delay)
        """
        return _trellis_swig.encoder_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(encoder_bs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.encoder_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(encoder_bs_sptr self) -> int"""
        return _trellis_swig.encoder_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(encoder_bs_sptr self) -> double"""
        return _trellis_swig.encoder_bs_sptr_relative_rate(self)

    def start(self):
        """start(encoder_bs_sptr self) -> bool"""
        return _trellis_swig.encoder_bs_sptr_start(self)

    def stop(self):
        """stop(encoder_bs_sptr self) -> bool"""
        return _trellis_swig.encoder_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(encoder_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.encoder_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(encoder_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.encoder_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(encoder_bs_sptr self) -> int"""
        return _trellis_swig.encoder_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(encoder_bs_sptr self, int m)"""
        return _trellis_swig.encoder_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encoder_bs_sptr self)"""
        return _trellis_swig.encoder_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encoder_bs_sptr self) -> bool"""
        return _trellis_swig.encoder_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(encoder_bs_sptr self, int m)"""
        return _trellis_swig.encoder_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(encoder_bs_sptr self) -> int"""
        return _trellis_swig.encoder_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(encoder_bs_sptr self, int i) -> long"""
        return _trellis_swig.encoder_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encoder_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(encoder_bs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.encoder_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(encoder_bs_sptr self, int i) -> long"""
        return _trellis_swig.encoder_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encoder_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(encoder_bs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.encoder_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full(encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full(encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(encoder_bs_sptr self) -> float"""
        return _trellis_swig.encoder_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(encoder_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.encoder_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(encoder_bs_sptr self)"""
        return _trellis_swig.encoder_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(encoder_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.encoder_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(encoder_bs_sptr self) -> int"""
        return _trellis_swig.encoder_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(encoder_bs_sptr self) -> int"""
        return _trellis_swig.encoder_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(encoder_bs_sptr self, int priority) -> int"""
        return _trellis_swig.encoder_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.encoder_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.encoder_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(encoder_bs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(encoder_bs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(encoder_bs_sptr self) -> long"""
        return _trellis_swig.encoder_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(encoder_bs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.encoder_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(encoder_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.encoder_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.encoder_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(encoder_bs_sptr self, std::string name)"""
        return _trellis_swig.encoder_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(encoder_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.encoder_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(encoder_bs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(encoder_bs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(encoder_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.encoder_bs_sptr_message_subscribers(self, *args, **kwargs)

encoder_bs_sptr_swigregister = _trellis_swig.encoder_bs_sptr_swigregister
encoder_bs_sptr_swigregister(encoder_bs_sptr)

encoder_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encoder_bs = encoder_bs.make;

class encoder_bi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::encoder_bi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::encoder_bi)> self) -> encoder_bi_sptr
        __init__(boost::shared_ptr<(gr::trellis::encoder_bi)> self, encoder_bi p) -> encoder_bi_sptr
        """
        this = _trellis_swig.new_encoder_bi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(encoder_bi_sptr self) -> encoder_bi"""
        return _trellis_swig.encoder_bi_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_bi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(encoder_bi_sptr self, fsm FSM, int ST) -> encoder_bi_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_bi_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(encoder_bi_sptr self) -> fsm"""
        return _trellis_swig.encoder_bi_sptr_FSM(self)

    def ST(self):
        """ST(encoder_bi_sptr self) -> int"""
        return _trellis_swig.encoder_bi_sptr_ST(self)

    def history(self):
        """history(encoder_bi_sptr self) -> unsigned int"""
        return _trellis_swig.encoder_bi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encoder_bi_sptr self, int which, int delay)
        declare_sample_delay(encoder_bi_sptr self, unsigned int delay)
        """
        return _trellis_swig.encoder_bi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(encoder_bi_sptr self, int which) -> unsigned int"""
        return _trellis_swig.encoder_bi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(encoder_bi_sptr self) -> int"""
        return _trellis_swig.encoder_bi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(encoder_bi_sptr self) -> double"""
        return _trellis_swig.encoder_bi_sptr_relative_rate(self)

    def start(self):
        """start(encoder_bi_sptr self) -> bool"""
        return _trellis_swig.encoder_bi_sptr_start(self)

    def stop(self):
        """stop(encoder_bi_sptr self) -> bool"""
        return _trellis_swig.encoder_bi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(encoder_bi_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.encoder_bi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(encoder_bi_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.encoder_bi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(encoder_bi_sptr self) -> int"""
        return _trellis_swig.encoder_bi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(encoder_bi_sptr self, int m)"""
        return _trellis_swig.encoder_bi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encoder_bi_sptr self)"""
        return _trellis_swig.encoder_bi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encoder_bi_sptr self) -> bool"""
        return _trellis_swig.encoder_bi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(encoder_bi_sptr self, int m)"""
        return _trellis_swig.encoder_bi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(encoder_bi_sptr self) -> int"""
        return _trellis_swig.encoder_bi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(encoder_bi_sptr self, int i) -> long"""
        return _trellis_swig.encoder_bi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encoder_bi_sptr self, long max_output_buffer)
        set_max_output_buffer(encoder_bi_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.encoder_bi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(encoder_bi_sptr self, int i) -> long"""
        return _trellis_swig.encoder_bi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encoder_bi_sptr self, long min_output_buffer)
        set_min_output_buffer(encoder_bi_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.encoder_bi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full(encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full_avg(encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full_var(encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full(encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full_avg(encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full_var(encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_bi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(encoder_bi_sptr self) -> float"""
        return _trellis_swig.encoder_bi_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(encoder_bi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.encoder_bi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(encoder_bi_sptr self)"""
        return _trellis_swig.encoder_bi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(encoder_bi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.encoder_bi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(encoder_bi_sptr self) -> int"""
        return _trellis_swig.encoder_bi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(encoder_bi_sptr self) -> int"""
        return _trellis_swig.encoder_bi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(encoder_bi_sptr self, int priority) -> int"""
        return _trellis_swig.encoder_bi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.encoder_bi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.encoder_bi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(encoder_bi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_bi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(encoder_bi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_bi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(encoder_bi_sptr self) -> long"""
        return _trellis_swig.encoder_bi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(encoder_bi_sptr self) -> basic_block_sptr"""
        return _trellis_swig.encoder_bi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(encoder_bi_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.encoder_bi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.encoder_bi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(encoder_bi_sptr self, std::string name)"""
        return _trellis_swig.encoder_bi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(encoder_bi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.encoder_bi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(encoder_bi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_bi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(encoder_bi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_bi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(encoder_bi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.encoder_bi_sptr_message_subscribers(self, *args, **kwargs)

encoder_bi_sptr_swigregister = _trellis_swig.encoder_bi_sptr_swigregister
encoder_bi_sptr_swigregister(encoder_bi_sptr)

encoder_bi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encoder_bi = encoder_bi.make;

class encoder_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::encoder_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::encoder_ss)> self) -> encoder_ss_sptr
        __init__(boost::shared_ptr<(gr::trellis::encoder_ss)> self, encoder_ss p) -> encoder_ss_sptr
        """
        this = _trellis_swig.new_encoder_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(encoder_ss_sptr self) -> encoder_ss"""
        return _trellis_swig.encoder_ss_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(encoder_ss_sptr self, fsm FSM, int ST) -> encoder_ss_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_ss_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(encoder_ss_sptr self) -> fsm"""
        return _trellis_swig.encoder_ss_sptr_FSM(self)

    def ST(self):
        """ST(encoder_ss_sptr self) -> int"""
        return _trellis_swig.encoder_ss_sptr_ST(self)

    def history(self):
        """history(encoder_ss_sptr self) -> unsigned int"""
        return _trellis_swig.encoder_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encoder_ss_sptr self, int which, int delay)
        declare_sample_delay(encoder_ss_sptr self, unsigned int delay)
        """
        return _trellis_swig.encoder_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(encoder_ss_sptr self, int which) -> unsigned int"""
        return _trellis_swig.encoder_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(encoder_ss_sptr self) -> int"""
        return _trellis_swig.encoder_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(encoder_ss_sptr self) -> double"""
        return _trellis_swig.encoder_ss_sptr_relative_rate(self)

    def start(self):
        """start(encoder_ss_sptr self) -> bool"""
        return _trellis_swig.encoder_ss_sptr_start(self)

    def stop(self):
        """stop(encoder_ss_sptr self) -> bool"""
        return _trellis_swig.encoder_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(encoder_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.encoder_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(encoder_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.encoder_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(encoder_ss_sptr self) -> int"""
        return _trellis_swig.encoder_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(encoder_ss_sptr self, int m)"""
        return _trellis_swig.encoder_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encoder_ss_sptr self)"""
        return _trellis_swig.encoder_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encoder_ss_sptr self) -> bool"""
        return _trellis_swig.encoder_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(encoder_ss_sptr self, int m)"""
        return _trellis_swig.encoder_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(encoder_ss_sptr self) -> int"""
        return _trellis_swig.encoder_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(encoder_ss_sptr self, int i) -> long"""
        return _trellis_swig.encoder_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encoder_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(encoder_ss_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.encoder_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(encoder_ss_sptr self, int i) -> long"""
        return _trellis_swig.encoder_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encoder_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(encoder_ss_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.encoder_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full(encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full(encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(encoder_ss_sptr self) -> float"""
        return _trellis_swig.encoder_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(encoder_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.encoder_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(encoder_ss_sptr self)"""
        return _trellis_swig.encoder_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(encoder_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.encoder_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(encoder_ss_sptr self) -> int"""
        return _trellis_swig.encoder_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(encoder_ss_sptr self) -> int"""
        return _trellis_swig.encoder_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(encoder_ss_sptr self, int priority) -> int"""
        return _trellis_swig.encoder_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.encoder_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.encoder_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(encoder_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(encoder_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(encoder_ss_sptr self) -> long"""
        return _trellis_swig.encoder_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(encoder_ss_sptr self) -> basic_block_sptr"""
        return _trellis_swig.encoder_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(encoder_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.encoder_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.encoder_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(encoder_ss_sptr self, std::string name)"""
        return _trellis_swig.encoder_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(encoder_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.encoder_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(encoder_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(encoder_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(encoder_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.encoder_ss_sptr_message_subscribers(self, *args, **kwargs)

encoder_ss_sptr_swigregister = _trellis_swig.encoder_ss_sptr_swigregister
encoder_ss_sptr_swigregister(encoder_ss_sptr)

encoder_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encoder_ss = encoder_ss.make;

class encoder_si_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::encoder_si)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::encoder_si)> self) -> encoder_si_sptr
        __init__(boost::shared_ptr<(gr::trellis::encoder_si)> self, encoder_si p) -> encoder_si_sptr
        """
        this = _trellis_swig.new_encoder_si_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(encoder_si_sptr self) -> encoder_si"""
        return _trellis_swig.encoder_si_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_si_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(encoder_si_sptr self, fsm FSM, int ST) -> encoder_si_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_si_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(encoder_si_sptr self) -> fsm"""
        return _trellis_swig.encoder_si_sptr_FSM(self)

    def ST(self):
        """ST(encoder_si_sptr self) -> int"""
        return _trellis_swig.encoder_si_sptr_ST(self)

    def history(self):
        """history(encoder_si_sptr self) -> unsigned int"""
        return _trellis_swig.encoder_si_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encoder_si_sptr self, int which, int delay)
        declare_sample_delay(encoder_si_sptr self, unsigned int delay)
        """
        return _trellis_swig.encoder_si_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(encoder_si_sptr self, int which) -> unsigned int"""
        return _trellis_swig.encoder_si_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(encoder_si_sptr self) -> int"""
        return _trellis_swig.encoder_si_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(encoder_si_sptr self) -> double"""
        return _trellis_swig.encoder_si_sptr_relative_rate(self)

    def start(self):
        """start(encoder_si_sptr self) -> bool"""
        return _trellis_swig.encoder_si_sptr_start(self)

    def stop(self):
        """stop(encoder_si_sptr self) -> bool"""
        return _trellis_swig.encoder_si_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(encoder_si_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.encoder_si_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(encoder_si_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.encoder_si_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(encoder_si_sptr self) -> int"""
        return _trellis_swig.encoder_si_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(encoder_si_sptr self, int m)"""
        return _trellis_swig.encoder_si_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encoder_si_sptr self)"""
        return _trellis_swig.encoder_si_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encoder_si_sptr self) -> bool"""
        return _trellis_swig.encoder_si_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(encoder_si_sptr self, int m)"""
        return _trellis_swig.encoder_si_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(encoder_si_sptr self) -> int"""
        return _trellis_swig.encoder_si_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(encoder_si_sptr self, int i) -> long"""
        return _trellis_swig.encoder_si_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encoder_si_sptr self, long max_output_buffer)
        set_max_output_buffer(encoder_si_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.encoder_si_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(encoder_si_sptr self, int i) -> long"""
        return _trellis_swig.encoder_si_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encoder_si_sptr self, long min_output_buffer)
        set_min_output_buffer(encoder_si_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.encoder_si_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encoder_si_sptr self, int which) -> float
        pc_input_buffers_full(encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_si_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encoder_si_sptr self, int which) -> float
        pc_input_buffers_full_avg(encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_si_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encoder_si_sptr self, int which) -> float
        pc_input_buffers_full_var(encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_si_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encoder_si_sptr self, int which) -> float
        pc_output_buffers_full(encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_si_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encoder_si_sptr self, int which) -> float
        pc_output_buffers_full_avg(encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_si_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encoder_si_sptr self, int which) -> float
        pc_output_buffers_full_var(encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_si_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(encoder_si_sptr self) -> float"""
        return _trellis_swig.encoder_si_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(encoder_si_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.encoder_si_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(encoder_si_sptr self)"""
        return _trellis_swig.encoder_si_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(encoder_si_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.encoder_si_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(encoder_si_sptr self) -> int"""
        return _trellis_swig.encoder_si_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(encoder_si_sptr self) -> int"""
        return _trellis_swig.encoder_si_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(encoder_si_sptr self, int priority) -> int"""
        return _trellis_swig.encoder_si_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(encoder_si_sptr self) -> std::string"""
        return _trellis_swig.encoder_si_sptr_name(self)

    def symbol_name(self):
        """symbol_name(encoder_si_sptr self) -> std::string"""
        return _trellis_swig.encoder_si_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(encoder_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_si_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(encoder_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_si_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(encoder_si_sptr self) -> long"""
        return _trellis_swig.encoder_si_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(encoder_si_sptr self) -> basic_block_sptr"""
        return _trellis_swig.encoder_si_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(encoder_si_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.encoder_si_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(encoder_si_sptr self) -> std::string"""
        return _trellis_swig.encoder_si_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(encoder_si_sptr self, std::string name)"""
        return _trellis_swig.encoder_si_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(encoder_si_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.encoder_si_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(encoder_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_si_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(encoder_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_si_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(encoder_si_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.encoder_si_sptr_message_subscribers(self, *args, **kwargs)

encoder_si_sptr_swigregister = _trellis_swig.encoder_si_sptr_swigregister
encoder_si_sptr_swigregister(encoder_si_sptr)

encoder_si_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encoder_si = encoder_si.make;

class encoder_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::encoder_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::encoder_ii)> self) -> encoder_ii_sptr
        __init__(boost::shared_ptr<(gr::trellis::encoder_ii)> self, encoder_ii p) -> encoder_ii_sptr
        """
        this = _trellis_swig.new_encoder_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(encoder_ii_sptr self) -> encoder_ii"""
        return _trellis_swig.encoder_ii_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_encoder_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(encoder_ii_sptr self, fsm FSM, int ST) -> encoder_ii_sptr

        Convolutional encoder.

        Constructor Specific Documentation:



        Args:
            FSM : 
            ST : 
        """
        return _trellis_swig.encoder_ii_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(encoder_ii_sptr self) -> fsm"""
        return _trellis_swig.encoder_ii_sptr_FSM(self)

    def ST(self):
        """ST(encoder_ii_sptr self) -> int"""
        return _trellis_swig.encoder_ii_sptr_ST(self)

    def history(self):
        """history(encoder_ii_sptr self) -> unsigned int"""
        return _trellis_swig.encoder_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encoder_ii_sptr self, int which, int delay)
        declare_sample_delay(encoder_ii_sptr self, unsigned int delay)
        """
        return _trellis_swig.encoder_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(encoder_ii_sptr self, int which) -> unsigned int"""
        return _trellis_swig.encoder_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(encoder_ii_sptr self) -> int"""
        return _trellis_swig.encoder_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(encoder_ii_sptr self) -> double"""
        return _trellis_swig.encoder_ii_sptr_relative_rate(self)

    def start(self):
        """start(encoder_ii_sptr self) -> bool"""
        return _trellis_swig.encoder_ii_sptr_start(self)

    def stop(self):
        """stop(encoder_ii_sptr self) -> bool"""
        return _trellis_swig.encoder_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(encoder_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.encoder_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(encoder_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.encoder_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(encoder_ii_sptr self) -> int"""
        return _trellis_swig.encoder_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(encoder_ii_sptr self, int m)"""
        return _trellis_swig.encoder_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encoder_ii_sptr self)"""
        return _trellis_swig.encoder_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encoder_ii_sptr self) -> bool"""
        return _trellis_swig.encoder_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(encoder_ii_sptr self, int m)"""
        return _trellis_swig.encoder_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(encoder_ii_sptr self) -> int"""
        return _trellis_swig.encoder_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(encoder_ii_sptr self, int i) -> long"""
        return _trellis_swig.encoder_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encoder_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(encoder_ii_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.encoder_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(encoder_ii_sptr self, int i) -> long"""
        return _trellis_swig.encoder_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encoder_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(encoder_ii_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.encoder_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full(encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full(encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.encoder_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(encoder_ii_sptr self) -> float"""
        return _trellis_swig.encoder_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(encoder_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.encoder_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(encoder_ii_sptr self)"""
        return _trellis_swig.encoder_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(encoder_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.encoder_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(encoder_ii_sptr self) -> int"""
        return _trellis_swig.encoder_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(encoder_ii_sptr self) -> int"""
        return _trellis_swig.encoder_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(encoder_ii_sptr self, int priority) -> int"""
        return _trellis_swig.encoder_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.encoder_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.encoder_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(encoder_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(encoder_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.encoder_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(encoder_ii_sptr self) -> long"""
        return _trellis_swig.encoder_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(encoder_ii_sptr self) -> basic_block_sptr"""
        return _trellis_swig.encoder_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(encoder_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.encoder_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.encoder_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(encoder_ii_sptr self, std::string name)"""
        return _trellis_swig.encoder_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(encoder_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.encoder_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(encoder_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(encoder_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.encoder_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(encoder_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.encoder_ii_sptr_message_subscribers(self, *args, **kwargs)

encoder_ii_sptr_swigregister = _trellis_swig.encoder_ii_sptr_swigregister
encoder_ii_sptr_swigregister(encoder_ii_sptr)

encoder_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encoder_ii = encoder_ii.make;

class sccc_encoder_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_encoder_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_bb)> self) -> sccc_encoder_bb_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_bb)> self, sccc_encoder_bb p) -> sccc_encoder_bb_sptr
        """
        this = _trellis_swig.new_sccc_encoder_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_encoder_bb_sptr self) -> sccc_encoder_bb"""
        return _trellis_swig.sccc_encoder_bb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_encoder_bb_sptr self, fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bb_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_bb_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_encoder_bb_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_bb_sptr_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_bb_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_bb_sptr_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_bb_sptr self) -> interleaver"""
        return _trellis_swig.sccc_encoder_bb_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_blocklength(self)

    def history(self):
        """history(sccc_encoder_bb_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_encoder_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_encoder_bb_sptr self, int which, int delay)
        declare_sample_delay(sccc_encoder_bb_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_encoder_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_encoder_bb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_encoder_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_encoder_bb_sptr self) -> double"""
        return _trellis_swig.sccc_encoder_bb_sptr_relative_rate(self)

    def start(self):
        """start(sccc_encoder_bb_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bb_sptr_start(self)

    def stop(self):
        """stop(sccc_encoder_bb_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_encoder_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_encoder_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_encoder_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_encoder_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_encoder_bb_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_encoder_bb_sptr self)"""
        return _trellis_swig.sccc_encoder_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_encoder_bb_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_encoder_bb_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_encoder_bb_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_encoder_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_encoder_bb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_encoder_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_encoder_bb_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_encoder_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_encoder_bb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_encoder_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full(sccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full(sccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_encoder_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_encoder_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_encoder_bb_sptr self)"""
        return _trellis_swig.sccc_encoder_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_encoder_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_encoder_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_encoder_bb_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_encoder_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_encoder_bb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_encoder_bb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_encoder_bb_sptr self) -> long"""
        return _trellis_swig.sccc_encoder_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_encoder_bb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_encoder_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_encoder_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_encoder_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_encoder_bb_sptr self, std::string name)"""
        return _trellis_swig.sccc_encoder_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_encoder_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_encoder_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_encoder_bb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_encoder_bb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_encoder_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bb_sptr_message_subscribers(self, *args, **kwargs)

sccc_encoder_bb_sptr_swigregister = _trellis_swig.sccc_encoder_bb_sptr_swigregister
sccc_encoder_bb_sptr_swigregister(sccc_encoder_bb_sptr)

sccc_encoder_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_encoder_bb = sccc_encoder_bb.make;

class sccc_encoder_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_encoder_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_bs)> self) -> sccc_encoder_bs_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_bs)> self, sccc_encoder_bs p) -> sccc_encoder_bs_sptr
        """
        this = _trellis_swig.new_sccc_encoder_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_encoder_bs_sptr self) -> sccc_encoder_bs"""
        return _trellis_swig.sccc_encoder_bs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_bs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_encoder_bs_sptr self, fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bs_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_bs_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_encoder_bs_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_bs_sptr_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_bs_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_bs_sptr_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_bs_sptr self) -> interleaver"""
        return _trellis_swig.sccc_encoder_bs_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_blocklength(self)

    def history(self):
        """history(sccc_encoder_bs_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_encoder_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_encoder_bs_sptr self, int which, int delay)
        declare_sample_delay(sccc_encoder_bs_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_encoder_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_encoder_bs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_encoder_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_encoder_bs_sptr self) -> double"""
        return _trellis_swig.sccc_encoder_bs_sptr_relative_rate(self)

    def start(self):
        """start(sccc_encoder_bs_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bs_sptr_start(self)

    def stop(self):
        """stop(sccc_encoder_bs_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_encoder_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_encoder_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_encoder_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_encoder_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_encoder_bs_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_encoder_bs_sptr self)"""
        return _trellis_swig.sccc_encoder_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_encoder_bs_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_encoder_bs_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_encoder_bs_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_encoder_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_encoder_bs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_encoder_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_encoder_bs_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_encoder_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_encoder_bs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_encoder_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full(sccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full(sccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_encoder_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_encoder_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_encoder_bs_sptr self)"""
        return _trellis_swig.sccc_encoder_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_encoder_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_encoder_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_encoder_bs_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_encoder_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_encoder_bs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_encoder_bs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_encoder_bs_sptr self) -> long"""
        return _trellis_swig.sccc_encoder_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_encoder_bs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_encoder_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_encoder_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_encoder_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_encoder_bs_sptr self, std::string name)"""
        return _trellis_swig.sccc_encoder_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_encoder_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_encoder_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_encoder_bs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_encoder_bs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_encoder_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bs_sptr_message_subscribers(self, *args, **kwargs)

sccc_encoder_bs_sptr_swigregister = _trellis_swig.sccc_encoder_bs_sptr_swigregister
sccc_encoder_bs_sptr_swigregister(sccc_encoder_bs_sptr)

sccc_encoder_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_encoder_bs = sccc_encoder_bs.make;

class sccc_encoder_bi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_encoder_bi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_bi)> self) -> sccc_encoder_bi_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_bi)> self, sccc_encoder_bi p) -> sccc_encoder_bi_sptr
        """
        this = _trellis_swig.new_sccc_encoder_bi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_encoder_bi_sptr self) -> sccc_encoder_bi"""
        return _trellis_swig.sccc_encoder_bi_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_bi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_encoder_bi_sptr self, fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_bi_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_bi_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_encoder_bi_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_bi_sptr_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_bi_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_bi_sptr_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_bi_sptr self) -> interleaver"""
        return _trellis_swig.sccc_encoder_bi_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_blocklength(self)

    def history(self):
        """history(sccc_encoder_bi_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_encoder_bi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_encoder_bi_sptr self, int which, int delay)
        declare_sample_delay(sccc_encoder_bi_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_encoder_bi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_encoder_bi_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_encoder_bi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_encoder_bi_sptr self) -> double"""
        return _trellis_swig.sccc_encoder_bi_sptr_relative_rate(self)

    def start(self):
        """start(sccc_encoder_bi_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bi_sptr_start(self)

    def stop(self):
        """stop(sccc_encoder_bi_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_encoder_bi_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_encoder_bi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_encoder_bi_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_encoder_bi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_encoder_bi_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_bi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_encoder_bi_sptr self)"""
        return _trellis_swig.sccc_encoder_bi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_encoder_bi_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_bi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_encoder_bi_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_bi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_encoder_bi_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_bi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_encoder_bi_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_encoder_bi_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_encoder_bi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_encoder_bi_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_bi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_encoder_bi_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_encoder_bi_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_encoder_bi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full(sccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full(sccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_bi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_bi_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_encoder_bi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_encoder_bi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_encoder_bi_sptr self)"""
        return _trellis_swig.sccc_encoder_bi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_encoder_bi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_encoder_bi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_encoder_bi_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_encoder_bi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_encoder_bi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_bi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_encoder_bi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_bi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_encoder_bi_sptr self) -> long"""
        return _trellis_swig.sccc_encoder_bi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_encoder_bi_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_encoder_bi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_encoder_bi_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_encoder_bi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_bi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_encoder_bi_sptr self, std::string name)"""
        return _trellis_swig.sccc_encoder_bi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_encoder_bi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_encoder_bi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_encoder_bi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_encoder_bi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_encoder_bi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_bi_sptr_message_subscribers(self, *args, **kwargs)

sccc_encoder_bi_sptr_swigregister = _trellis_swig.sccc_encoder_bi_sptr_swigregister
sccc_encoder_bi_sptr_swigregister(sccc_encoder_bi_sptr)

sccc_encoder_bi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_encoder_bi = sccc_encoder_bi.make;

class sccc_encoder_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_encoder_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_ss)> self) -> sccc_encoder_ss_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_ss)> self, sccc_encoder_ss p) -> sccc_encoder_ss_sptr
        """
        this = _trellis_swig.new_sccc_encoder_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_encoder_ss_sptr self) -> sccc_encoder_ss"""
        return _trellis_swig.sccc_encoder_ss_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_encoder_ss_sptr self, fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_ss_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_ss_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_encoder_ss_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_ss_sptr_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_ss_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_ss_sptr_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_ss_sptr self) -> interleaver"""
        return _trellis_swig.sccc_encoder_ss_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_blocklength(self)

    def history(self):
        """history(sccc_encoder_ss_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_encoder_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_encoder_ss_sptr self, int which, int delay)
        declare_sample_delay(sccc_encoder_ss_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_encoder_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_encoder_ss_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_encoder_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_encoder_ss_sptr self) -> double"""
        return _trellis_swig.sccc_encoder_ss_sptr_relative_rate(self)

    def start(self):
        """start(sccc_encoder_ss_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_ss_sptr_start(self)

    def stop(self):
        """stop(sccc_encoder_ss_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_encoder_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_encoder_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_encoder_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_encoder_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_encoder_ss_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_encoder_ss_sptr self)"""
        return _trellis_swig.sccc_encoder_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_encoder_ss_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_encoder_ss_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_encoder_ss_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_encoder_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_encoder_ss_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_encoder_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_encoder_ss_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_encoder_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_encoder_ss_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_encoder_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full(sccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full(sccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_encoder_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_encoder_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_encoder_ss_sptr self)"""
        return _trellis_swig.sccc_encoder_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_encoder_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_encoder_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_encoder_ss_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_encoder_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_encoder_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_encoder_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_encoder_ss_sptr self) -> long"""
        return _trellis_swig.sccc_encoder_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_encoder_ss_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_encoder_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_encoder_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_encoder_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_encoder_ss_sptr self, std::string name)"""
        return _trellis_swig.sccc_encoder_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_encoder_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_encoder_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_encoder_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_encoder_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_encoder_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_ss_sptr_message_subscribers(self, *args, **kwargs)

sccc_encoder_ss_sptr_swigregister = _trellis_swig.sccc_encoder_ss_sptr_swigregister
sccc_encoder_ss_sptr_swigregister(sccc_encoder_ss_sptr)

sccc_encoder_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_encoder_ss = sccc_encoder_ss.make;

class sccc_encoder_si_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_encoder_si)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_si)> self) -> sccc_encoder_si_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_si)> self, sccc_encoder_si p) -> sccc_encoder_si_sptr
        """
        this = _trellis_swig.new_sccc_encoder_si_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_encoder_si_sptr self) -> sccc_encoder_si"""
        return _trellis_swig.sccc_encoder_si_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_si_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_encoder_si_sptr self, fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_si_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_si_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_encoder_si_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_si_sptr_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_si_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_si_sptr_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_si_sptr self) -> interleaver"""
        return _trellis_swig.sccc_encoder_si_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_blocklength(self)

    def history(self):
        """history(sccc_encoder_si_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_encoder_si_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_encoder_si_sptr self, int which, int delay)
        declare_sample_delay(sccc_encoder_si_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_encoder_si_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_encoder_si_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_encoder_si_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_encoder_si_sptr self) -> double"""
        return _trellis_swig.sccc_encoder_si_sptr_relative_rate(self)

    def start(self):
        """start(sccc_encoder_si_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_si_sptr_start(self)

    def stop(self):
        """stop(sccc_encoder_si_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_si_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_encoder_si_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_encoder_si_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_encoder_si_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_encoder_si_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_encoder_si_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_si_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_encoder_si_sptr self)"""
        return _trellis_swig.sccc_encoder_si_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_encoder_si_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_si_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_encoder_si_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_si_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_encoder_si_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_si_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_encoder_si_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_encoder_si_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_encoder_si_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_encoder_si_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_si_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_encoder_si_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_encoder_si_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_encoder_si_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_encoder_si_sptr self, int which) -> float
        pc_input_buffers_full(sccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_si_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_encoder_si_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_si_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_encoder_si_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_si_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_encoder_si_sptr self, int which) -> float
        pc_output_buffers_full(sccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_si_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_encoder_si_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_si_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_encoder_si_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_si_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_si_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_encoder_si_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_encoder_si_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_encoder_si_sptr self)"""
        return _trellis_swig.sccc_encoder_si_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_encoder_si_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_encoder_si_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_encoder_si_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_encoder_si_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_encoder_si_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_si_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_encoder_si_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_si_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_encoder_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_si_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_encoder_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_si_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_encoder_si_sptr self) -> long"""
        return _trellis_swig.sccc_encoder_si_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_encoder_si_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_encoder_si_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_encoder_si_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_encoder_si_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_encoder_si_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_si_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_encoder_si_sptr self, std::string name)"""
        return _trellis_swig.sccc_encoder_si_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_encoder_si_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_encoder_si_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_encoder_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_si_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_encoder_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_si_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_encoder_si_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_si_sptr_message_subscribers(self, *args, **kwargs)

sccc_encoder_si_sptr_swigregister = _trellis_swig.sccc_encoder_si_sptr_swigregister
sccc_encoder_si_sptr_swigregister(sccc_encoder_si_sptr)

sccc_encoder_si_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_encoder_si = sccc_encoder_si.make;

class sccc_encoder_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_encoder_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_ii)> self) -> sccc_encoder_ii_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_encoder_ii)> self, sccc_encoder_ii p) -> sccc_encoder_ii_sptr
        """
        this = _trellis_swig.new_sccc_encoder_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_encoder_ii_sptr self) -> sccc_encoder_ii"""
        return _trellis_swig.sccc_encoder_ii_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_encoder_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_encoder_ii_sptr self, fsm FSMo, int STo, fsm FSMi, int STi, interleaver INTERLEAVER, int blocklength) -> sccc_encoder_ii_sptr

        SCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo : 
            FSMi : 
            STi : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.sccc_encoder_ii_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_encoder_ii_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_ii_sptr_FSMo(self)

    def STo(self):
        """STo(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_STo(self)

    def FSMi(self):
        """FSMi(sccc_encoder_ii_sptr self) -> fsm"""
        return _trellis_swig.sccc_encoder_ii_sptr_FSMi(self)

    def STi(self):
        """STi(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_STi(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_encoder_ii_sptr self) -> interleaver"""
        return _trellis_swig.sccc_encoder_ii_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_blocklength(self)

    def history(self):
        """history(sccc_encoder_ii_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_encoder_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_encoder_ii_sptr self, int which, int delay)
        declare_sample_delay(sccc_encoder_ii_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_encoder_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_encoder_ii_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_encoder_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_encoder_ii_sptr self) -> double"""
        return _trellis_swig.sccc_encoder_ii_sptr_relative_rate(self)

    def start(self):
        """start(sccc_encoder_ii_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_ii_sptr_start(self)

    def stop(self):
        """stop(sccc_encoder_ii_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_encoder_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_encoder_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_encoder_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_encoder_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_encoder_ii_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_encoder_ii_sptr self)"""
        return _trellis_swig.sccc_encoder_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_encoder_ii_sptr self) -> bool"""
        return _trellis_swig.sccc_encoder_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_encoder_ii_sptr self, int m)"""
        return _trellis_swig.sccc_encoder_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_encoder_ii_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_encoder_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_encoder_ii_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_encoder_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_encoder_ii_sptr self, int i) -> long"""
        return _trellis_swig.sccc_encoder_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_encoder_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_encoder_ii_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_encoder_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full(sccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full(sccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_encoder_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.sccc_encoder_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_encoder_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_encoder_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_encoder_ii_sptr self)"""
        return _trellis_swig.sccc_encoder_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_encoder_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_encoder_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_encoder_ii_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_encoder_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_encoder_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_encoder_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_encoder_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_encoder_ii_sptr self) -> long"""
        return _trellis_swig.sccc_encoder_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_encoder_ii_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_encoder_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_encoder_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_encoder_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.sccc_encoder_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_encoder_ii_sptr self, std::string name)"""
        return _trellis_swig.sccc_encoder_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_encoder_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_encoder_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_encoder_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_encoder_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_encoder_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_encoder_ii_sptr_message_subscribers(self, *args, **kwargs)

sccc_encoder_ii_sptr_swigregister = _trellis_swig.sccc_encoder_ii_sptr_swigregister
sccc_encoder_ii_sptr_swigregister(sccc_encoder_ii_sptr)

sccc_encoder_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_encoder_ii = sccc_encoder_ii.make;

class pccc_encoder_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_encoder_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_bb)> self) -> pccc_encoder_bb_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_bb)> self, pccc_encoder_bb p) -> pccc_encoder_bb_sptr
        """
        this = _trellis_swig.new_pccc_encoder_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_encoder_bb_sptr self) -> pccc_encoder_bb"""
        return _trellis_swig.pccc_encoder_bb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_encoder_bb_sptr self, fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bb_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_bb_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_encoder_bb_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_bb_sptr_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_bb_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_bb_sptr_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_bb_sptr self) -> interleaver"""
        return _trellis_swig.pccc_encoder_bb_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_blocklength(self)

    def history(self):
        """history(pccc_encoder_bb_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_encoder_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_encoder_bb_sptr self, int which, int delay)
        declare_sample_delay(pccc_encoder_bb_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_encoder_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_encoder_bb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_encoder_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_encoder_bb_sptr self) -> double"""
        return _trellis_swig.pccc_encoder_bb_sptr_relative_rate(self)

    def start(self):
        """start(pccc_encoder_bb_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bb_sptr_start(self)

    def stop(self):
        """stop(pccc_encoder_bb_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_encoder_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_encoder_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_encoder_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_encoder_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_encoder_bb_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_encoder_bb_sptr self)"""
        return _trellis_swig.pccc_encoder_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_encoder_bb_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_encoder_bb_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_encoder_bb_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_encoder_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_encoder_bb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_encoder_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_encoder_bb_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_encoder_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_encoder_bb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_encoder_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full(pccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_encoder_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full(pccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_encoder_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_encoder_bb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_encoder_bb_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_encoder_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_encoder_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_encoder_bb_sptr self)"""
        return _trellis_swig.pccc_encoder_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_encoder_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_encoder_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_encoder_bb_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_encoder_bb_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_encoder_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_encoder_bb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_encoder_bb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_encoder_bb_sptr self) -> long"""
        return _trellis_swig.pccc_encoder_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_encoder_bb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_encoder_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_encoder_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_encoder_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_encoder_bb_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_encoder_bb_sptr self, std::string name)"""
        return _trellis_swig.pccc_encoder_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_encoder_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_encoder_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_encoder_bb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_encoder_bb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_encoder_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bb_sptr_message_subscribers(self, *args, **kwargs)

pccc_encoder_bb_sptr_swigregister = _trellis_swig.pccc_encoder_bb_sptr_swigregister
pccc_encoder_bb_sptr_swigregister(pccc_encoder_bb_sptr)

pccc_encoder_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_encoder_bb = pccc_encoder_bb.make;

class pccc_encoder_bs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_encoder_bs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_bs)> self) -> pccc_encoder_bs_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_bs)> self, pccc_encoder_bs p) -> pccc_encoder_bs_sptr
        """
        this = _trellis_swig.new_pccc_encoder_bs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_encoder_bs_sptr self) -> pccc_encoder_bs"""
        return _trellis_swig.pccc_encoder_bs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_bs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_encoder_bs_sptr self, fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bs_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_bs_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_encoder_bs_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_bs_sptr_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_bs_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_bs_sptr_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_bs_sptr self) -> interleaver"""
        return _trellis_swig.pccc_encoder_bs_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_blocklength(self)

    def history(self):
        """history(pccc_encoder_bs_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_encoder_bs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_encoder_bs_sptr self, int which, int delay)
        declare_sample_delay(pccc_encoder_bs_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_encoder_bs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_encoder_bs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_encoder_bs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_encoder_bs_sptr self) -> double"""
        return _trellis_swig.pccc_encoder_bs_sptr_relative_rate(self)

    def start(self):
        """start(pccc_encoder_bs_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bs_sptr_start(self)

    def stop(self):
        """stop(pccc_encoder_bs_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_encoder_bs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_encoder_bs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_encoder_bs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_encoder_bs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_encoder_bs_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_bs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_encoder_bs_sptr self)"""
        return _trellis_swig.pccc_encoder_bs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_encoder_bs_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_encoder_bs_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_bs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_encoder_bs_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_bs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_encoder_bs_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_encoder_bs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_encoder_bs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_encoder_bs_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_bs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_encoder_bs_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_encoder_bs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_encoder_bs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full(pccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_encoder_bs_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full(pccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_encoder_bs_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_encoder_bs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_encoder_bs_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_encoder_bs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_encoder_bs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_encoder_bs_sptr self)"""
        return _trellis_swig.pccc_encoder_bs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_encoder_bs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_encoder_bs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_encoder_bs_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_encoder_bs_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_encoder_bs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_encoder_bs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_bs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_encoder_bs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_bs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_encoder_bs_sptr self) -> long"""
        return _trellis_swig.pccc_encoder_bs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_encoder_bs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_encoder_bs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_encoder_bs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_encoder_bs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_encoder_bs_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_encoder_bs_sptr self, std::string name)"""
        return _trellis_swig.pccc_encoder_bs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_encoder_bs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_encoder_bs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_encoder_bs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_encoder_bs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_encoder_bs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bs_sptr_message_subscribers(self, *args, **kwargs)

pccc_encoder_bs_sptr_swigregister = _trellis_swig.pccc_encoder_bs_sptr_swigregister
pccc_encoder_bs_sptr_swigregister(pccc_encoder_bs_sptr)

pccc_encoder_bs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_encoder_bs = pccc_encoder_bs.make;

class pccc_encoder_bi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_encoder_bi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_bi)> self) -> pccc_encoder_bi_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_bi)> self, pccc_encoder_bi p) -> pccc_encoder_bi_sptr
        """
        this = _trellis_swig.new_pccc_encoder_bi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_encoder_bi_sptr self) -> pccc_encoder_bi"""
        return _trellis_swig.pccc_encoder_bi_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_bi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_encoder_bi_sptr self, fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_bi_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_bi_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_encoder_bi_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_bi_sptr_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_bi_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_bi_sptr_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_bi_sptr self) -> interleaver"""
        return _trellis_swig.pccc_encoder_bi_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_blocklength(self)

    def history(self):
        """history(pccc_encoder_bi_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_encoder_bi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_encoder_bi_sptr self, int which, int delay)
        declare_sample_delay(pccc_encoder_bi_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_encoder_bi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_encoder_bi_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_encoder_bi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_encoder_bi_sptr self) -> double"""
        return _trellis_swig.pccc_encoder_bi_sptr_relative_rate(self)

    def start(self):
        """start(pccc_encoder_bi_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bi_sptr_start(self)

    def stop(self):
        """stop(pccc_encoder_bi_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_encoder_bi_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_encoder_bi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_encoder_bi_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_encoder_bi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_encoder_bi_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_bi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_encoder_bi_sptr self)"""
        return _trellis_swig.pccc_encoder_bi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_encoder_bi_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_bi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_encoder_bi_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_bi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_encoder_bi_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_bi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_encoder_bi_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_encoder_bi_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_encoder_bi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_encoder_bi_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_bi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_encoder_bi_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_encoder_bi_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_encoder_bi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full(pccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_encoder_bi_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full(pccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_encoder_bi_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_encoder_bi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_bi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_encoder_bi_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_bi_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_encoder_bi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_encoder_bi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_encoder_bi_sptr self)"""
        return _trellis_swig.pccc_encoder_bi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_encoder_bi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_encoder_bi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_encoder_bi_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_encoder_bi_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_encoder_bi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_encoder_bi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_bi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_encoder_bi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_bi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_encoder_bi_sptr self) -> long"""
        return _trellis_swig.pccc_encoder_bi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_encoder_bi_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_encoder_bi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_encoder_bi_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_encoder_bi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_encoder_bi_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_bi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_encoder_bi_sptr self, std::string name)"""
        return _trellis_swig.pccc_encoder_bi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_encoder_bi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_encoder_bi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_encoder_bi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_encoder_bi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_encoder_bi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_bi_sptr_message_subscribers(self, *args, **kwargs)

pccc_encoder_bi_sptr_swigregister = _trellis_swig.pccc_encoder_bi_sptr_swigregister
pccc_encoder_bi_sptr_swigregister(pccc_encoder_bi_sptr)

pccc_encoder_bi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_encoder_bi = pccc_encoder_bi.make;

class pccc_encoder_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_encoder_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_ss)> self) -> pccc_encoder_ss_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_ss)> self, pccc_encoder_ss p) -> pccc_encoder_ss_sptr
        """
        this = _trellis_swig.new_pccc_encoder_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_encoder_ss_sptr self) -> pccc_encoder_ss"""
        return _trellis_swig.pccc_encoder_ss_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_encoder_ss_sptr self, fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_ss_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_ss_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_encoder_ss_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_ss_sptr_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_ss_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_ss_sptr_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_ss_sptr self) -> interleaver"""
        return _trellis_swig.pccc_encoder_ss_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_blocklength(self)

    def history(self):
        """history(pccc_encoder_ss_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_encoder_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_encoder_ss_sptr self, int which, int delay)
        declare_sample_delay(pccc_encoder_ss_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_encoder_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_encoder_ss_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_encoder_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_encoder_ss_sptr self) -> double"""
        return _trellis_swig.pccc_encoder_ss_sptr_relative_rate(self)

    def start(self):
        """start(pccc_encoder_ss_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_ss_sptr_start(self)

    def stop(self):
        """stop(pccc_encoder_ss_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_encoder_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_encoder_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_encoder_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_encoder_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_encoder_ss_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_encoder_ss_sptr self)"""
        return _trellis_swig.pccc_encoder_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_encoder_ss_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_encoder_ss_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_encoder_ss_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_encoder_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_encoder_ss_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_encoder_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_encoder_ss_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_encoder_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_encoder_ss_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_encoder_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full(pccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_encoder_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full(pccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_encoder_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_encoder_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_encoder_ss_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_encoder_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_encoder_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_encoder_ss_sptr self)"""
        return _trellis_swig.pccc_encoder_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_encoder_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_encoder_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_encoder_ss_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_encoder_ss_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_encoder_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_encoder_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_encoder_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_encoder_ss_sptr self) -> long"""
        return _trellis_swig.pccc_encoder_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_encoder_ss_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_encoder_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_encoder_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_encoder_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_encoder_ss_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_encoder_ss_sptr self, std::string name)"""
        return _trellis_swig.pccc_encoder_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_encoder_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_encoder_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_encoder_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_encoder_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_encoder_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_ss_sptr_message_subscribers(self, *args, **kwargs)

pccc_encoder_ss_sptr_swigregister = _trellis_swig.pccc_encoder_ss_sptr_swigregister
pccc_encoder_ss_sptr_swigregister(pccc_encoder_ss_sptr)

pccc_encoder_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_encoder_ss = pccc_encoder_ss.make;

class pccc_encoder_si_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_encoder_si)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_si)> self) -> pccc_encoder_si_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_si)> self, pccc_encoder_si p) -> pccc_encoder_si_sptr
        """
        this = _trellis_swig.new_pccc_encoder_si_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_encoder_si_sptr self) -> pccc_encoder_si"""
        return _trellis_swig.pccc_encoder_si_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_si_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_encoder_si_sptr self, fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_si_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_si_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_encoder_si_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_si_sptr_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_si_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_si_sptr_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_si_sptr self) -> interleaver"""
        return _trellis_swig.pccc_encoder_si_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_blocklength(self)

    def history(self):
        """history(pccc_encoder_si_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_encoder_si_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_encoder_si_sptr self, int which, int delay)
        declare_sample_delay(pccc_encoder_si_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_encoder_si_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_encoder_si_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_encoder_si_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_encoder_si_sptr self) -> double"""
        return _trellis_swig.pccc_encoder_si_sptr_relative_rate(self)

    def start(self):
        """start(pccc_encoder_si_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_si_sptr_start(self)

    def stop(self):
        """stop(pccc_encoder_si_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_si_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_encoder_si_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_encoder_si_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_encoder_si_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_encoder_si_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_encoder_si_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_si_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_encoder_si_sptr self)"""
        return _trellis_swig.pccc_encoder_si_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_encoder_si_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_si_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_encoder_si_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_si_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_encoder_si_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_si_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_encoder_si_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_encoder_si_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_encoder_si_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_encoder_si_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_si_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_encoder_si_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_encoder_si_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_encoder_si_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_encoder_si_sptr self, int which) -> float
        pc_input_buffers_full(pccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_si_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_encoder_si_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_si_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_encoder_si_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_si_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_encoder_si_sptr self, int which) -> float
        pc_output_buffers_full(pccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_si_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_encoder_si_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_si_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_encoder_si_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_encoder_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_si_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_encoder_si_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_si_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_encoder_si_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_encoder_si_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_encoder_si_sptr self)"""
        return _trellis_swig.pccc_encoder_si_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_encoder_si_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_encoder_si_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_encoder_si_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_encoder_si_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_encoder_si_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_encoder_si_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_si_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_encoder_si_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_si_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_encoder_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_si_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_encoder_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_si_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_encoder_si_sptr self) -> long"""
        return _trellis_swig.pccc_encoder_si_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_encoder_si_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_encoder_si_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_encoder_si_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_encoder_si_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_encoder_si_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_si_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_encoder_si_sptr self, std::string name)"""
        return _trellis_swig.pccc_encoder_si_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_encoder_si_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_encoder_si_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_encoder_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_si_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_encoder_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_si_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_encoder_si_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_si_sptr_message_subscribers(self, *args, **kwargs)

pccc_encoder_si_sptr_swigregister = _trellis_swig.pccc_encoder_si_sptr_swigregister
pccc_encoder_si_sptr_swigregister(pccc_encoder_si_sptr)

pccc_encoder_si_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_encoder_si = pccc_encoder_si.make;

class pccc_encoder_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_encoder_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_ii)> self) -> pccc_encoder_ii_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_encoder_ii)> self, pccc_encoder_ii p) -> pccc_encoder_ii_sptr
        """
        this = _trellis_swig.new_pccc_encoder_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_encoder_ii_sptr self) -> pccc_encoder_ii"""
        return _trellis_swig.pccc_encoder_ii_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_encoder_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_encoder_ii_sptr self, fsm FSM1, int ST1, fsm FSM2, int ST2, interleaver INTERLEAVER, int blocklength) -> pccc_encoder_ii_sptr

        PCCC encoder.

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST1 : 
            FSM2 : 
            ST2 : 
            INTERLEAVER : 
            blocklength : 
        """
        return _trellis_swig.pccc_encoder_ii_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_encoder_ii_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_ii_sptr_FSM1(self)

    def ST1(self):
        """ST1(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_ST1(self)

    def FSM2(self):
        """FSM2(pccc_encoder_ii_sptr self) -> fsm"""
        return _trellis_swig.pccc_encoder_ii_sptr_FSM2(self)

    def ST2(self):
        """ST2(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_ST2(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_encoder_ii_sptr self) -> interleaver"""
        return _trellis_swig.pccc_encoder_ii_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_blocklength(self)

    def history(self):
        """history(pccc_encoder_ii_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_encoder_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_encoder_ii_sptr self, int which, int delay)
        declare_sample_delay(pccc_encoder_ii_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_encoder_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_encoder_ii_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_encoder_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_encoder_ii_sptr self) -> double"""
        return _trellis_swig.pccc_encoder_ii_sptr_relative_rate(self)

    def start(self):
        """start(pccc_encoder_ii_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_ii_sptr_start(self)

    def stop(self):
        """stop(pccc_encoder_ii_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_encoder_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_encoder_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_encoder_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_encoder_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_encoder_ii_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_encoder_ii_sptr self)"""
        return _trellis_swig.pccc_encoder_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_encoder_ii_sptr self) -> bool"""
        return _trellis_swig.pccc_encoder_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_encoder_ii_sptr self, int m)"""
        return _trellis_swig.pccc_encoder_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_encoder_ii_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_encoder_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_encoder_ii_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_encoder_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_encoder_ii_sptr self, int i) -> long"""
        return _trellis_swig.pccc_encoder_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_encoder_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_encoder_ii_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_encoder_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full(pccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_encoder_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full(pccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_encoder_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_encoder_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_encoder_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_encoder_ii_sptr self) -> float"""
        return _trellis_swig.pccc_encoder_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_encoder_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_encoder_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_encoder_ii_sptr self)"""
        return _trellis_swig.pccc_encoder_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_encoder_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_encoder_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_encoder_ii_sptr self) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_encoder_ii_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_encoder_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_encoder_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_encoder_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_encoder_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_encoder_ii_sptr self) -> long"""
        return _trellis_swig.pccc_encoder_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_encoder_ii_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_encoder_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_encoder_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_encoder_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_encoder_ii_sptr self) -> std::string"""
        return _trellis_swig.pccc_encoder_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_encoder_ii_sptr self, std::string name)"""
        return _trellis_swig.pccc_encoder_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_encoder_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_encoder_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_encoder_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_encoder_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_encoder_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_encoder_ii_sptr_message_subscribers(self, *args, **kwargs)

pccc_encoder_ii_sptr_swigregister = _trellis_swig.pccc_encoder_ii_sptr_swigregister
pccc_encoder_ii_sptr_swigregister(pccc_encoder_ii_sptr)

pccc_encoder_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_encoder_ii = pccc_encoder_ii.make;

class metrics_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::metrics_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::metrics_s)> self) -> metrics_s_sptr
        __init__(boost::shared_ptr<(gr::trellis::metrics_s)> self, metrics_s p) -> metrics_s_sptr
        """
        this = _trellis_swig.new_metrics_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(metrics_s_sptr self) -> metrics_s"""
        return _trellis_swig.metrics_s_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_metrics_s_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(metrics_s_sptr self, int O, int D, std::vector< short,std::allocator< short > > const & TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_s_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_s_sptr_make(self, *args, **kwargs)

    def O(self):
        """O(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_O(self)

    def D(self):
        """D(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_D(self)

    def TYPE(self):
        """TYPE(metrics_s_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_s_sptr_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_s_sptr self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.metrics_s_sptr_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_s_sptr self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.metrics_s_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(metrics_s_sptr self) -> unsigned int"""
        return _trellis_swig.metrics_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(metrics_s_sptr self, int which, int delay)
        declare_sample_delay(metrics_s_sptr self, unsigned int delay)
        """
        return _trellis_swig.metrics_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(metrics_s_sptr self, int which) -> unsigned int"""
        return _trellis_swig.metrics_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(metrics_s_sptr self) -> double"""
        return _trellis_swig.metrics_s_sptr_relative_rate(self)

    def start(self):
        """start(metrics_s_sptr self) -> bool"""
        return _trellis_swig.metrics_s_sptr_start(self)

    def stop(self):
        """stop(metrics_s_sptr self) -> bool"""
        return _trellis_swig.metrics_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(metrics_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.metrics_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(metrics_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.metrics_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(metrics_s_sptr self, int m)"""
        return _trellis_swig.metrics_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(metrics_s_sptr self)"""
        return _trellis_swig.metrics_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(metrics_s_sptr self) -> bool"""
        return _trellis_swig.metrics_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(metrics_s_sptr self, int m)"""
        return _trellis_swig.metrics_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(metrics_s_sptr self, int i) -> long"""
        return _trellis_swig.metrics_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(metrics_s_sptr self, long max_output_buffer)
        set_max_output_buffer(metrics_s_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.metrics_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(metrics_s_sptr self, int i) -> long"""
        return _trellis_swig.metrics_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(metrics_s_sptr self, long min_output_buffer)
        set_min_output_buffer(metrics_s_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.metrics_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(metrics_s_sptr self, int which) -> float
        pc_input_buffers_full(metrics_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(metrics_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(metrics_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(metrics_s_sptr self, int which) -> float
        pc_input_buffers_full_var(metrics_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(metrics_s_sptr self, int which) -> float
        pc_output_buffers_full(metrics_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(metrics_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(metrics_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(metrics_s_sptr self, int which) -> float
        pc_output_buffers_full_var(metrics_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(metrics_s_sptr self) -> float"""
        return _trellis_swig.metrics_s_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(metrics_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.metrics_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(metrics_s_sptr self)"""
        return _trellis_swig.metrics_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(metrics_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.metrics_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(metrics_s_sptr self) -> int"""
        return _trellis_swig.metrics_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(metrics_s_sptr self, int priority) -> int"""
        return _trellis_swig.metrics_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(metrics_s_sptr self) -> std::string"""
        return _trellis_swig.metrics_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(metrics_s_sptr self) -> std::string"""
        return _trellis_swig.metrics_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(metrics_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(metrics_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(metrics_s_sptr self) -> long"""
        return _trellis_swig.metrics_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(metrics_s_sptr self) -> basic_block_sptr"""
        return _trellis_swig.metrics_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(metrics_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.metrics_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(metrics_s_sptr self) -> std::string"""
        return _trellis_swig.metrics_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(metrics_s_sptr self, std::string name)"""
        return _trellis_swig.metrics_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(metrics_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.metrics_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(metrics_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(metrics_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(metrics_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.metrics_s_sptr_message_subscribers(self, *args, **kwargs)

metrics_s_sptr_swigregister = _trellis_swig.metrics_s_sptr_swigregister
metrics_s_sptr_swigregister(metrics_s_sptr)

metrics_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
metrics_s = metrics_s.make;

class metrics_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::metrics_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::metrics_i)> self) -> metrics_i_sptr
        __init__(boost::shared_ptr<(gr::trellis::metrics_i)> self, metrics_i p) -> metrics_i_sptr
        """
        this = _trellis_swig.new_metrics_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(metrics_i_sptr self) -> metrics_i"""
        return _trellis_swig.metrics_i_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_metrics_i_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(metrics_i_sptr self, int O, int D, std::vector< int,std::allocator< int > > const & TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_i_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_i_sptr_make(self, *args, **kwargs)

    def O(self):
        """O(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_O(self)

    def D(self):
        """D(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_D(self)

    def TYPE(self):
        """TYPE(metrics_i_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_i_sptr_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.metrics_i_sptr_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_i_sptr self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.metrics_i_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(metrics_i_sptr self) -> unsigned int"""
        return _trellis_swig.metrics_i_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(metrics_i_sptr self, int which, int delay)
        declare_sample_delay(metrics_i_sptr self, unsigned int delay)
        """
        return _trellis_swig.metrics_i_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(metrics_i_sptr self, int which) -> unsigned int"""
        return _trellis_swig.metrics_i_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(metrics_i_sptr self) -> double"""
        return _trellis_swig.metrics_i_sptr_relative_rate(self)

    def start(self):
        """start(metrics_i_sptr self) -> bool"""
        return _trellis_swig.metrics_i_sptr_start(self)

    def stop(self):
        """stop(metrics_i_sptr self) -> bool"""
        return _trellis_swig.metrics_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(metrics_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.metrics_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(metrics_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.metrics_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(metrics_i_sptr self, int m)"""
        return _trellis_swig.metrics_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(metrics_i_sptr self)"""
        return _trellis_swig.metrics_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(metrics_i_sptr self) -> bool"""
        return _trellis_swig.metrics_i_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(metrics_i_sptr self, int m)"""
        return _trellis_swig.metrics_i_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(metrics_i_sptr self, int i) -> long"""
        return _trellis_swig.metrics_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(metrics_i_sptr self, long max_output_buffer)
        set_max_output_buffer(metrics_i_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.metrics_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(metrics_i_sptr self, int i) -> long"""
        return _trellis_swig.metrics_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(metrics_i_sptr self, long min_output_buffer)
        set_min_output_buffer(metrics_i_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.metrics_i_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(metrics_i_sptr self, int which) -> float
        pc_input_buffers_full(metrics_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_i_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(metrics_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(metrics_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_i_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(metrics_i_sptr self, int which) -> float
        pc_input_buffers_full_var(metrics_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_i_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(metrics_i_sptr self, int which) -> float
        pc_output_buffers_full(metrics_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_i_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(metrics_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(metrics_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_i_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(metrics_i_sptr self, int which) -> float
        pc_output_buffers_full_var(metrics_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_i_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(metrics_i_sptr self) -> float"""
        return _trellis_swig.metrics_i_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(metrics_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.metrics_i_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(metrics_i_sptr self)"""
        return _trellis_swig.metrics_i_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(metrics_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.metrics_i_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(metrics_i_sptr self) -> int"""
        return _trellis_swig.metrics_i_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(metrics_i_sptr self, int priority) -> int"""
        return _trellis_swig.metrics_i_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(metrics_i_sptr self) -> std::string"""
        return _trellis_swig.metrics_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(metrics_i_sptr self) -> std::string"""
        return _trellis_swig.metrics_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(metrics_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(metrics_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(metrics_i_sptr self) -> long"""
        return _trellis_swig.metrics_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(metrics_i_sptr self) -> basic_block_sptr"""
        return _trellis_swig.metrics_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(metrics_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.metrics_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(metrics_i_sptr self) -> std::string"""
        return _trellis_swig.metrics_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(metrics_i_sptr self, std::string name)"""
        return _trellis_swig.metrics_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(metrics_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.metrics_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(metrics_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(metrics_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_i_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(metrics_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.metrics_i_sptr_message_subscribers(self, *args, **kwargs)

metrics_i_sptr_swigregister = _trellis_swig.metrics_i_sptr_swigregister
metrics_i_sptr_swigregister(metrics_i_sptr)

metrics_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
metrics_i = metrics_i.make;

class metrics_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::metrics_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::metrics_f)> self) -> metrics_f_sptr
        __init__(boost::shared_ptr<(gr::trellis::metrics_f)> self, metrics_f p) -> metrics_f_sptr
        """
        this = _trellis_swig.new_metrics_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(metrics_f_sptr self) -> metrics_f"""
        return _trellis_swig.metrics_f_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_metrics_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(metrics_f_sptr self, int O, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_f_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_f_sptr_make(self, *args, **kwargs)

    def O(self):
        """O(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_O(self)

    def D(self):
        """D(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_D(self)

    def TYPE(self):
        """TYPE(metrics_f_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_f_sptr_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_f_sptr self) -> pmt_vector_float"""
        return _trellis_swig.metrics_f_sptr_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_f_sptr self, pmt_vector_float table)"""
        return _trellis_swig.metrics_f_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(metrics_f_sptr self) -> unsigned int"""
        return _trellis_swig.metrics_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(metrics_f_sptr self, int which, int delay)
        declare_sample_delay(metrics_f_sptr self, unsigned int delay)
        """
        return _trellis_swig.metrics_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(metrics_f_sptr self, int which) -> unsigned int"""
        return _trellis_swig.metrics_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(metrics_f_sptr self) -> double"""
        return _trellis_swig.metrics_f_sptr_relative_rate(self)

    def start(self):
        """start(metrics_f_sptr self) -> bool"""
        return _trellis_swig.metrics_f_sptr_start(self)

    def stop(self):
        """stop(metrics_f_sptr self) -> bool"""
        return _trellis_swig.metrics_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(metrics_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.metrics_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(metrics_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.metrics_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(metrics_f_sptr self, int m)"""
        return _trellis_swig.metrics_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(metrics_f_sptr self)"""
        return _trellis_swig.metrics_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(metrics_f_sptr self) -> bool"""
        return _trellis_swig.metrics_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(metrics_f_sptr self, int m)"""
        return _trellis_swig.metrics_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(metrics_f_sptr self, int i) -> long"""
        return _trellis_swig.metrics_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(metrics_f_sptr self, long max_output_buffer)
        set_max_output_buffer(metrics_f_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.metrics_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(metrics_f_sptr self, int i) -> long"""
        return _trellis_swig.metrics_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(metrics_f_sptr self, long min_output_buffer)
        set_min_output_buffer(metrics_f_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.metrics_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(metrics_f_sptr self, int which) -> float
        pc_input_buffers_full(metrics_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(metrics_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(metrics_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(metrics_f_sptr self, int which) -> float
        pc_input_buffers_full_var(metrics_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(metrics_f_sptr self, int which) -> float
        pc_output_buffers_full(metrics_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(metrics_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(metrics_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(metrics_f_sptr self, int which) -> float
        pc_output_buffers_full_var(metrics_f_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(metrics_f_sptr self) -> float"""
        return _trellis_swig.metrics_f_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(metrics_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.metrics_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(metrics_f_sptr self)"""
        return _trellis_swig.metrics_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(metrics_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.metrics_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(metrics_f_sptr self) -> int"""
        return _trellis_swig.metrics_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(metrics_f_sptr self, int priority) -> int"""
        return _trellis_swig.metrics_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(metrics_f_sptr self) -> std::string"""
        return _trellis_swig.metrics_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(metrics_f_sptr self) -> std::string"""
        return _trellis_swig.metrics_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(metrics_f_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(metrics_f_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(metrics_f_sptr self) -> long"""
        return _trellis_swig.metrics_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(metrics_f_sptr self) -> basic_block_sptr"""
        return _trellis_swig.metrics_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(metrics_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.metrics_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(metrics_f_sptr self) -> std::string"""
        return _trellis_swig.metrics_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(metrics_f_sptr self, std::string name)"""
        return _trellis_swig.metrics_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(metrics_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.metrics_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(metrics_f_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(metrics_f_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(metrics_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.metrics_f_sptr_message_subscribers(self, *args, **kwargs)

metrics_f_sptr_swigregister = _trellis_swig.metrics_f_sptr_swigregister
metrics_f_sptr_swigregister(metrics_f_sptr)

metrics_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
metrics_f = metrics_f.make;

class metrics_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::metrics_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::metrics_c)> self) -> metrics_c_sptr
        __init__(boost::shared_ptr<(gr::trellis::metrics_c)> self, metrics_c p) -> metrics_c_sptr
        """
        this = _trellis_swig.new_metrics_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(metrics_c_sptr self) -> metrics_c"""
        return _trellis_swig.metrics_c_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_metrics_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(metrics_c_sptr self, int O, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> metrics_c_sptr

        Evaluate metrics for use by the Viterbi algorithm.

        Constructor Specific Documentation:



        Args:
            O : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.metrics_c_sptr_make(self, *args, **kwargs)

    def O(self):
        """O(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_O(self)

    def D(self):
        """D(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_D(self)

    def TYPE(self):
        """TYPE(metrics_c_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.metrics_c_sptr_TYPE(self)

    def TABLE(self):
        """TABLE(metrics_c_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.metrics_c_sptr_TABLE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(metrics_c_sptr self, pmt_vector_cfloat table)"""
        return _trellis_swig.metrics_c_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(metrics_c_sptr self) -> unsigned int"""
        return _trellis_swig.metrics_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(metrics_c_sptr self, int which, int delay)
        declare_sample_delay(metrics_c_sptr self, unsigned int delay)
        """
        return _trellis_swig.metrics_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(metrics_c_sptr self, int which) -> unsigned int"""
        return _trellis_swig.metrics_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(metrics_c_sptr self) -> double"""
        return _trellis_swig.metrics_c_sptr_relative_rate(self)

    def start(self):
        """start(metrics_c_sptr self) -> bool"""
        return _trellis_swig.metrics_c_sptr_start(self)

    def stop(self):
        """stop(metrics_c_sptr self) -> bool"""
        return _trellis_swig.metrics_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(metrics_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.metrics_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(metrics_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.metrics_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(metrics_c_sptr self, int m)"""
        return _trellis_swig.metrics_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(metrics_c_sptr self)"""
        return _trellis_swig.metrics_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(metrics_c_sptr self) -> bool"""
        return _trellis_swig.metrics_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(metrics_c_sptr self, int m)"""
        return _trellis_swig.metrics_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(metrics_c_sptr self, int i) -> long"""
        return _trellis_swig.metrics_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(metrics_c_sptr self, long max_output_buffer)
        set_max_output_buffer(metrics_c_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.metrics_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(metrics_c_sptr self, int i) -> long"""
        return _trellis_swig.metrics_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(metrics_c_sptr self, long min_output_buffer)
        set_min_output_buffer(metrics_c_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.metrics_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(metrics_c_sptr self, int which) -> float
        pc_input_buffers_full(metrics_c_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(metrics_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(metrics_c_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(metrics_c_sptr self, int which) -> float
        pc_input_buffers_full_var(metrics_c_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(metrics_c_sptr self, int which) -> float
        pc_output_buffers_full(metrics_c_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(metrics_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(metrics_c_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(metrics_c_sptr self, int which) -> float
        pc_output_buffers_full_var(metrics_c_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.metrics_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(metrics_c_sptr self) -> float"""
        return _trellis_swig.metrics_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(metrics_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.metrics_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(metrics_c_sptr self)"""
        return _trellis_swig.metrics_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(metrics_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.metrics_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(metrics_c_sptr self) -> int"""
        return _trellis_swig.metrics_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(metrics_c_sptr self, int priority) -> int"""
        return _trellis_swig.metrics_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(metrics_c_sptr self) -> std::string"""
        return _trellis_swig.metrics_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(metrics_c_sptr self) -> std::string"""
        return _trellis_swig.metrics_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(metrics_c_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(metrics_c_sptr self) -> io_signature_sptr"""
        return _trellis_swig.metrics_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(metrics_c_sptr self) -> long"""
        return _trellis_swig.metrics_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(metrics_c_sptr self) -> basic_block_sptr"""
        return _trellis_swig.metrics_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(metrics_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.metrics_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(metrics_c_sptr self) -> std::string"""
        return _trellis_swig.metrics_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(metrics_c_sptr self, std::string name)"""
        return _trellis_swig.metrics_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(metrics_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.metrics_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(metrics_c_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(metrics_c_sptr self) -> swig_int_ptr"""
        return _trellis_swig.metrics_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(metrics_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.metrics_c_sptr_message_subscribers(self, *args, **kwargs)

metrics_c_sptr_swigregister = _trellis_swig.metrics_c_sptr_swigregister
metrics_c_sptr_swigregister(metrics_c_sptr)

metrics_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
metrics_c = metrics_c.make;

class pccc_decoder_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_b)> self) -> pccc_decoder_b_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_b)> self, pccc_decoder_b p) -> pccc_decoder_b_sptr
        """
        this = _trellis_swig.new_pccc_decoder_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_b_sptr self) -> pccc_decoder_b"""
        return _trellis_swig.pccc_decoder_b_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_b_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_b_sptr self, fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_b_sptr

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST10 : 
            ST1K : 
            FSM2 : 
            ST20 : 
            ST2K : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.pccc_decoder_b_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_b_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_b_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_b_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_b_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_b_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_b_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_b_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_b_sptr_SISO_TYPE(self)

    def history(self):
        """history(pccc_decoder_b_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_b_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_b_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_b_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_b_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_b_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_b_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_b_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_b_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_b_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_b_sptr self)"""
        return _trellis_swig.pccc_decoder_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_b_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_b_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_b_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_b_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_b_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_b_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_b_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_b_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_b_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_b_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_b_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_b_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_b_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_b_sptr self)"""
        return _trellis_swig.pccc_decoder_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_b_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_b_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_b_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_b_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_b_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_b_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_b_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_b_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_b_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_b_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_b_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_b_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_b_sptr_swigregister = _trellis_swig.pccc_decoder_b_sptr_swigregister
pccc_decoder_b_sptr_swigregister(pccc_decoder_b_sptr)

pccc_decoder_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_b = pccc_decoder_b.make;

class pccc_decoder_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_s)> self) -> pccc_decoder_s_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_s)> self, pccc_decoder_s p) -> pccc_decoder_s_sptr
        """
        this = _trellis_swig.new_pccc_decoder_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_s_sptr self) -> pccc_decoder_s"""
        return _trellis_swig.pccc_decoder_s_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_s_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_s_sptr self, fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_s_sptr

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST10 : 
            ST1K : 
            FSM2 : 
            ST20 : 
            ST2K : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.pccc_decoder_s_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_s_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_s_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_s_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_s_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_s_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_s_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_s_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_s_sptr_SISO_TYPE(self)

    def history(self):
        """history(pccc_decoder_s_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_s_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_s_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_s_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_s_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_s_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_s_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_s_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_s_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_s_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_s_sptr self)"""
        return _trellis_swig.pccc_decoder_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_s_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_s_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_s_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_s_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_s_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_s_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_s_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_s_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_s_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_s_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_s_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_s_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_s_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_s_sptr self)"""
        return _trellis_swig.pccc_decoder_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_s_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_s_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_s_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_s_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_s_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_s_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_s_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_s_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_s_sptr_swigregister = _trellis_swig.pccc_decoder_s_sptr_swigregister
pccc_decoder_s_sptr_swigregister(pccc_decoder_s_sptr)

pccc_decoder_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_s = pccc_decoder_s.make;

class pccc_decoder_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_i)> self) -> pccc_decoder_i_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_i)> self, pccc_decoder_i p) -> pccc_decoder_i_sptr
        """
        this = _trellis_swig.new_pccc_decoder_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_i_sptr self) -> pccc_decoder_i"""
        return _trellis_swig.pccc_decoder_i_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_i_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_i_sptr self, fsm FSM1, int ST10, int ST1K, fsm FSM2, int ST20, int ST2K, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> pccc_decoder_i_sptr

        Constructor Specific Documentation:



        Args:
            FSM1 : 
            ST10 : 
            ST1K : 
            FSM2 : 
            ST20 : 
            ST2K : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.pccc_decoder_i_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_i_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_i_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_i_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_i_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_i_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_i_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_i_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_i_sptr_SISO_TYPE(self)

    def history(self):
        """history(pccc_decoder_i_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_i_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_i_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_i_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_i_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_i_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_i_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_i_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_i_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_i_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_i_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_i_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_i_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_i_sptr self)"""
        return _trellis_swig.pccc_decoder_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_i_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_i_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_i_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_i_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_i_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_i_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_i_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_i_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_i_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_i_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_i_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_i_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_i_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_i_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_i_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_i_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_i_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_i_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_i_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_i_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_i_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_i_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_i_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_i_sptr self)"""
        return _trellis_swig.pccc_decoder_i_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_i_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_i_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_i_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_i_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_i_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_i_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_i_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_i_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_i_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_i_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_i_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_i_sptr_swigregister = _trellis_swig.pccc_decoder_i_sptr_swigregister
pccc_decoder_i_sptr_swigregister(pccc_decoder_i_sptr)

pccc_decoder_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_i = pccc_decoder_i.make;

class pccc_decoder_combined_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fb)> self) -> pccc_decoder_combined_fb_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fb)> self, pccc_decoder_combined_fb p) -> pccc_decoder_combined_fb_sptr
        """
        this = _trellis_swig.new_pccc_decoder_combined_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_combined_fb_sptr self) -> pccc_decoder_combined_fb"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_fb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_combined_fb_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_fb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_combined_fb_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_fb_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_fb_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_fb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_fb_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_fb_sptr self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(pccc_decoder_combined_fb_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_combined_fb_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_combined_fb_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_combined_fb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_combined_fb_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_combined_fb_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_combined_fb_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_combined_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_combined_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_combined_fb_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_combined_fb_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_combined_fb_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_combined_fb_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_combined_fb_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_combined_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_combined_fb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_combined_fb_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_combined_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_combined_fb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_combined_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_combined_fb_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_combined_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_combined_fb_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_combined_fb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_combined_fb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_combined_fb_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_combined_fb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_combined_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_combined_fb_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_combined_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_combined_fb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_combined_fb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_combined_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fb_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_combined_fb_sptr_swigregister = _trellis_swig.pccc_decoder_combined_fb_sptr_swigregister
pccc_decoder_combined_fb_sptr_swigregister(pccc_decoder_combined_fb_sptr)

pccc_decoder_combined_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_combined_fb = pccc_decoder_combined_fb.make;

class pccc_decoder_combined_fs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fs)> self) -> pccc_decoder_combined_fs_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fs)> self, pccc_decoder_combined_fs p) -> pccc_decoder_combined_fs_sptr
        """
        this = _trellis_swig.new_pccc_decoder_combined_fs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_combined_fs_sptr self) -> pccc_decoder_combined_fs"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_fs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_combined_fs_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_fs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_combined_fs_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_fs_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_fs_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_fs_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_fs_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_fs_sptr self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(pccc_decoder_combined_fs_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_combined_fs_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_combined_fs_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_combined_fs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_combined_fs_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_combined_fs_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_combined_fs_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_combined_fs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_combined_fs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_combined_fs_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_combined_fs_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_combined_fs_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_combined_fs_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_combined_fs_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_combined_fs_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_combined_fs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_combined_fs_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_combined_fs_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_combined_fs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_combined_fs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_combined_fs_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_combined_fs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_combined_fs_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_combined_fs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_combined_fs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_combined_fs_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_combined_fs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_combined_fs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_combined_fs_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_combined_fs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_combined_fs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_combined_fs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_combined_fs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fs_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_combined_fs_sptr_swigregister = _trellis_swig.pccc_decoder_combined_fs_sptr_swigregister
pccc_decoder_combined_fs_sptr_swigregister(pccc_decoder_combined_fs_sptr)

pccc_decoder_combined_fs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_combined_fs = pccc_decoder_combined_fs.make;

class pccc_decoder_combined_fi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fi)> self) -> pccc_decoder_combined_fi_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_fi)> self, pccc_decoder_combined_fi p) -> pccc_decoder_combined_fi_sptr
        """
        this = _trellis_swig.new_pccc_decoder_combined_fi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_combined_fi_sptr self) -> pccc_decoder_combined_fi"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_fi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_combined_fi_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_fi_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_combined_fi_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_fi_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_fi_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_fi_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_fi_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_fi_sptr self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(pccc_decoder_combined_fi_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_combined_fi_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_combined_fi_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_combined_fi_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_combined_fi_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_combined_fi_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_combined_fi_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_combined_fi_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_combined_fi_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_combined_fi_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_combined_fi_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_combined_fi_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_combined_fi_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_combined_fi_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_combined_fi_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_combined_fi_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_combined_fi_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_combined_fi_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_combined_fi_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_combined_fi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_combined_fi_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_combined_fi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_combined_fi_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_combined_fi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_combined_fi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_combined_fi_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_combined_fi_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_combined_fi_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_combined_fi_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_combined_fi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_combined_fi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_combined_fi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_combined_fi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_fi_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_combined_fi_sptr_swigregister = _trellis_swig.pccc_decoder_combined_fi_sptr_swigregister
pccc_decoder_combined_fi_sptr_swigregister(pccc_decoder_combined_fi_sptr)

pccc_decoder_combined_fi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_combined_fi = pccc_decoder_combined_fi.make;

class pccc_decoder_combined_cb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_combined_cb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_cb)> self) -> pccc_decoder_combined_cb_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_cb)> self, pccc_decoder_combined_cb p) -> pccc_decoder_combined_cb_sptr
        """
        this = _trellis_swig.new_pccc_decoder_combined_cb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_combined_cb_sptr self) -> pccc_decoder_combined_cb"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_cb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_combined_cb_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_cb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_combined_cb_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_cb_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_cb_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_cb_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_cb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_cb_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_cb_sptr self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(pccc_decoder_combined_cb_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_combined_cb_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_combined_cb_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_combined_cb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_combined_cb_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_combined_cb_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_combined_cb_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_combined_cb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_combined_cb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_combined_cb_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_combined_cb_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_combined_cb_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_combined_cb_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_combined_cb_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_combined_cb_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_combined_cb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_combined_cb_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_combined_cb_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_combined_cb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_combined_cb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_combined_cb_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_combined_cb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_combined_cb_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_combined_cb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_combined_cb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_combined_cb_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_combined_cb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_combined_cb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_combined_cb_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_combined_cb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_combined_cb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_combined_cb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_combined_cb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_cb_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_combined_cb_sptr_swigregister = _trellis_swig.pccc_decoder_combined_cb_sptr_swigregister
pccc_decoder_combined_cb_sptr_swigregister(pccc_decoder_combined_cb_sptr)

pccc_decoder_combined_cb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_combined_cb = pccc_decoder_combined_cb.make;

class pccc_decoder_combined_cs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_combined_cs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_cs)> self) -> pccc_decoder_combined_cs_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_cs)> self, pccc_decoder_combined_cs p) -> pccc_decoder_combined_cs_sptr
        """
        this = _trellis_swig.new_pccc_decoder_combined_cs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_combined_cs_sptr self) -> pccc_decoder_combined_cs"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_cs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_combined_cs_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_cs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_combined_cs_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_cs_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_cs_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_cs_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_cs_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_cs_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_cs_sptr self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(pccc_decoder_combined_cs_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_combined_cs_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_combined_cs_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_combined_cs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_combined_cs_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_combined_cs_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_combined_cs_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_combined_cs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_combined_cs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_combined_cs_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_combined_cs_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_combined_cs_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_combined_cs_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_combined_cs_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_combined_cs_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_combined_cs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_combined_cs_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_combined_cs_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_combined_cs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_combined_cs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_combined_cs_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_combined_cs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_combined_cs_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_combined_cs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_combined_cs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_combined_cs_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_combined_cs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_combined_cs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_combined_cs_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_combined_cs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_combined_cs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_combined_cs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_combined_cs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_cs_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_combined_cs_sptr_swigregister = _trellis_swig.pccc_decoder_combined_cs_sptr_swigregister
pccc_decoder_combined_cs_sptr_swigregister(pccc_decoder_combined_cs_sptr)

pccc_decoder_combined_cs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_combined_cs = pccc_decoder_combined_cs.make;

class pccc_decoder_combined_ci_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::pccc_decoder_combined_ci)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_ci)> self) -> pccc_decoder_combined_ci_sptr
        __init__(boost::shared_ptr<(gr::trellis::pccc_decoder_combined_ci)> self, pccc_decoder_combined_ci p) -> pccc_decoder_combined_ci_sptr
        """
        this = _trellis_swig.new_pccc_decoder_combined_ci_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pccc_decoder_combined_ci_sptr self) -> pccc_decoder_combined_ci"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_pccc_decoder_combined_ci_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pccc_decoder_combined_ci_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> pccc_decoder_combined_ci_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_make(self, *args, **kwargs)

    def FSM1(self):
        """FSM1(pccc_decoder_combined_ci_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_FSM1(self)

    def FSM2(self):
        """FSM2(pccc_decoder_combined_ci_sptr self) -> fsm"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_FSM2(self)

    def ST10(self):
        """ST10(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_ST10(self)

    def ST1K(self):
        """ST1K(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_ST1K(self)

    def ST20(self):
        """ST20(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_ST20(self)

    def ST2K(self):
        """ST2K(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_ST2K(self)

    def INTERLEAVER(self):
        """INTERLEAVER(pccc_decoder_combined_ci_sptr self) -> interleaver"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_repetitions(self)

    def D(self):
        """D(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_D(self)

    def TABLE(self):
        """TABLE(pccc_decoder_combined_ci_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(pccc_decoder_combined_ci_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(pccc_decoder_combined_ci_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(pccc_decoder_combined_ci_sptr self, float scaling)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(pccc_decoder_combined_ci_sptr self) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pccc_decoder_combined_ci_sptr self, int which, int delay)
        declare_sample_delay(pccc_decoder_combined_ci_sptr self, unsigned int delay)
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pccc_decoder_combined_ci_sptr self, int which) -> unsigned int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pccc_decoder_combined_ci_sptr self) -> double"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_relative_rate(self)

    def start(self):
        """start(pccc_decoder_combined_ci_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_start(self)

    def stop(self):
        """stop(pccc_decoder_combined_ci_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pccc_decoder_combined_ci_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pccc_decoder_combined_ci_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pccc_decoder_combined_ci_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pccc_decoder_combined_ci_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pccc_decoder_combined_ci_sptr self) -> bool"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pccc_decoder_combined_ci_sptr self, int m)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pccc_decoder_combined_ci_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pccc_decoder_combined_ci_sptr self, long max_output_buffer)
        set_max_output_buffer(pccc_decoder_combined_ci_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pccc_decoder_combined_ci_sptr self, int i) -> long"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pccc_decoder_combined_ci_sptr self, long min_output_buffer)
        set_min_output_buffer(pccc_decoder_combined_ci_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pccc_decoder_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full(pccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pccc_decoder_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full_avg(pccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pccc_decoder_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full_var(pccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pccc_decoder_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full(pccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pccc_decoder_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full_avg(pccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pccc_decoder_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full_var(pccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pccc_decoder_combined_ci_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pccc_decoder_combined_ci_sptr self)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pccc_decoder_combined_ci_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pccc_decoder_combined_ci_sptr self, int priority) -> int"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pccc_decoder_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pccc_decoder_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pccc_decoder_combined_ci_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pccc_decoder_combined_ci_sptr self) -> io_signature_sptr"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pccc_decoder_combined_ci_sptr self) -> long"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pccc_decoder_combined_ci_sptr self) -> basic_block_sptr"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pccc_decoder_combined_ci_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pccc_decoder_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pccc_decoder_combined_ci_sptr self, std::string name)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pccc_decoder_combined_ci_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pccc_decoder_combined_ci_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pccc_decoder_combined_ci_sptr self) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pccc_decoder_combined_ci_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.pccc_decoder_combined_ci_sptr_message_subscribers(self, *args, **kwargs)

pccc_decoder_combined_ci_sptr_swigregister = _trellis_swig.pccc_decoder_combined_ci_sptr_swigregister
pccc_decoder_combined_ci_sptr_swigregister(pccc_decoder_combined_ci_sptr)

pccc_decoder_combined_ci_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pccc_decoder_combined_ci = pccc_decoder_combined_ci.make;

class viterbi_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_b)> self) -> viterbi_b_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_b)> self, viterbi_b p) -> viterbi_b_sptr
        """
        this = _trellis_swig.new_viterbi_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_b_sptr self) -> viterbi_b"""
        return _trellis_swig.viterbi_b_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_b_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_b_sptr self, fsm FSM, int K, int S0, int SK) -> viterbi_b_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
        """
        return _trellis_swig.viterbi_b_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_b_sptr self) -> fsm"""
        return _trellis_swig.viterbi_b_sptr_FSM(self)

    def K(self):
        """K(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_K(self)

    def S0(self):
        """S0(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_S0(self)

    def SK(self):
        """SK(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_SK(self)

    def history(self):
        """history(viterbi_b_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_b_sptr self, int which, int delay)
        declare_sample_delay(viterbi_b_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_b_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_b_sptr self) -> double"""
        return _trellis_swig.viterbi_b_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_b_sptr self) -> bool"""
        return _trellis_swig.viterbi_b_sptr_start(self)

    def stop(self):
        """stop(viterbi_b_sptr self) -> bool"""
        return _trellis_swig.viterbi_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_b_sptr self, int m)"""
        return _trellis_swig.viterbi_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_b_sptr self)"""
        return _trellis_swig.viterbi_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_b_sptr self) -> bool"""
        return _trellis_swig.viterbi_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_b_sptr self, int m)"""
        return _trellis_swig.viterbi_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_b_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_b_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_b_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_b_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_b_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_b_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_b_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_b_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_b_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_b_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_b_sptr self) -> float"""
        return _trellis_swig.viterbi_b_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_b_sptr self)"""
        return _trellis_swig.viterbi_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_b_sptr self) -> int"""
        return _trellis_swig.viterbi_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_b_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_b_sptr self) -> std::string"""
        return _trellis_swig.viterbi_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_b_sptr self) -> std::string"""
        return _trellis_swig.viterbi_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_b_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_b_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_b_sptr self) -> long"""
        return _trellis_swig.viterbi_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_b_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_b_sptr self) -> std::string"""
        return _trellis_swig.viterbi_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_b_sptr self, std::string name)"""
        return _trellis_swig.viterbi_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_b_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_b_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_b_sptr_message_subscribers(self, *args, **kwargs)

viterbi_b_sptr_swigregister = _trellis_swig.viterbi_b_sptr_swigregister
viterbi_b_sptr_swigregister(viterbi_b_sptr)

viterbi_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_b = viterbi_b.make;

class viterbi_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_s)> self) -> viterbi_s_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_s)> self, viterbi_s p) -> viterbi_s_sptr
        """
        this = _trellis_swig.new_viterbi_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_s_sptr self) -> viterbi_s"""
        return _trellis_swig.viterbi_s_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_s_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_s_sptr self, fsm FSM, int K, int S0, int SK) -> viterbi_s_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
        """
        return _trellis_swig.viterbi_s_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_s_sptr self) -> fsm"""
        return _trellis_swig.viterbi_s_sptr_FSM(self)

    def K(self):
        """K(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_K(self)

    def S0(self):
        """S0(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_S0(self)

    def SK(self):
        """SK(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_SK(self)

    def history(self):
        """history(viterbi_s_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_s_sptr self, int which, int delay)
        declare_sample_delay(viterbi_s_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_s_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_s_sptr self) -> double"""
        return _trellis_swig.viterbi_s_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_s_sptr self) -> bool"""
        return _trellis_swig.viterbi_s_sptr_start(self)

    def stop(self):
        """stop(viterbi_s_sptr self) -> bool"""
        return _trellis_swig.viterbi_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_s_sptr self, int m)"""
        return _trellis_swig.viterbi_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_s_sptr self)"""
        return _trellis_swig.viterbi_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_s_sptr self) -> bool"""
        return _trellis_swig.viterbi_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_s_sptr self, int m)"""
        return _trellis_swig.viterbi_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_s_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_s_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_s_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_s_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_s_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_s_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_s_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_s_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_s_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_s_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_s_sptr self) -> float"""
        return _trellis_swig.viterbi_s_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_s_sptr self)"""
        return _trellis_swig.viterbi_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_s_sptr self) -> int"""
        return _trellis_swig.viterbi_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_s_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_s_sptr self) -> std::string"""
        return _trellis_swig.viterbi_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_s_sptr self) -> std::string"""
        return _trellis_swig.viterbi_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_s_sptr self) -> long"""
        return _trellis_swig.viterbi_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_s_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_s_sptr self) -> std::string"""
        return _trellis_swig.viterbi_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_s_sptr self, std::string name)"""
        return _trellis_swig.viterbi_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_s_sptr_message_subscribers(self, *args, **kwargs)

viterbi_s_sptr_swigregister = _trellis_swig.viterbi_s_sptr_swigregister
viterbi_s_sptr_swigregister(viterbi_s_sptr)

viterbi_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_s = viterbi_s.make;

class viterbi_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_i)> self) -> viterbi_i_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_i)> self, viterbi_i p) -> viterbi_i_sptr
        """
        this = _trellis_swig.new_viterbi_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_i_sptr self) -> viterbi_i"""
        return _trellis_swig.viterbi_i_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_i_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_i_sptr self, fsm FSM, int K, int S0, int SK) -> viterbi_i_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
        """
        return _trellis_swig.viterbi_i_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_i_sptr self) -> fsm"""
        return _trellis_swig.viterbi_i_sptr_FSM(self)

    def K(self):
        """K(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_K(self)

    def S0(self):
        """S0(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_S0(self)

    def SK(self):
        """SK(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_SK(self)

    def history(self):
        """history(viterbi_i_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_i_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_i_sptr self, int which, int delay)
        declare_sample_delay(viterbi_i_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_i_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_i_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_i_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_i_sptr self) -> double"""
        return _trellis_swig.viterbi_i_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_i_sptr self) -> bool"""
        return _trellis_swig.viterbi_i_sptr_start(self)

    def stop(self):
        """stop(viterbi_i_sptr self) -> bool"""
        return _trellis_swig.viterbi_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_i_sptr self, int m)"""
        return _trellis_swig.viterbi_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_i_sptr self)"""
        return _trellis_swig.viterbi_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_i_sptr self) -> bool"""
        return _trellis_swig.viterbi_i_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_i_sptr self, int m)"""
        return _trellis_swig.viterbi_i_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_i_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_i_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_i_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_i_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_i_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_i_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_i_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_i_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_i_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_i_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_i_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_i_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_i_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_i_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_i_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_i_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_i_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_i_sptr self) -> float"""
        return _trellis_swig.viterbi_i_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_i_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_i_sptr self)"""
        return _trellis_swig.viterbi_i_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_i_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_i_sptr self) -> int"""
        return _trellis_swig.viterbi_i_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_i_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_i_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_i_sptr self) -> std::string"""
        return _trellis_swig.viterbi_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_i_sptr self) -> std::string"""
        return _trellis_swig.viterbi_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_i_sptr self) -> long"""
        return _trellis_swig.viterbi_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_i_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_i_sptr self) -> std::string"""
        return _trellis_swig.viterbi_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_i_sptr self, std::string name)"""
        return _trellis_swig.viterbi_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_i_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_i_sptr_message_subscribers(self, *args, **kwargs)

viterbi_i_sptr_swigregister = _trellis_swig.viterbi_i_sptr_swigregister
viterbi_i_sptr_swigregister(viterbi_i_sptr)

viterbi_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_i = viterbi_i.make;

class viterbi_combined_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_sb)> self) -> viterbi_combined_sb_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_sb)> self, viterbi_combined_sb p) -> viterbi_combined_sb_sptr
        """
        this = _trellis_swig.new_viterbi_combined_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_sb_sptr self) -> viterbi_combined_sb"""
        return _trellis_swig.viterbi_combined_sb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_sb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_sb_sptr self, fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_sb_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_sb_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_sb_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_sb_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_sb_sptr self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.viterbi_combined_sb_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_sb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_sb_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_sb_sptr self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.viterbi_combined_sb_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_sb_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_sb_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_sb_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_sb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_sb_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_sb_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_sb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_sb_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_sb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_sb_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_sb_sptr self)"""
        return _trellis_swig.viterbi_combined_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_sb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_sb_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_sb_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_sb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_sb_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_sb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_sb_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_sb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_sb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_sb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_sb_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_sb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_sb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_sb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_sb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_sb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_sb_sptr self)"""
        return _trellis_swig.viterbi_combined_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_sb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_sb_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_sb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_sb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_sb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_sb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_sb_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_sb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_sb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_sb_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_sb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_sb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_sb_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_sb_sptr_swigregister = _trellis_swig.viterbi_combined_sb_sptr_swigregister
viterbi_combined_sb_sptr_swigregister(viterbi_combined_sb_sptr)

viterbi_combined_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_sb = viterbi_combined_sb.make;

class viterbi_combined_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ss)> self) -> viterbi_combined_ss_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ss)> self, viterbi_combined_ss p) -> viterbi_combined_ss_sptr
        """
        this = _trellis_swig.new_viterbi_combined_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_ss_sptr self) -> viterbi_combined_ss"""
        return _trellis_swig.viterbi_combined_ss_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_ss_sptr self, fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ss_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ss_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_ss_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_ss_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ss_sptr self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.viterbi_combined_ss_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ss_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ss_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ss_sptr self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.viterbi_combined_ss_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_ss_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_ss_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_ss_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_ss_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_ss_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_ss_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_ss_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ss_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_ss_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_ss_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_ss_sptr self)"""
        return _trellis_swig.viterbi_combined_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_ss_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_ss_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_ss_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_ss_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_ss_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_ss_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_ss_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_ss_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_ss_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_ss_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ss_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_ss_sptr self)"""
        return _trellis_swig.viterbi_combined_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_ss_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_ss_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_ss_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_ss_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_ss_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_ss_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_ss_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_ss_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_ss_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_ss_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ss_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_ss_sptr_swigregister = _trellis_swig.viterbi_combined_ss_sptr_swigregister
viterbi_combined_ss_sptr_swigregister(viterbi_combined_ss_sptr)

viterbi_combined_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_ss = viterbi_combined_ss.make;

class viterbi_combined_si_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_si)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_si)> self) -> viterbi_combined_si_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_si)> self, viterbi_combined_si p) -> viterbi_combined_si_sptr
        """
        this = _trellis_swig.new_viterbi_combined_si_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_si_sptr self) -> viterbi_combined_si"""
        return _trellis_swig.viterbi_combined_si_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_si_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_si_sptr self, fsm FSM, int K, int S0, int SK, int D, std::vector< short,std::allocator< short > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_si_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_si_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_si_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_si_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_si_sptr self) -> std::vector< short,std::allocator< short > >"""
        return _trellis_swig.viterbi_combined_si_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_si_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_si_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_si_sptr self, std::vector< short,std::allocator< short > > const & table)"""
        return _trellis_swig.viterbi_combined_si_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_si_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_si_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_si_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_si_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_si_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_si_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_si_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_si_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_si_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_si_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_si_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_si_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_si_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_si_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_si_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_si_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_si_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_si_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_si_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_si_sptr self)"""
        return _trellis_swig.viterbi_combined_si_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_si_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_si_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_si_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_si_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_si_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_si_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_si_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_si_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_si_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_si_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_si_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_si_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_si_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_si_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_si_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_si_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_si_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_si_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_si_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_si_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_si_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_si_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_si_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_si_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_si_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_si_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_si_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_si_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_si_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_si_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_si_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_si_sptr self)"""
        return _trellis_swig.viterbi_combined_si_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_si_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_si_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_si_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_si_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_si_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_si_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_si_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_si_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_si_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_si_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_si_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_si_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_si_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_si_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_si_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_si_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_si_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_si_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_si_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_si_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_si_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_si_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_si_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_si_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_si_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_si_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_si_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_si_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_si_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_si_sptr_swigregister = _trellis_swig.viterbi_combined_si_sptr_swigregister
viterbi_combined_si_sptr_swigregister(viterbi_combined_si_sptr)

viterbi_combined_si_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_si = viterbi_combined_si.make;

class viterbi_combined_ib_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_ib)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ib)> self) -> viterbi_combined_ib_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ib)> self, viterbi_combined_ib p) -> viterbi_combined_ib_sptr
        """
        this = _trellis_swig.new_viterbi_combined_ib_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_ib_sptr self) -> viterbi_combined_ib"""
        return _trellis_swig.viterbi_combined_ib_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ib_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_ib_sptr self, fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ib_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ib_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_ib_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_ib_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ib_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ib_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ib_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ib_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ib_sptr self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.viterbi_combined_ib_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_ib_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ib_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_ib_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_ib_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_ib_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_ib_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ib_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_ib_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_ib_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_ib_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ib_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_ib_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ib_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_ib_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ib_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_ib_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ib_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_ib_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ib_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_ib_sptr self)"""
        return _trellis_swig.viterbi_combined_ib_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_ib_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ib_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_ib_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ib_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_ib_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ib_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_ib_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_ib_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ib_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_ib_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ib_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_ib_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_ib_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ib_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_ib_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_ib_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ib_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_ib_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_ib_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ib_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_ib_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_ib_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ib_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_ib_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_ib_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ib_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_ib_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_ib_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ib_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_ib_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_ib_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ib_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_ib_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ib_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_ib_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_ib_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_ib_sptr self)"""
        return _trellis_swig.viterbi_combined_ib_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_ib_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ib_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_ib_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_ib_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_ib_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_ib_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ib_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_ib_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ib_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_ib_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ib_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_ib_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ib_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_ib_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_ib_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_ib_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_ib_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_ib_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_ib_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_ib_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ib_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_ib_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_ib_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_ib_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_ib_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_ib_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ib_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_ib_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ib_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_ib_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ib_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_ib_sptr_swigregister = _trellis_swig.viterbi_combined_ib_sptr_swigregister
viterbi_combined_ib_sptr_swigregister(viterbi_combined_ib_sptr)

viterbi_combined_ib_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_ib = viterbi_combined_ib.make;

class viterbi_combined_is_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_is)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_is)> self) -> viterbi_combined_is_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_is)> self, viterbi_combined_is p) -> viterbi_combined_is_sptr
        """
        this = _trellis_swig.new_viterbi_combined_is_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_is_sptr self) -> viterbi_combined_is"""
        return _trellis_swig.viterbi_combined_is_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_is_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_is_sptr self, fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_is_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_is_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_is_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_is_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_is_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_is_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_is_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_is_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_is_sptr self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.viterbi_combined_is_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_is_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_is_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_is_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_is_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_is_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_is_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_is_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_is_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_is_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_is_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_is_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_is_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_is_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_is_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_is_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_is_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_is_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_is_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_is_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_is_sptr self)"""
        return _trellis_swig.viterbi_combined_is_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_is_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_is_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_is_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_is_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_is_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_is_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_is_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_is_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_is_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_is_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_is_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_is_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_is_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_is_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_is_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_is_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_is_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_is_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_is_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_is_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_is_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_is_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_is_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_is_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_is_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_is_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_is_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_is_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_is_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_is_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_is_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_is_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_is_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_is_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_is_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_is_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_is_sptr self)"""
        return _trellis_swig.viterbi_combined_is_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_is_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_is_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_is_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_is_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_is_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_is_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_is_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_is_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_is_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_is_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_is_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_is_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_is_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_is_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_is_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_is_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_is_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_is_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_is_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_is_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_is_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_is_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_is_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_is_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_is_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_is_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_is_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_is_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_is_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_is_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_is_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_is_sptr_swigregister = _trellis_swig.viterbi_combined_is_sptr_swigregister
viterbi_combined_is_sptr_swigregister(viterbi_combined_is_sptr)

viterbi_combined_is_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_is = viterbi_combined_is.make;

class viterbi_combined_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ii)> self) -> viterbi_combined_ii_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ii)> self, viterbi_combined_ii p) -> viterbi_combined_ii_sptr
        """
        this = _trellis_swig.new_viterbi_combined_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_ii_sptr self) -> viterbi_combined_ii"""
        return _trellis_swig.viterbi_combined_ii_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_ii_sptr self, fsm FSM, int K, int S0, int SK, int D, std::vector< int,std::allocator< int > > const & TABLE, 
            gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ii_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ii_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_ii_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_ii_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ii_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ii_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ii_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ii_sptr self, std::vector< int,std::allocator< int > > const & table)"""
        return _trellis_swig.viterbi_combined_ii_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_ii_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_ii_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_ii_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_ii_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_ii_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_ii_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_ii_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ii_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_ii_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_ii_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_ii_sptr self)"""
        return _trellis_swig.viterbi_combined_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_ii_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_ii_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_ii_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_ii_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_ii_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_ii_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_ii_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_ii_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_ii_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_ii_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ii_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_ii_sptr self)"""
        return _trellis_swig.viterbi_combined_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_ii_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_ii_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_ii_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_ii_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_ii_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_ii_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_ii_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_ii_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_ii_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_ii_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ii_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_ii_sptr_swigregister = _trellis_swig.viterbi_combined_ii_sptr_swigregister
viterbi_combined_ii_sptr_swigregister(viterbi_combined_ii_sptr)

viterbi_combined_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_ii = viterbi_combined_ii.make;

class viterbi_combined_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_fb)> self) -> viterbi_combined_fb_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_fb)> self, viterbi_combined_fb p) -> viterbi_combined_fb_sptr
        """
        this = _trellis_swig.new_viterbi_combined_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_fb_sptr self) -> viterbi_combined_fb"""
        return _trellis_swig.viterbi_combined_fb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_fb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_fb_sptr self, fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fb_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_fb_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_fb_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_fb_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_fb_sptr self) -> pmt_vector_float"""
        return _trellis_swig.viterbi_combined_fb_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_fb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_fb_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_fb_sptr self, pmt_vector_float table)"""
        return _trellis_swig.viterbi_combined_fb_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_fb_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_fb_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_fb_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_fb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_fb_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_fb_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_fb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fb_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_fb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_fb_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_fb_sptr self)"""
        return _trellis_swig.viterbi_combined_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_fb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_fb_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_fb_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_fb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_fb_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_fb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_fb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_fb_sptr self)"""
        return _trellis_swig.viterbi_combined_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_fb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_fb_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_fb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_fb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_fb_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_fb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_fb_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_fb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_fb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fb_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_fb_sptr_swigregister = _trellis_swig.viterbi_combined_fb_sptr_swigregister
viterbi_combined_fb_sptr_swigregister(viterbi_combined_fb_sptr)

viterbi_combined_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_fb = viterbi_combined_fb.make;

class viterbi_combined_fs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_fs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_fs)> self) -> viterbi_combined_fs_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_fs)> self, viterbi_combined_fs p) -> viterbi_combined_fs_sptr
        """
        this = _trellis_swig.new_viterbi_combined_fs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_fs_sptr self) -> viterbi_combined_fs"""
        return _trellis_swig.viterbi_combined_fs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_fs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_fs_sptr self, fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fs_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_fs_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_fs_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_fs_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_fs_sptr self) -> pmt_vector_float"""
        return _trellis_swig.viterbi_combined_fs_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_fs_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_fs_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_fs_sptr self, pmt_vector_float table)"""
        return _trellis_swig.viterbi_combined_fs_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_fs_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_fs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_fs_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_fs_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_fs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_fs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_fs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_fs_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_fs_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_fs_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fs_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_fs_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_fs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_fs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_fs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_fs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_fs_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_fs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_fs_sptr self)"""
        return _trellis_swig.viterbi_combined_fs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_fs_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_fs_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_fs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_fs_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_fs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_fs_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_fs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_fs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_fs_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_fs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_fs_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_fs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_fs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_fs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_fs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_fs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_fs_sptr self)"""
        return _trellis_swig.viterbi_combined_fs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_fs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_fs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_fs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_fs_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_fs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_fs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_fs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_fs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_fs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_fs_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_fs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_fs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_fs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_fs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_fs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_fs_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_fs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_fs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_fs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_fs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_fs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_fs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fs_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_fs_sptr_swigregister = _trellis_swig.viterbi_combined_fs_sptr_swigregister
viterbi_combined_fs_sptr_swigregister(viterbi_combined_fs_sptr)

viterbi_combined_fs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_fs = viterbi_combined_fs.make;

class viterbi_combined_fi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_fi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_fi)> self) -> viterbi_combined_fi_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_fi)> self, viterbi_combined_fi p) -> viterbi_combined_fi_sptr
        """
        this = _trellis_swig.new_viterbi_combined_fi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_fi_sptr self) -> viterbi_combined_fi"""
        return _trellis_swig.viterbi_combined_fi_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_fi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_fi_sptr self, fsm FSM, int K, int S0, int SK, int D, pmt_vector_float TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_fi_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_fi_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_fi_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_fi_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_fi_sptr self) -> pmt_vector_float"""
        return _trellis_swig.viterbi_combined_fi_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_fi_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_fi_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_fi_sptr self, pmt_vector_float table)"""
        return _trellis_swig.viterbi_combined_fi_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_fi_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_fi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_fi_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_fi_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_fi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_fi_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_fi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_fi_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_fi_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_fi_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fi_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_fi_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_fi_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_fi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_fi_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_fi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_fi_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_fi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_fi_sptr self)"""
        return _trellis_swig.viterbi_combined_fi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_fi_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_fi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_fi_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_fi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_fi_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_fi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_fi_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_fi_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_fi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_fi_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_fi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_fi_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_fi_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_fi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_fi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_fi_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_fi_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_fi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_fi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_fi_sptr self)"""
        return _trellis_swig.viterbi_combined_fi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_fi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_fi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_fi_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_fi_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_fi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_fi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_fi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_fi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_fi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_fi_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_fi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_fi_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_fi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_fi_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_fi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_fi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_fi_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_fi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_fi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_fi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_fi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_fi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_fi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_fi_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_fi_sptr_swigregister = _trellis_swig.viterbi_combined_fi_sptr_swigregister
viterbi_combined_fi_sptr_swigregister(viterbi_combined_fi_sptr)

viterbi_combined_fi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_fi = viterbi_combined_fi.make;

class viterbi_combined_cb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_cb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_cb)> self) -> viterbi_combined_cb_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_cb)> self, viterbi_combined_cb p) -> viterbi_combined_cb_sptr
        """
        this = _trellis_swig.new_viterbi_combined_cb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_cb_sptr self) -> viterbi_combined_cb"""
        return _trellis_swig.viterbi_combined_cb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_cb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_cb_sptr self, fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_cb_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_cb_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_cb_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_cb_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_cb_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.viterbi_combined_cb_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_cb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_cb_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_cb_sptr self, pmt_vector_cfloat table)"""
        return _trellis_swig.viterbi_combined_cb_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_cb_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_cb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_cb_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_cb_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_cb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_cb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_cb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_cb_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_cb_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_cb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_cb_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_cb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_cb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_cb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_cb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_cb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_cb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_cb_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_cb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_cb_sptr self)"""
        return _trellis_swig.viterbi_combined_cb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_cb_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_cb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_cb_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_cb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_cb_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_cb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_cb_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_cb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_cb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_cb_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_cb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_cb_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_cb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_cb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_cb_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_cb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_cb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_cb_sptr self)"""
        return _trellis_swig.viterbi_combined_cb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_cb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_cb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_cb_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_cb_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_cb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_cb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_cb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_cb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_cb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_cb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_cb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_cb_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_cb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_cb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_cb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_cb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_cb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_cb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_cb_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_cb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_cb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_cb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_cb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_cb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_cb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_cb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_cb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_cb_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_cb_sptr_swigregister = _trellis_swig.viterbi_combined_cb_sptr_swigregister
viterbi_combined_cb_sptr_swigregister(viterbi_combined_cb_sptr)

viterbi_combined_cb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_cb = viterbi_combined_cb.make;

class viterbi_combined_cs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_cs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_cs)> self) -> viterbi_combined_cs_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_cs)> self, viterbi_combined_cs p) -> viterbi_combined_cs_sptr
        """
        this = _trellis_swig.new_viterbi_combined_cs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_cs_sptr self) -> viterbi_combined_cs"""
        return _trellis_swig.viterbi_combined_cs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_cs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_cs_sptr self, fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_cs_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_cs_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_cs_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_cs_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_cs_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.viterbi_combined_cs_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_cs_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_cs_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_cs_sptr self, pmt_vector_cfloat table)"""
        return _trellis_swig.viterbi_combined_cs_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_cs_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_cs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_cs_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_cs_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_cs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_cs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_cs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_cs_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_cs_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_cs_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_cs_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_cs_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_cs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_cs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_cs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_cs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_cs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_cs_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_cs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_cs_sptr self)"""
        return _trellis_swig.viterbi_combined_cs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_cs_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_cs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_cs_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_cs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_cs_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_cs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_cs_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_cs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_cs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_cs_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_cs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_cs_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_cs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_cs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_cs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_cs_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_cs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_cs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_cs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_cs_sptr self)"""
        return _trellis_swig.viterbi_combined_cs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_cs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_cs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_cs_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_cs_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_cs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_cs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_cs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_cs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_cs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_cs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_cs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_cs_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_cs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_cs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_cs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_cs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_cs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_cs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_cs_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_cs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_cs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_cs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_cs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_cs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_cs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_cs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_cs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_cs_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_cs_sptr_swigregister = _trellis_swig.viterbi_combined_cs_sptr_swigregister
viterbi_combined_cs_sptr_swigregister(viterbi_combined_cs_sptr)

viterbi_combined_cs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_cs = viterbi_combined_cs.make;

class viterbi_combined_ci_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::viterbi_combined_ci)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ci)> self) -> viterbi_combined_ci_sptr
        __init__(boost::shared_ptr<(gr::trellis::viterbi_combined_ci)> self, viterbi_combined_ci p) -> viterbi_combined_ci_sptr
        """
        this = _trellis_swig.new_viterbi_combined_ci_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(viterbi_combined_ci_sptr self) -> viterbi_combined_ci"""
        return _trellis_swig.viterbi_combined_ci_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_viterbi_combined_ci_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(viterbi_combined_ci_sptr self, fsm FSM, int K, int S0, int SK, int D, pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t TYPE) -> viterbi_combined_ci_sptr

        Constructor Specific Documentation:



        Args:
            FSM : 
            K : 
            S0 : 
            SK : 
            D : 
            TABLE : 
            TYPE : 
        """
        return _trellis_swig.viterbi_combined_ci_sptr_make(self, *args, **kwargs)

    def FSM(self):
        """FSM(viterbi_combined_ci_sptr self) -> fsm"""
        return _trellis_swig.viterbi_combined_ci_sptr_FSM(self)

    def K(self):
        """K(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_K(self)

    def S0(self):
        """S0(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_S0(self)

    def SK(self):
        """SK(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_SK(self)

    def D(self):
        """D(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_D(self)

    def TABLE(self):
        """TABLE(viterbi_combined_ci_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.viterbi_combined_ci_sptr_TABLE(self)

    def TYPE(self):
        """TYPE(viterbi_combined_ci_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.viterbi_combined_ci_sptr_TYPE(self)

    def set_TABLE(self, *args, **kwargs):
        """set_TABLE(viterbi_combined_ci_sptr self, pmt_vector_cfloat table)"""
        return _trellis_swig.viterbi_combined_ci_sptr_set_TABLE(self, *args, **kwargs)

    def history(self):
        """history(viterbi_combined_ci_sptr self) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ci_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(viterbi_combined_ci_sptr self, int which, int delay)
        declare_sample_delay(viterbi_combined_ci_sptr self, unsigned int delay)
        """
        return _trellis_swig.viterbi_combined_ci_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(viterbi_combined_ci_sptr self, int which) -> unsigned int"""
        return _trellis_swig.viterbi_combined_ci_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(viterbi_combined_ci_sptr self) -> double"""
        return _trellis_swig.viterbi_combined_ci_sptr_relative_rate(self)

    def start(self):
        """start(viterbi_combined_ci_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ci_sptr_start(self)

    def stop(self):
        """stop(viterbi_combined_ci_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ci_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(viterbi_combined_ci_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ci_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(viterbi_combined_ci_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.viterbi_combined_ci_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(viterbi_combined_ci_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ci_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(viterbi_combined_ci_sptr self)"""
        return _trellis_swig.viterbi_combined_ci_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(viterbi_combined_ci_sptr self) -> bool"""
        return _trellis_swig.viterbi_combined_ci_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(viterbi_combined_ci_sptr self, int m)"""
        return _trellis_swig.viterbi_combined_ci_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(viterbi_combined_ci_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ci_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(viterbi_combined_ci_sptr self, long max_output_buffer)
        set_max_output_buffer(viterbi_combined_ci_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ci_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(viterbi_combined_ci_sptr self, int i) -> long"""
        return _trellis_swig.viterbi_combined_ci_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(viterbi_combined_ci_sptr self, long min_output_buffer)
        set_min_output_buffer(viterbi_combined_ci_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.viterbi_combined_ci_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(viterbi_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full(viterbi_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ci_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(viterbi_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full_avg(viterbi_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ci_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(viterbi_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full_var(viterbi_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ci_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(viterbi_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full(viterbi_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ci_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(viterbi_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full_avg(viterbi_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ci_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(viterbi_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full_var(viterbi_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.viterbi_combined_ci_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(viterbi_combined_ci_sptr self) -> float"""
        return _trellis_swig.viterbi_combined_ci_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(viterbi_combined_ci_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.viterbi_combined_ci_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(viterbi_combined_ci_sptr self)"""
        return _trellis_swig.viterbi_combined_ci_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(viterbi_combined_ci_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.viterbi_combined_ci_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(viterbi_combined_ci_sptr self) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(viterbi_combined_ci_sptr self, int priority) -> int"""
        return _trellis_swig.viterbi_combined_ci_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(viterbi_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ci_sptr_name(self)

    def symbol_name(self):
        """symbol_name(viterbi_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ci_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(viterbi_combined_ci_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ci_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(viterbi_combined_ci_sptr self) -> io_signature_sptr"""
        return _trellis_swig.viterbi_combined_ci_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(viterbi_combined_ci_sptr self) -> long"""
        return _trellis_swig.viterbi_combined_ci_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(viterbi_combined_ci_sptr self) -> basic_block_sptr"""
        return _trellis_swig.viterbi_combined_ci_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(viterbi_combined_ci_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.viterbi_combined_ci_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(viterbi_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.viterbi_combined_ci_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(viterbi_combined_ci_sptr self, std::string name)"""
        return _trellis_swig.viterbi_combined_ci_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(viterbi_combined_ci_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.viterbi_combined_ci_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(viterbi_combined_ci_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ci_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(viterbi_combined_ci_sptr self) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ci_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(viterbi_combined_ci_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.viterbi_combined_ci_sptr_message_subscribers(self, *args, **kwargs)

viterbi_combined_ci_sptr_swigregister = _trellis_swig.viterbi_combined_ci_sptr_swigregister
viterbi_combined_ci_sptr_swigregister(viterbi_combined_ci_sptr)

viterbi_combined_ci_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
viterbi_combined_ci = viterbi_combined_ci.make;

class sccc_decoder_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_b)> self) -> sccc_decoder_b_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_b)> self, sccc_decoder_b p) -> sccc_decoder_b_sptr
        """
        this = _trellis_swig.new_sccc_decoder_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_b_sptr self) -> sccc_decoder_b"""
        return _trellis_swig.sccc_decoder_b_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_b_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_b_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_b_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.sccc_decoder_b_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_b_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_b_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_b_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_b_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_b_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_b_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_b_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_b_sptr_SISO_TYPE(self)

    def history(self):
        """history(sccc_decoder_b_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_b_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_b_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_b_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_b_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_b_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_b_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_b_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_b_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_b_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_b_sptr self)"""
        return _trellis_swig.sccc_decoder_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_b_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_b_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_b_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_b_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_b_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_b_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_b_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_b_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_b_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_b_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_b_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_b_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_b_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_b_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_b_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_b_sptr self)"""
        return _trellis_swig.sccc_decoder_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_b_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_b_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_b_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_b_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_b_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_b_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_b_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_b_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_b_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_b_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_b_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_b_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_b_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_b_sptr_swigregister = _trellis_swig.sccc_decoder_b_sptr_swigregister
sccc_decoder_b_sptr_swigregister(sccc_decoder_b_sptr)

sccc_decoder_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_b = sccc_decoder_b.make;

class sccc_decoder_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_s)> self) -> sccc_decoder_s_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_s)> self, sccc_decoder_s p) -> sccc_decoder_s_sptr
        """
        this = _trellis_swig.new_sccc_decoder_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_s_sptr self) -> sccc_decoder_s"""
        return _trellis_swig.sccc_decoder_s_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_s_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_s_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_s_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.sccc_decoder_s_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_s_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_s_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_s_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_s_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_s_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_s_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_s_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_s_sptr_SISO_TYPE(self)

    def history(self):
        """history(sccc_decoder_s_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_s_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_s_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_s_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_s_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_s_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_s_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_s_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_s_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_s_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_s_sptr self)"""
        return _trellis_swig.sccc_decoder_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_s_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_s_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_s_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_s_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_s_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_s_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_s_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_s_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_s_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_s_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_s_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_s_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_s_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_s_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_s_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_s_sptr self)"""
        return _trellis_swig.sccc_decoder_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_s_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_s_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_s_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_s_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_s_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_s_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_s_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_s_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_s_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_s_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_s_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_s_sptr_swigregister = _trellis_swig.sccc_decoder_s_sptr_swigregister
sccc_decoder_s_sptr_swigregister(sccc_decoder_s_sptr)

sccc_decoder_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_s = sccc_decoder_s.make;

class sccc_decoder_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_i)> self) -> sccc_decoder_i_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_i)> self, sccc_decoder_i p) -> sccc_decoder_i_sptr
        """
        this = _trellis_swig.new_sccc_decoder_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_i_sptr self) -> sccc_decoder_i"""
        return _trellis_swig.sccc_decoder_i_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_i_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_i_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE) -> sccc_decoder_i_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
        """
        return _trellis_swig.sccc_decoder_i_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_i_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_i_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_i_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_i_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_i_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_i_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_repetitions(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_i_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_i_sptr_SISO_TYPE(self)

    def history(self):
        """history(sccc_decoder_i_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_i_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_i_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_i_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_i_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_i_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_i_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_i_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_i_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_i_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_i_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_i_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_i_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_i_sptr self)"""
        return _trellis_swig.sccc_decoder_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_i_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_i_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_i_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_i_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_i_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_i_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_i_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_i_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_i_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_i_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_i_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_i_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_i_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_i_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_i_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_i_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_i_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_i_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_i_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_i_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_i_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_i_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_i_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_i_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_i_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_i_sptr self)"""
        return _trellis_swig.sccc_decoder_i_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_i_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_i_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_i_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_i_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_i_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_i_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_i_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_i_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_i_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_i_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_i_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_i_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_i_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_i_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_i_sptr_swigregister = _trellis_swig.sccc_decoder_i_sptr_swigregister
sccc_decoder_i_sptr_swigregister(sccc_decoder_i_sptr)

sccc_decoder_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_i = sccc_decoder_i.make;

class sccc_decoder_combined_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fb)> self) -> sccc_decoder_combined_fb_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fb)> self, sccc_decoder_combined_fb p) -> sccc_decoder_combined_fb_sptr
        """
        this = _trellis_swig.new_sccc_decoder_combined_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_combined_fb_sptr self) -> sccc_decoder_combined_fb"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_fb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_combined_fb_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_fb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_combined_fb_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_fb_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_fb_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_fb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_fb_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_fb_sptr self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(sccc_decoder_combined_fb_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_combined_fb_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_combined_fb_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_combined_fb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_combined_fb_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_combined_fb_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_combined_fb_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_combined_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_combined_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_combined_fb_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_combined_fb_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_combined_fb_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_combined_fb_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_combined_fb_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_combined_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_combined_fb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_combined_fb_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_combined_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_combined_fb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_combined_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_combined_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_combined_fb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_combined_fb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_combined_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_combined_fb_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_combined_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_combined_fb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_combined_fb_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_combined_fb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_combined_fb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_combined_fb_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_combined_fb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_combined_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_combined_fb_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_combined_fb_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_combined_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_combined_fb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_combined_fb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_combined_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fb_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_combined_fb_sptr_swigregister = _trellis_swig.sccc_decoder_combined_fb_sptr_swigregister
sccc_decoder_combined_fb_sptr_swigregister(sccc_decoder_combined_fb_sptr)

sccc_decoder_combined_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_combined_fb = sccc_decoder_combined_fb.make;

class sccc_decoder_combined_fs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fs)> self) -> sccc_decoder_combined_fs_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fs)> self, sccc_decoder_combined_fs p) -> sccc_decoder_combined_fs_sptr
        """
        this = _trellis_swig.new_sccc_decoder_combined_fs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_combined_fs_sptr self) -> sccc_decoder_combined_fs"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_fs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_combined_fs_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_fs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_combined_fs_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_fs_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_fs_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_fs_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_fs_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_fs_sptr self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(sccc_decoder_combined_fs_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_combined_fs_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_combined_fs_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_combined_fs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_combined_fs_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_combined_fs_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_combined_fs_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_combined_fs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_combined_fs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_combined_fs_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_combined_fs_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_combined_fs_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_combined_fs_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_combined_fs_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_combined_fs_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_combined_fs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_combined_fs_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_combined_fs_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_combined_fs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_combined_fs_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_combined_fs_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_combined_fs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_combined_fs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_combined_fs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_combined_fs_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_combined_fs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_combined_fs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_combined_fs_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_combined_fs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_combined_fs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_combined_fs_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_combined_fs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_combined_fs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_combined_fs_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_combined_fs_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_combined_fs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_combined_fs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_combined_fs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_combined_fs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fs_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_combined_fs_sptr_swigregister = _trellis_swig.sccc_decoder_combined_fs_sptr_swigregister
sccc_decoder_combined_fs_sptr_swigregister(sccc_decoder_combined_fs_sptr)

sccc_decoder_combined_fs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_combined_fs = sccc_decoder_combined_fs.make;

class sccc_decoder_combined_fi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fi)> self) -> sccc_decoder_combined_fi_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_fi)> self, sccc_decoder_combined_fi p) -> sccc_decoder_combined_fi_sptr
        """
        this = _trellis_swig.new_sccc_decoder_combined_fi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_combined_fi_sptr self) -> sccc_decoder_combined_fi"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_fi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_combined_fi_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_float TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_fi_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_combined_fi_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_fi_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_fi_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_fi_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_fi_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_fi_sptr self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(sccc_decoder_combined_fi_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_combined_fi_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_combined_fi_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_combined_fi_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_combined_fi_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_combined_fi_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_combined_fi_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_combined_fi_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_combined_fi_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_combined_fi_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_combined_fi_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_combined_fi_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_combined_fi_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_combined_fi_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_combined_fi_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_combined_fi_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_combined_fi_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_combined_fi_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_combined_fi_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_combined_fi_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_combined_fi_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_combined_fi_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_combined_fi_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_combined_fi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_combined_fi_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_combined_fi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_combined_fi_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_combined_fi_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_combined_fi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_combined_fi_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_combined_fi_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_combined_fi_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_combined_fi_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_combined_fi_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_combined_fi_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_combined_fi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_combined_fi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_combined_fi_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_combined_fi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_fi_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_combined_fi_sptr_swigregister = _trellis_swig.sccc_decoder_combined_fi_sptr_swigregister
sccc_decoder_combined_fi_sptr_swigregister(sccc_decoder_combined_fi_sptr)

sccc_decoder_combined_fi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_combined_fi = sccc_decoder_combined_fi.make;

class sccc_decoder_combined_cb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_combined_cb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_cb)> self) -> sccc_decoder_combined_cb_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_cb)> self, sccc_decoder_combined_cb p) -> sccc_decoder_combined_cb_sptr
        """
        this = _trellis_swig.new_sccc_decoder_combined_cb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_combined_cb_sptr self) -> sccc_decoder_combined_cb"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_cb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_combined_cb_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_cb_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_combined_cb_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_cb_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_cb_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_cb_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_cb_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_cb_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_cb_sptr self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(sccc_decoder_combined_cb_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_combined_cb_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_combined_cb_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_combined_cb_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_combined_cb_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_combined_cb_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_combined_cb_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_combined_cb_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_combined_cb_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_combined_cb_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_combined_cb_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_combined_cb_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_combined_cb_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_combined_cb_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_combined_cb_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_combined_cb_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_combined_cb_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_combined_cb_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_combined_cb_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_combined_cb_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_combined_cb_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_combined_cb_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_combined_cb_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_combined_cb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_combined_cb_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_combined_cb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_combined_cb_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_combined_cb_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_combined_cb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_combined_cb_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_combined_cb_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_combined_cb_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_combined_cb_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_combined_cb_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_combined_cb_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_combined_cb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_combined_cb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_combined_cb_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_combined_cb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_cb_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_combined_cb_sptr_swigregister = _trellis_swig.sccc_decoder_combined_cb_sptr_swigregister
sccc_decoder_combined_cb_sptr_swigregister(sccc_decoder_combined_cb_sptr)

sccc_decoder_combined_cb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_combined_cb = sccc_decoder_combined_cb.make;

class sccc_decoder_combined_cs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_combined_cs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_cs)> self) -> sccc_decoder_combined_cs_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_cs)> self, sccc_decoder_combined_cs p) -> sccc_decoder_combined_cs_sptr
        """
        this = _trellis_swig.new_sccc_decoder_combined_cs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_combined_cs_sptr self) -> sccc_decoder_combined_cs"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_cs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_combined_cs_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_cs_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_combined_cs_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_cs_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_cs_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_cs_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_cs_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_cs_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_cs_sptr self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(sccc_decoder_combined_cs_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_combined_cs_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_combined_cs_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_combined_cs_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_combined_cs_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_combined_cs_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_combined_cs_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_combined_cs_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_combined_cs_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_combined_cs_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_combined_cs_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_combined_cs_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_combined_cs_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_combined_cs_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_combined_cs_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_combined_cs_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_combined_cs_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_combined_cs_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_combined_cs_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_combined_cs_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_combined_cs_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_combined_cs_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_combined_cs_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_combined_cs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_combined_cs_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_combined_cs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_combined_cs_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_combined_cs_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_combined_cs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_combined_cs_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_combined_cs_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_combined_cs_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_combined_cs_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_combined_cs_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_combined_cs_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_combined_cs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_combined_cs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_combined_cs_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_combined_cs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_cs_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_combined_cs_sptr_swigregister = _trellis_swig.sccc_decoder_combined_cs_sptr_swigregister
sccc_decoder_combined_cs_sptr_swigregister(sccc_decoder_combined_cs_sptr)

sccc_decoder_combined_cs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_combined_cs = sccc_decoder_combined_cs.make;

class sccc_decoder_combined_ci_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::trellis::sccc_decoder_combined_ci)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_ci)> self) -> sccc_decoder_combined_ci_sptr
        __init__(boost::shared_ptr<(gr::trellis::sccc_decoder_combined_ci)> self, sccc_decoder_combined_ci p) -> sccc_decoder_combined_ci_sptr
        """
        this = _trellis_swig.new_sccc_decoder_combined_ci_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sccc_decoder_combined_ci_sptr self) -> sccc_decoder_combined_ci"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr___deref__(self)

    __swig_destroy__ = _trellis_swig.delete_sccc_decoder_combined_ci_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sccc_decoder_combined_ci_sptr self, fsm FSMo, int STo0, int SToK, fsm FSMi, int STi0, int STiK, interleaver INTERLEAVER, 
            int blocklength, int repetitions, gr::trellis::siso_type_t SISO_TYPE, int D, 
            pmt_vector_cfloat TABLE, gr::digital::trellis_metric_type_t METRIC_TYPE, 
            float scaling) -> sccc_decoder_combined_ci_sptr

        Constructor Specific Documentation:



        Args:
            FSMo : 
            STo0 : 
            SToK : 
            FSMi : 
            STi0 : 
            STiK : 
            INTERLEAVER : 
            blocklength : 
            repetitions : 
            SISO_TYPE : 
            D : 
            TABLE : 
            METRIC_TYPE : 
            scaling : 
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_make(self, *args, **kwargs)

    def FSMo(self):
        """FSMo(sccc_decoder_combined_ci_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_FSMo(self)

    def FSMi(self):
        """FSMi(sccc_decoder_combined_ci_sptr self) -> fsm"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_FSMi(self)

    def STo0(self):
        """STo0(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_STo0(self)

    def SToK(self):
        """SToK(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_SToK(self)

    def STi0(self):
        """STi0(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_STi0(self)

    def STiK(self):
        """STiK(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_STiK(self)

    def INTERLEAVER(self):
        """INTERLEAVER(sccc_decoder_combined_ci_sptr self) -> interleaver"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_INTERLEAVER(self)

    def blocklength(self):
        """blocklength(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_blocklength(self)

    def repetitions(self):
        """repetitions(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_repetitions(self)

    def D(self):
        """D(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_D(self)

    def TABLE(self):
        """TABLE(sccc_decoder_combined_ci_sptr self) -> pmt_vector_cfloat"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_TABLE(self)

    def METRIC_TYPE(self):
        """METRIC_TYPE(sccc_decoder_combined_ci_sptr self) -> gr::digital::trellis_metric_type_t"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_METRIC_TYPE(self)

    def SISO_TYPE(self):
        """SISO_TYPE(sccc_decoder_combined_ci_sptr self) -> gr::trellis::siso_type_t"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_SISO_TYPE(self)

    def scaling(self):
        """scaling(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_scaling(self)

    def set_scaling(self, *args, **kwargs):
        """set_scaling(sccc_decoder_combined_ci_sptr self, float scaling)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_scaling(self, *args, **kwargs)

    def history(self):
        """history(sccc_decoder_combined_ci_sptr self) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sccc_decoder_combined_ci_sptr self, int which, int delay)
        declare_sample_delay(sccc_decoder_combined_ci_sptr self, unsigned int delay)
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sccc_decoder_combined_ci_sptr self, int which) -> unsigned int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sccc_decoder_combined_ci_sptr self) -> double"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_relative_rate(self)

    def start(self):
        """start(sccc_decoder_combined_ci_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_start(self)

    def stop(self):
        """stop(sccc_decoder_combined_ci_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sccc_decoder_combined_ci_sptr self, unsigned int which_input) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sccc_decoder_combined_ci_sptr self, unsigned int which_output) -> uint64_t"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sccc_decoder_combined_ci_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sccc_decoder_combined_ci_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sccc_decoder_combined_ci_sptr self) -> bool"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sccc_decoder_combined_ci_sptr self, int m)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sccc_decoder_combined_ci_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sccc_decoder_combined_ci_sptr self, long max_output_buffer)
        set_max_output_buffer(sccc_decoder_combined_ci_sptr self, int port, long max_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sccc_decoder_combined_ci_sptr self, int i) -> long"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sccc_decoder_combined_ci_sptr self, long min_output_buffer)
        set_min_output_buffer(sccc_decoder_combined_ci_sptr self, int port, long min_output_buffer)
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sccc_decoder_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full(sccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sccc_decoder_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full_avg(sccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sccc_decoder_combined_ci_sptr self, int which) -> float
        pc_input_buffers_full_var(sccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sccc_decoder_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full(sccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sccc_decoder_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full_avg(sccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sccc_decoder_combined_ci_sptr self, int which) -> float
        pc_output_buffers_full_var(sccc_decoder_combined_ci_sptr self) -> pmt_vector_float
        """
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sccc_decoder_combined_ci_sptr self) -> float"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sccc_decoder_combined_ci_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sccc_decoder_combined_ci_sptr self)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sccc_decoder_combined_ci_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sccc_decoder_combined_ci_sptr self) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sccc_decoder_combined_ci_sptr self, int priority) -> int"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sccc_decoder_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sccc_decoder_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sccc_decoder_combined_ci_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sccc_decoder_combined_ci_sptr self) -> io_signature_sptr"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sccc_decoder_combined_ci_sptr self) -> long"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sccc_decoder_combined_ci_sptr self) -> basic_block_sptr"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sccc_decoder_combined_ci_sptr self, int ninputs, int noutputs) -> bool"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sccc_decoder_combined_ci_sptr self) -> std::string"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sccc_decoder_combined_ci_sptr self, std::string name)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sccc_decoder_combined_ci_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sccc_decoder_combined_ci_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sccc_decoder_combined_ci_sptr self) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sccc_decoder_combined_ci_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _trellis_swig.sccc_decoder_combined_ci_sptr_message_subscribers(self, *args, **kwargs)

sccc_decoder_combined_ci_sptr_swigregister = _trellis_swig.sccc_decoder_combined_ci_sptr_swigregister
sccc_decoder_combined_ci_sptr_swigregister(sccc_decoder_combined_ci_sptr)

sccc_decoder_combined_ci_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sccc_decoder_combined_ci = sccc_decoder_combined_ci.make;



