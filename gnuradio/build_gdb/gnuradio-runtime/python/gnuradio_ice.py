# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `gnuradio.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module gnuradio.ctrlport.GNURadio
_M_gnuradio = Ice.openModule('gnuradio')
_M_gnuradio.ctrlport = Ice.openModule('gnuradio.ctrlport')
_M_gnuradio.ctrlport.GNURadio = Ice.openModule('gnuradio.ctrlport.GNURadio')
__name__ = 'gnuradio.ctrlport.GNURadio'

if 'complex' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.complex = Ice.createTempClass()
    class complex(object):
        def __init__(self, re=0.0, im=0.0):
            self.re = re
            self.im = im

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.complex):
                return NotImplemented
            else:
                if self.re != other.re:
                    return False
                if self.im != other.im:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_complex)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio._t_complex = IcePy.defineStruct('::GNURadio::complex', complex, (), (
        ('re', (), IcePy._t_float),
        ('im', (), IcePy._t_float)
    ))

    _M_gnuradio.ctrlport.GNURadio.complex = complex
    del complex

if 'Knob' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Knob = Ice.createTempClass()
    class Knob(Ice.Object):
        def __init__(self):
            pass

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Knob'

        def ice_staticId():
            return '::GNURadio::Knob'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_Knob)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobPrx = Ice.createTempClass()
    class KnobPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobPrx.ice_checkedCast(proxy, '::GNURadio::Knob', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobPrx = IcePy.defineProxy('::GNURadio::Knob', KnobPrx)

    _M_gnuradio.ctrlport.GNURadio._t_Knob = IcePy.defineClass('::GNURadio::Knob', Knob, -1, (), False, False, None, (), ())
    Knob._ice_type = _M_gnuradio.ctrlport.GNURadio._t_Knob

    _M_gnuradio.ctrlport.GNURadio.Knob = Knob
    del Knob

    _M_gnuradio.ctrlport.GNURadio.KnobPrx = KnobPrx
    del KnobPrx

if 'KnobB' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobB = Ice.createTempClass()
    class KnobB(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=False):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobB', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobB'

        def ice_staticId():
            return '::GNURadio::KnobB'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobB)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobBPrx = Ice.createTempClass()
    class KnobBPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobBPrx.ice_checkedCast(proxy, '::GNURadio::KnobB', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobBPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobBPrx = IcePy.defineProxy('::GNURadio::KnobB', KnobBPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobB = IcePy.defineClass('::GNURadio::KnobB', KnobB, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_bool, False, 0),))
    KnobB._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobB

    _M_gnuradio.ctrlport.GNURadio.KnobB = KnobB
    del KnobB

    _M_gnuradio.ctrlport.GNURadio.KnobBPrx = KnobBPrx
    del KnobBPrx

if 'KnobC' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobC = Ice.createTempClass()
    class KnobC(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=0):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobC', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobC'

        def ice_staticId():
            return '::GNURadio::KnobC'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobC)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobCPrx = Ice.createTempClass()
    class KnobCPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobCPrx.ice_checkedCast(proxy, '::GNURadio::KnobC', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobCPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobCPrx = IcePy.defineProxy('::GNURadio::KnobC', KnobCPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobC = IcePy.defineClass('::GNURadio::KnobC', KnobC, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_byte, False, 0),))
    KnobC._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobC

    _M_gnuradio.ctrlport.GNURadio.KnobC = KnobC
    del KnobC

    _M_gnuradio.ctrlport.GNURadio.KnobCPrx = KnobCPrx
    del KnobCPrx

if 'KnobI' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobI = Ice.createTempClass()
    class KnobI(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=0):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobI', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobI'

        def ice_staticId():
            return '::GNURadio::KnobI'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobI)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobIPrx = Ice.createTempClass()
    class KnobIPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobIPrx.ice_checkedCast(proxy, '::GNURadio::KnobI', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobIPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobIPrx = IcePy.defineProxy('::GNURadio::KnobI', KnobIPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobI = IcePy.defineClass('::GNURadio::KnobI', KnobI, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_int, False, 0),))
    KnobI._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobI

    _M_gnuradio.ctrlport.GNURadio.KnobI = KnobI
    del KnobI

    _M_gnuradio.ctrlport.GNURadio.KnobIPrx = KnobIPrx
    del KnobIPrx

if 'KnobT' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobT = Ice.createTempClass()
    class KnobT(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=0):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobT', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobT'

        def ice_staticId():
            return '::GNURadio::KnobT'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobT)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobTPrx = Ice.createTempClass()
    class KnobTPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobTPrx.ice_checkedCast(proxy, '::GNURadio::KnobT', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobTPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobTPrx = IcePy.defineProxy('::GNURadio::KnobT', KnobTPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobT = IcePy.defineClass('::GNURadio::KnobT', KnobT, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_short, False, 0),))
    KnobT._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobT

    _M_gnuradio.ctrlport.GNURadio.KnobT = KnobT
    del KnobT

    _M_gnuradio.ctrlport.GNURadio.KnobTPrx = KnobTPrx
    del KnobTPrx

if 'KnobF' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobF = Ice.createTempClass()
    class KnobF(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=0.0):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobF', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobF'

        def ice_staticId():
            return '::GNURadio::KnobF'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobF)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobFPrx = Ice.createTempClass()
    class KnobFPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobFPrx.ice_checkedCast(proxy, '::GNURadio::KnobF', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobFPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobFPrx = IcePy.defineProxy('::GNURadio::KnobF', KnobFPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobF = IcePy.defineClass('::GNURadio::KnobF', KnobF, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_float, False, 0),))
    KnobF._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobF

    _M_gnuradio.ctrlport.GNURadio.KnobF = KnobF
    del KnobF

    _M_gnuradio.ctrlport.GNURadio.KnobFPrx = KnobFPrx
    del KnobFPrx

if 'KnobD' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobD = Ice.createTempClass()
    class KnobD(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=0.0):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobD', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobD'

        def ice_staticId():
            return '::GNURadio::KnobD'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobD)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobDPrx = Ice.createTempClass()
    class KnobDPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobDPrx.ice_checkedCast(proxy, '::GNURadio::KnobD', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobDPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobDPrx = IcePy.defineProxy('::GNURadio::KnobD', KnobDPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobD = IcePy.defineClass('::GNURadio::KnobD', KnobD, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_double, False, 0),))
    KnobD._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobD

    _M_gnuradio.ctrlport.GNURadio.KnobD = KnobD
    del KnobD

    _M_gnuradio.ctrlport.GNURadio.KnobDPrx = KnobDPrx
    del KnobDPrx

if 'KnobL' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobL = Ice.createTempClass()
    class KnobL(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=0):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobL', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobL'

        def ice_staticId():
            return '::GNURadio::KnobL'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobL)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobLPrx = Ice.createTempClass()
    class KnobLPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobLPrx.ice_checkedCast(proxy, '::GNURadio::KnobL', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobLPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobLPrx = IcePy.defineProxy('::GNURadio::KnobL', KnobLPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobL = IcePy.defineClass('::GNURadio::KnobL', KnobL, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_long, False, 0),))
    KnobL._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobL

    _M_gnuradio.ctrlport.GNURadio.KnobL = KnobL
    del KnobL

    _M_gnuradio.ctrlport.GNURadio.KnobLPrx = KnobLPrx
    del KnobLPrx

if 'KnobS' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobS = Ice.createTempClass()
    class KnobS(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=''):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobS', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobS'

        def ice_staticId():
            return '::GNURadio::KnobS'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobS)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobSPrx = Ice.createTempClass()
    class KnobSPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobSPrx.ice_checkedCast(proxy, '::GNURadio::KnobS', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobSPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobSPrx = IcePy.defineProxy('::GNURadio::KnobS', KnobSPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobS = IcePy.defineClass('::GNURadio::KnobS', KnobS, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), IcePy._t_string, False, 0),))
    KnobS._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobS

    _M_gnuradio.ctrlport.GNURadio.KnobS = KnobS
    del KnobS

    _M_gnuradio.ctrlport.GNURadio.KnobSPrx = KnobSPrx
    del KnobSPrx

if 'KnobZ' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobZ = Ice.createTempClass()
    class KnobZ(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=Ice._struct_marker):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            if value is Ice._struct_marker:
                self.value = _M_gnuradio.ctrlport.GNURadio.complex()
            else:
                self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobZ', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobZ'

        def ice_staticId():
            return '::GNURadio::KnobZ'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobZ)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobZPrx = Ice.createTempClass()
    class KnobZPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobZPrx.ice_checkedCast(proxy, '::GNURadio::KnobZ', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobZPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobZPrx = IcePy.defineProxy('::GNURadio::KnobZ', KnobZPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobZ = IcePy.defineClass('::GNURadio::KnobZ', KnobZ, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_complex, False, 0),))
    KnobZ._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobZ

    _M_gnuradio.ctrlport.GNURadio.KnobZ = KnobZ
    del KnobZ

    _M_gnuradio.ctrlport.GNURadio.KnobZPrx = KnobZPrx
    del KnobZPrx

if '_t_VectorB' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorB = IcePy.defineSequence('::GNURadio::VectorB', (), IcePy._t_bool)

if '_t_VectorC' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorC = IcePy.defineSequence('::GNURadio::VectorC', (), IcePy._t_byte)

if '_t_VectorI' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorI = IcePy.defineSequence('::GNURadio::VectorI', (), IcePy._t_int)

if '_t_VectorF' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorF = IcePy.defineSequence('::GNURadio::VectorF', (), IcePy._t_float)

if '_t_VectorD' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorD = IcePy.defineSequence('::GNURadio::VectorD', (), IcePy._t_double)

if '_t_VectorS' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorS = IcePy.defineSequence('::GNURadio::VectorS', (), IcePy._t_string)

if '_t_VectorL' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorL = IcePy.defineSequence('::GNURadio::VectorL', (), IcePy._t_long)

if '_t_VectorT' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_VectorT = IcePy.defineSequence('::GNURadio::VectorT', (), IcePy._t_short)

if 'KnobVecB' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecB = Ice.createTempClass()
    class KnobVecB(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecB', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecB'

        def ice_staticId():
            return '::GNURadio::KnobVecB'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecB)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecBPrx = Ice.createTempClass()
    class KnobVecBPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecBPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecB', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecBPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecBPrx = IcePy.defineProxy('::GNURadio::KnobVecB', KnobVecBPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecB = IcePy.defineClass('::GNURadio::KnobVecB', KnobVecB, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorB, False, 0),))
    KnobVecB._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecB

    _M_gnuradio.ctrlport.GNURadio.KnobVecB = KnobVecB
    del KnobVecB

    _M_gnuradio.ctrlport.GNURadio.KnobVecBPrx = KnobVecBPrx
    del KnobVecBPrx

if 'KnobVecC' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecC = Ice.createTempClass()
    class KnobVecC(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecC', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecC'

        def ice_staticId():
            return '::GNURadio::KnobVecC'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecC)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecCPrx = Ice.createTempClass()
    class KnobVecCPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecCPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecC', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecCPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecCPrx = IcePy.defineProxy('::GNURadio::KnobVecC', KnobVecCPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecC = IcePy.defineClass('::GNURadio::KnobVecC', KnobVecC, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorC, False, 0),))
    KnobVecC._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecC

    _M_gnuradio.ctrlport.GNURadio.KnobVecC = KnobVecC
    del KnobVecC

    _M_gnuradio.ctrlport.GNURadio.KnobVecCPrx = KnobVecCPrx
    del KnobVecCPrx

if 'KnobVecI' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecI = Ice.createTempClass()
    class KnobVecI(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecI', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecI'

        def ice_staticId():
            return '::GNURadio::KnobVecI'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecI)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecIPrx = Ice.createTempClass()
    class KnobVecIPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecIPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecI', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecIPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecIPrx = IcePy.defineProxy('::GNURadio::KnobVecI', KnobVecIPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecI = IcePy.defineClass('::GNURadio::KnobVecI', KnobVecI, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorI, False, 0),))
    KnobVecI._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecI

    _M_gnuradio.ctrlport.GNURadio.KnobVecI = KnobVecI
    del KnobVecI

    _M_gnuradio.ctrlport.GNURadio.KnobVecIPrx = KnobVecIPrx
    del KnobVecIPrx

if 'KnobVecT' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecT = Ice.createTempClass()
    class KnobVecT(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecT', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecT'

        def ice_staticId():
            return '::GNURadio::KnobVecT'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecT)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecTPrx = Ice.createTempClass()
    class KnobVecTPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecTPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecT', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecTPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecTPrx = IcePy.defineProxy('::GNURadio::KnobVecT', KnobVecTPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecT = IcePy.defineClass('::GNURadio::KnobVecT', KnobVecT, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorT, False, 0),))
    KnobVecT._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecT

    _M_gnuradio.ctrlport.GNURadio.KnobVecT = KnobVecT
    del KnobVecT

    _M_gnuradio.ctrlport.GNURadio.KnobVecTPrx = KnobVecTPrx
    del KnobVecTPrx

if 'KnobVecF' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecF = Ice.createTempClass()
    class KnobVecF(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecF', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecF'

        def ice_staticId():
            return '::GNURadio::KnobVecF'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecF)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecFPrx = Ice.createTempClass()
    class KnobVecFPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecFPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecF', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecFPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecFPrx = IcePy.defineProxy('::GNURadio::KnobVecF', KnobVecFPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecF = IcePy.defineClass('::GNURadio::KnobVecF', KnobVecF, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorF, False, 0),))
    KnobVecF._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecF

    _M_gnuradio.ctrlport.GNURadio.KnobVecF = KnobVecF
    del KnobVecF

    _M_gnuradio.ctrlport.GNURadio.KnobVecFPrx = KnobVecFPrx
    del KnobVecFPrx

if 'KnobVecD' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecD = Ice.createTempClass()
    class KnobVecD(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecD', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecD'

        def ice_staticId():
            return '::GNURadio::KnobVecD'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecD)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecDPrx = Ice.createTempClass()
    class KnobVecDPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecDPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecD', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecDPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecDPrx = IcePy.defineProxy('::GNURadio::KnobVecD', KnobVecDPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecD = IcePy.defineClass('::GNURadio::KnobVecD', KnobVecD, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorD, False, 0),))
    KnobVecD._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecD

    _M_gnuradio.ctrlport.GNURadio.KnobVecD = KnobVecD
    del KnobVecD

    _M_gnuradio.ctrlport.GNURadio.KnobVecDPrx = KnobVecDPrx
    del KnobVecDPrx

if 'KnobVecL' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecL = Ice.createTempClass()
    class KnobVecL(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecL', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecL'

        def ice_staticId():
            return '::GNURadio::KnobVecL'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecL)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecLPrx = Ice.createTempClass()
    class KnobVecLPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecLPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecL', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecLPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecLPrx = IcePy.defineProxy('::GNURadio::KnobVecL', KnobVecLPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecL = IcePy.defineClass('::GNURadio::KnobVecL', KnobVecL, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorL, False, 0),))
    KnobVecL._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecL

    _M_gnuradio.ctrlport.GNURadio.KnobVecL = KnobVecL
    del KnobVecL

    _M_gnuradio.ctrlport.GNURadio.KnobVecLPrx = KnobVecLPrx
    del KnobVecLPrx

if 'KnobVecS' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobVecS = Ice.createTempClass()
    class KnobVecS(_M_gnuradio.ctrlport.GNURadio.Knob):
        def __init__(self, value=None):
            _M_gnuradio.ctrlport.GNURadio.Knob.__init__(self)
            self.value = value

        def ice_ids(self, current=None):
            return ('::GNURadio::Knob', '::GNURadio::KnobVecS', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::KnobVecS'

        def ice_staticId():
            return '::GNURadio::KnobVecS'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobVecS)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.KnobVecSPrx = Ice.createTempClass()
    class KnobVecSPrx(_M_gnuradio.ctrlport.GNURadio.KnobPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecSPrx.ice_checkedCast(proxy, '::GNURadio::KnobVecS', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.KnobVecSPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecSPrx = IcePy.defineProxy('::GNURadio::KnobVecS', KnobVecSPrx)

    _M_gnuradio.ctrlport.GNURadio._t_KnobVecS = IcePy.defineClass('::GNURadio::KnobVecS', KnobVecS, -1, (), False, False, _M_gnuradio.ctrlport.GNURadio._t_Knob, (), (('value', (), _M_gnuradio.ctrlport.GNURadio._t_VectorS, False, 0),))
    KnobVecS._ice_type = _M_gnuradio.ctrlport.GNURadio._t_KnobVecS

    _M_gnuradio.ctrlport.GNURadio.KnobVecS = KnobVecS
    del KnobVecS

    _M_gnuradio.ctrlport.GNURadio.KnobVecSPrx = KnobVecSPrx
    del KnobVecSPrx

if 'KnobType' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobType = Ice.createTempClass()
    class KnobType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    KnobType.KNOBBOOL = KnobType("KNOBBOOL", 0)
    KnobType.KNOBCHAR = KnobType("KNOBCHAR", 1)
    KnobType.KNOBINT = KnobType("KNOBINT", 2)
    KnobType.KNOBFLOAT = KnobType("KNOBFLOAT", 3)
    KnobType.KNOBDOUBLE = KnobType("KNOBDOUBLE", 4)
    KnobType.KNOBSTRING = KnobType("KNOBSTRING", 5)
    KnobType.KNOBLONG = KnobType("KNOBLONG", 6)
    KnobType.KNOBVECBOOL = KnobType("KNOBVECBOOL", 7)
    KnobType.KNOBVECCHAR = KnobType("KNOBVECCHAR", 8)
    KnobType.KNOBVECINT = KnobType("KNOBVECINT", 9)
    KnobType.KNOBVECFLOAT = KnobType("KNOBVECFLOAT", 10)
    KnobType.KNOBVECDOUBLE = KnobType("KNOBVECDOUBLE", 11)
    KnobType.KNOBVECSTRING = KnobType("KNOBVECSTRING", 12)
    KnobType.KNOBVECLONG = KnobType("KNOBVECLONG", 13)
    KnobType.KNOBSHORT = KnobType("KNOBSHORT", 14)
    KnobType._enumerators = { 0:KnobType.KNOBBOOL, 1:KnobType.KNOBCHAR, 2:KnobType.KNOBINT, 3:KnobType.KNOBFLOAT, 4:KnobType.KNOBDOUBLE, 5:KnobType.KNOBSTRING, 6:KnobType.KNOBLONG, 7:KnobType.KNOBVECBOOL, 8:KnobType.KNOBVECCHAR, 9:KnobType.KNOBVECINT, 10:KnobType.KNOBVECFLOAT, 11:KnobType.KNOBVECDOUBLE, 12:KnobType.KNOBVECSTRING, 13:KnobType.KNOBVECLONG, 14:KnobType.KNOBSHORT }

    _M_gnuradio.ctrlport.GNURadio._t_KnobType = IcePy.defineEnum('::GNURadio::KnobType', KnobType, (), KnobType._enumerators)

    _M_gnuradio.ctrlport.GNURadio.KnobType = KnobType
    del KnobType

_M_gnuradio.ctrlport.GNURadio.DISPNULL = 0

_M_gnuradio.ctrlport.GNURadio.DISPTIME = 1

_M_gnuradio.ctrlport.GNURadio.DISPXY = 2

_M_gnuradio.ctrlport.GNURadio.DISPPSD = 4

_M_gnuradio.ctrlport.GNURadio.DISPSPEC = 8

_M_gnuradio.ctrlport.GNURadio.DISPRAST = 16

_M_gnuradio.ctrlport.GNURadio.DISPOPTCPLX = 256

_M_gnuradio.ctrlport.GNURadio.DISPOPTLOG = 512

_M_gnuradio.ctrlport.GNURadio.DISPOPTSTEM = 1024

_M_gnuradio.ctrlport.GNURadio.DISPOPTSTRIP = 2048

_M_gnuradio.ctrlport.GNURadio.DISPOPTSCATTER = 4096

if 'KnobProp' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.KnobProp = Ice.createTempClass()
    class KnobProp(object):
        def __init__(self, type=_M_gnuradio.ctrlport.GNURadio.KnobType.KNOBBOOL, units='', description='', display=0, min=None, max=None, defaultvalue=None):
            self.type = type
            self.units = units
            self.description = description
            self.display = display
            self.min = min
            self.max = max
            self.defaultvalue = defaultvalue

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.KnobProp):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.units != other.units:
                    return False
                if self.description != other.description:
                    return False
                if self.display != other.display:
                    return False
                if self.min != other.min:
                    return False
                if self.max != other.max:
                    return False
                if self.defaultvalue != other.defaultvalue:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_KnobProp)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio._t_KnobProp = IcePy.defineStruct('::GNURadio::KnobProp', KnobProp, (), (
        ('type', (), _M_gnuradio.ctrlport.GNURadio._t_KnobType),
        ('units', (), IcePy._t_string),
        ('description', (), IcePy._t_string),
        ('display', (), IcePy._t_int),
        ('min', (), _M_gnuradio.ctrlport.GNURadio._t_Knob),
        ('max', (), _M_gnuradio.ctrlport.GNURadio._t_Knob),
        ('defaultvalue', (), _M_gnuradio.ctrlport.GNURadio._t_Knob)
    ))

    _M_gnuradio.ctrlport.GNURadio.KnobProp = KnobProp
    del KnobProp

if '_t_KnobIDList' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_KnobIDList = IcePy.defineSequence('::GNURadio::KnobIDList', (), IcePy._t_string)

if '_t_KnobMap' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_KnobMap = IcePy.defineDictionary('::GNURadio::KnobMap', (), IcePy._t_string, _M_gnuradio.ctrlport.GNURadio._t_Knob)

if '_t_KnobPropMap' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_KnobPropMap = IcePy.defineDictionary('::GNURadio::KnobPropMap', (), IcePy._t_string, _M_gnuradio.ctrlport.GNURadio._t_KnobProp)

if '_t_WaveformArgMap' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio._t_WaveformArgMap = IcePy.defineDictionary('::GNURadio::WaveformArgMap', (), IcePy._t_string, IcePy._t_string)

if 'StreamReceiver' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.StreamReceiver = Ice.createTempClass()
    class StreamReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.StreamReceiver:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.StreamReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::StreamReceiver', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::StreamReceiver'

        def ice_staticId():
            return '::GNURadio::StreamReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def push(self, data, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_StreamReceiver)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.StreamReceiverPrx = Ice.createTempClass()
    class StreamReceiverPrx(Ice.ObjectPrx):

        def push(self, data, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.StreamReceiver._op_push.invoke(self, ((data, ), _ctx))

        def begin_push(self, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.StreamReceiver._op_push.begin(self, ((data, ), _response, _ex, _sent, _ctx))

        def end_push(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.StreamReceiver._op_push.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.StreamReceiverPrx.ice_checkedCast(proxy, '::GNURadio::StreamReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.StreamReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_StreamReceiverPrx = IcePy.defineProxy('::GNURadio::StreamReceiver', StreamReceiverPrx)

    _M_gnuradio.ctrlport.GNURadio._t_StreamReceiver = IcePy.defineClass('::GNURadio::StreamReceiver', StreamReceiver, -1, (), True, False, None, (), ())
    StreamReceiver._ice_type = _M_gnuradio.ctrlport.GNURadio._t_StreamReceiver

    StreamReceiver._op_push = IcePy.Operation('push', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_gnuradio.ctrlport.GNURadio._t_VectorC, False, 0),), (), None, ())

    _M_gnuradio.ctrlport.GNURadio.StreamReceiver = StreamReceiver
    del StreamReceiver

    _M_gnuradio.ctrlport.GNURadio.StreamReceiverPrx = StreamReceiverPrx
    del StreamReceiverPrx

if 'ControlPort' not in _M_gnuradio.ctrlport.GNURadio.__dict__:
    _M_gnuradio.ctrlport.GNURadio.ControlPort = Ice.createTempClass()
    class ControlPort(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.ControlPort:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.ControlPort is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::ControlPort', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::ControlPort'

        def ice_staticId():
            return '::GNURadio::ControlPort'
        ice_staticId = staticmethod(ice_staticId)

        def set(self, knobs, current=None):
            pass

        def get(self, knobs, current=None):
            pass

        def getRe(self, knobs, current=None):
            pass

        def properties(self, knobs, current=None):
            pass

        def shutdown(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio._t_ControlPort)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.ControlPortPrx = Ice.createTempClass()
    class ControlPortPrx(Ice.ObjectPrx):

        def set(self, knobs, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_set.invoke(self, ((knobs, ), _ctx))

        def begin_set(self, knobs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_set.begin(self, ((knobs, ), _response, _ex, _sent, _ctx))

        def end_set(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_set.end(self, _r)

        def get(self, knobs, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_get.invoke(self, ((knobs, ), _ctx))

        def begin_get(self, knobs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_get.begin(self, ((knobs, ), _response, _ex, _sent, _ctx))

        def end_get(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_get.end(self, _r)

        def getRe(self, knobs, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_getRe.invoke(self, ((knobs, ), _ctx))

        def begin_getRe(self, knobs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_getRe.begin(self, ((knobs, ), _response, _ex, _sent, _ctx))

        def end_getRe(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_getRe.end(self, _r)

        def properties(self, knobs, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_properties.invoke(self, ((knobs, ), _ctx))

        def begin_properties(self, knobs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_properties.begin(self, ((knobs, ), _response, _ex, _sent, _ctx))

        def end_properties(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_properties.end(self, _r)

        def shutdown(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_shutdown.invoke(self, ((), _ctx))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_shutdown.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_shutdown(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.ControlPort._op_shutdown.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPortPrx.ice_checkedCast(proxy, '::GNURadio::ControlPort', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.ControlPortPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio._t_ControlPortPrx = IcePy.defineProxy('::GNURadio::ControlPort', ControlPortPrx)

    _M_gnuradio.ctrlport.GNURadio._t_ControlPort = IcePy.defineClass('::GNURadio::ControlPort', ControlPort, -1, (), True, False, None, (), ())
    ControlPort._ice_type = _M_gnuradio.ctrlport.GNURadio._t_ControlPort

    ControlPort._op_set = IcePy.Operation('set', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_gnuradio.ctrlport.GNURadio._t_KnobMap, False, 0),), (), None, ())
    ControlPort._op_get = IcePy.Operation('get', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_gnuradio.ctrlport.GNURadio._t_KnobIDList, False, 0),), (), ((), _M_gnuradio.ctrlport.GNURadio._t_KnobMap, False, 0), ())
    ControlPort._op_getRe = IcePy.Operation('getRe', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_gnuradio.ctrlport.GNURadio._t_KnobIDList, False, 0),), (), ((), _M_gnuradio.ctrlport.GNURadio._t_KnobMap, False, 0), ())
    ControlPort._op_properties = IcePy.Operation('properties', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_gnuradio.ctrlport.GNURadio._t_KnobIDList, False, 0),), (), ((), _M_gnuradio.ctrlport.GNURadio._t_KnobPropMap, False, 0), ())
    ControlPort._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_gnuradio.ctrlport.GNURadio.ControlPort = ControlPort
    del ControlPort

    _M_gnuradio.ctrlport.GNURadio.ControlPortPrx = ControlPortPrx
    del ControlPortPrx

# End of module gnuradio.ctrlport.GNURadio
