# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `frontend.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import gnuradio_ice
_M_gnuradio = Ice.openModule('gnuradio')
_M_gnuradio.ctrlport = Ice.openModule('gnuradio.ctrlport')

# Included module gnuradio.ctrlport.GNURadio
_M_gnuradio.ctrlport.GNURadio = Ice.openModule('gnuradio.ctrlport.GNURadio')

# Start of module gnuradio.ctrlport.GNURadio
__name__ = 'gnuradio.ctrlport.GNURadio'

# Start of module gnuradio.ctrlport.GNURadio.Frontend
_M_gnuradio.ctrlport.GNURadio.Frontend = Ice.openModule('gnuradio.ctrlport.GNURadio.Frontend')
__name__ = 'gnuradio.ctrlport.GNURadio.Frontend'

if '_t_StrStrDict' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict = IcePy.defineDictionary('::GNURadio::Frontend::StrStrDict', (), IcePy._t_string, IcePy._t_string)

if '_t_TunerArgs' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerArgs = IcePy.defineDictionary('::GNURadio::Frontend::TunerArgs', (), IcePy._t_string, IcePy._t_string)

if 'F32Range' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.F32Range = Ice.createTempClass()
    class F32Range(object):
        def __init__(self, min=0.0, max=0.0):
            self.min = min
            self.max = max

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.Frontend.F32Range):
                return NotImplemented
            else:
                if self.min != other.min:
                    return False
                if self.max != other.max:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_F32Range)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_F32Range = IcePy.defineStruct('::GNURadio::Frontend::F32Range', F32Range, (), (
        ('min', (), IcePy._t_float),
        ('max', (), IcePy._t_float)
    ))

    _M_gnuradio.ctrlport.GNURadio.Frontend.F32Range = F32Range
    del F32Range

if 'NotSupported' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.NotSupported = Ice.createTempClass()
    class NotSupported(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'GNURadio::Frontend::NotSupported'

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported = IcePy.defineException('::GNURadio::Frontend::NotSupported', NotSupported, (), False, None, ())
    NotSupported._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported

    _M_gnuradio.ctrlport.GNURadio.Frontend.NotSupported = NotSupported
    del NotSupported

if 'InvalidSetting' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.InvalidSetting = Ice.createTempClass()
    class InvalidSetting(Ice.UserException):
        def __init__(self, msg=''):
            self.msg = msg

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'GNURadio::Frontend::InvalidSetting'

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting = IcePy.defineException('::GNURadio::Frontend::InvalidSetting', InvalidSetting, (), False, None, (('msg', (), IcePy._t_string, False, 0),))
    InvalidSetting._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting

    _M_gnuradio.ctrlport.GNURadio.Frontend.InvalidSetting = InvalidSetting
    del InvalidSetting

if 'ReceiverFailure' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverFailure = Ice.createTempClass()
    class ReceiverFailure(Ice.UserException):
        def __init__(self, msg=''):
            self.msg = msg

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'GNURadio::Frontend::ReceiverFailure'

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure = IcePy.defineException('::GNURadio::Frontend::ReceiverFailure', ReceiverFailure, (), False, None, (('msg', (), IcePy._t_string, False, 0),))
    ReceiverFailure._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure

    _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverFailure = ReceiverFailure
    del ReceiverFailure

if 'NotExist' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.NotExist = Ice.createTempClass()
    class NotExist(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'GNURadio::Frontend::NotExist'

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotExist = IcePy.defineException('::GNURadio::Frontend::NotExist', NotExist, (), False, None, ())
    NotExist._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotExist

    _M_gnuradio.ctrlport.GNURadio.Frontend.NotExist = NotExist
    del NotExist

if 'TunerStatus' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.TunerStatus = Ice.createTempClass()
    class TunerStatus(object):
        def __init__(self, freq=0.0, rate=0.0, a2dbits=0, gain=0.0, gainrange=Ice._struct_marker, isInverted=False, info=None):
            self.freq = freq
            self.rate = rate
            self.a2dbits = a2dbits
            self.gain = gain
            if gainrange is Ice._struct_marker:
                self.gainrange = _M_gnuradio.ctrlport.GNURadio.Frontend.F32Range()
            else:
                self.gainrange = gainrange
            self.isInverted = isInverted
            self.info = info

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.Frontend.TunerStatus):
                return NotImplemented
            else:
                if self.freq != other.freq:
                    return False
                if self.rate != other.rate:
                    return False
                if self.a2dbits != other.a2dbits:
                    return False
                if self.gain != other.gain:
                    return False
                if self.gainrange != other.gainrange:
                    return False
                if self.isInverted != other.isInverted:
                    return False
                if self.info != other.info:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerStatus)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerStatus = IcePy.defineStruct('::GNURadio::Frontend::TunerStatus', TunerStatus, (), (
        ('freq', (), IcePy._t_float),
        ('rate', (), IcePy._t_float),
        ('a2dbits', (), IcePy._t_int),
        ('gain', (), IcePy._t_float),
        ('gainrange', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_F32Range),
        ('isInverted', (), IcePy._t_bool),
        ('info', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict)
    ))

    _M_gnuradio.ctrlport.GNURadio.Frontend.TunerStatus = TunerStatus
    del TunerStatus

if 'StreamInfo' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.StreamInfo = Ice.createTempClass()
    class StreamInfo(object):
        def __init__(self, uri='', info=None):
            self.uri = uri
            self.info = info

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.Frontend.StreamInfo):
                return NotImplemented
            else:
                if self.uri != other.uri:
                    return False
                if self.info != other.info:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_StreamInfo)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_StreamInfo = IcePy.defineStruct('::GNURadio::Frontend::StreamInfo', StreamInfo, (), (
        ('uri', (), IcePy._t_string),
        ('info', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict)
    ))

    _M_gnuradio.ctrlport.GNURadio.Frontend.StreamInfo = StreamInfo
    del StreamInfo

if 'ReceiverInfo' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverInfo = Ice.createTempClass()
    class ReceiverInfo(object):
        def __init__(self, uid='', name='', info=None):
            self.uid = uid
            self.name = name
            self.info = info

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverInfo):
                return NotImplemented
            else:
                if self.uid != other.uid:
                    return False
                if self.name != other.name:
                    return False
                if self.info != other.info:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverInfo)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverInfo = IcePy.defineStruct('::GNURadio::Frontend::ReceiverInfo', ReceiverInfo, (), (
        ('uid', (), IcePy._t_string),
        ('name', (), IcePy._t_string),
        ('info', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict)
    ))

    _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverInfo = ReceiverInfo
    del ReceiverInfo

if 'ChannelStatus' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelStatus = Ice.createTempClass()
    class ChannelStatus(object):
        def __init__(self, uid='', name='', active=False, freq=0.0, bandwidth=0.0, isComplex=False, info=None):
            self.uid = uid
            self.name = name
            self.active = active
            self.freq = freq
            self.bandwidth = bandwidth
            self.isComplex = isComplex
            self.info = info

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelStatus):
                return NotImplemented
            else:
                if self.uid != other.uid:
                    return False
                if self.name != other.name:
                    return False
                if self.active != other.active:
                    return False
                if self.freq != other.freq:
                    return False
                if self.bandwidth != other.bandwidth:
                    return False
                if self.isComplex != other.isComplex:
                    return False
                if self.info != other.info:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelStatus)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelStatus = IcePy.defineStruct('::GNURadio::Frontend::ChannelStatus', ChannelStatus, (), (
        ('uid', (), IcePy._t_string),
        ('name', (), IcePy._t_string),
        ('active', (), IcePy._t_bool),
        ('freq', (), IcePy._t_float),
        ('bandwidth', (), IcePy._t_float),
        ('isComplex', (), IcePy._t_bool),
        ('info', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict)
    ))

    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelStatus = ChannelStatus
    del ChannelStatus

if 'ChannelizerStatus' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerStatus = Ice.createTempClass()
    class ChannelizerStatus(object):
        def __init__(self, uid='', name='', info=None):
            self.uid = uid
            self.name = name
            self.info = info

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerStatus):
                return NotImplemented
            else:
                if self.uid != other.uid:
                    return False
                if self.name != other.name:
                    return False
                if self.info != other.info:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerStatus)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerStatus = IcePy.defineStruct('::GNURadio::Frontend::ChannelizerStatus', ChannelizerStatus, (), (
        ('uid', (), IcePy._t_string),
        ('name', (), IcePy._t_string),
        ('info', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict)
    ))

    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerStatus = ChannelizerStatus
    del ChannelizerStatus

if 'Component' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.Component = Ice.createTempClass()
    class Component(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Frontend.Component:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Frontend.Component is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Frontend::Component', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Frontend::Component'

        def ice_staticId():
            return '::GNURadio::Frontend::Component'
        ice_staticId = staticmethod(ice_staticId)

        def setName(self, newName, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_Component)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend.ComponentPrx = Ice.createTempClass()
    class ComponentPrx(Ice.ObjectPrx):

        def setName(self, newName, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Component._op_setName.invoke(self, ((newName, ), _ctx))

        def begin_setName(self, newName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Component._op_setName.begin(self, ((newName, ), _response, _ex, _sent, _ctx))

        def end_setName(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Component._op_setName.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ComponentPrx.ice_checkedCast(proxy, '::GNURadio::Frontend::Component', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ComponentPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ComponentPrx = IcePy.defineProxy('::GNURadio::Frontend::Component', ComponentPrx)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_Component = IcePy.defineClass('::GNURadio::Frontend::Component', Component, -1, (), True, False, None, (), ())
    Component._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_Component

    Component._op_setName = IcePy.Operation('setName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_gnuradio.ctrlport.GNURadio.Frontend.Component = Component
    del Component

    _M_gnuradio.ctrlport.GNURadio.Frontend.ComponentPrx = ComponentPrx
    del ComponentPrx

if 'AbstractReceiver' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver = Ice.createTempClass()
    class AbstractReceiver(_M_gnuradio.ctrlport.GNURadio.Frontend.Component):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Frontend::AbstractReceiver', '::GNURadio::Frontend::Component', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Frontend::AbstractReceiver'

        def ice_staticId():
            return '::GNURadio::Frontend::AbstractReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def getReceiverInfo(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_AbstractReceiver)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiverPrx = Ice.createTempClass()
    class AbstractReceiverPrx(_M_gnuradio.ctrlport.GNURadio.Frontend.ComponentPrx):

        def getReceiverInfo(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver._op_getReceiverInfo.invoke(self, ((), _ctx))

        def begin_getReceiverInfo(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver._op_getReceiverInfo.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getReceiverInfo(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver._op_getReceiverInfo.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiverPrx.ice_checkedCast(proxy, '::GNURadio::Frontend::AbstractReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_AbstractReceiverPrx = IcePy.defineProxy('::GNURadio::Frontend::AbstractReceiver', AbstractReceiverPrx)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_AbstractReceiver = IcePy.defineClass('::GNURadio::Frontend::AbstractReceiver', AbstractReceiver, -1, (), True, False, None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_Component,), ())
    AbstractReceiver._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_AbstractReceiver

    AbstractReceiver._op_getReceiverInfo = IcePy.Operation('getReceiverInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverInfo, False, 0), ())

    _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver = AbstractReceiver
    del AbstractReceiver

    _M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiverPrx = AbstractReceiverPrx
    del AbstractReceiverPrx

if 'Tuner' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner = Ice.createTempClass()
    class Tuner(_M_gnuradio.ctrlport.GNURadio.Frontend.Component):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Frontend.Tuner is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Frontend::Component', '::GNURadio::Frontend::Tuner', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Frontend::Tuner'

        def ice_staticId():
            return '::GNURadio::Frontend::Tuner'
        ice_staticId = staticmethod(ice_staticId)

        def configureTuner(self, args, current=None):
            pass

        def status(self, current=None):
            pass

        def setGain(self, gain, current=None):
            pass

        def setInversion(self, inverted, current=None):
            pass

        def setCenterFreq(self, freq, current=None):
            pass

        def setBandwidth(self, bw, current=None):
            pass

        def setInfo(self, k, v, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_Tuner)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend.TunerPrx = Ice.createTempClass()
    class TunerPrx(_M_gnuradio.ctrlport.GNURadio.Frontend.ComponentPrx):

        def configureTuner(self, args, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_configureTuner.invoke(self, ((args, ), _ctx))

        def begin_configureTuner(self, args, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_configureTuner.begin(self, ((args, ), _response, _ex, _sent, _ctx))

        def end_configureTuner(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_configureTuner.end(self, _r)

        def status(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_status.invoke(self, ((), _ctx))

        def begin_status(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_status.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_status(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_status.end(self, _r)

        def setGain(self, gain, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setGain.invoke(self, ((gain, ), _ctx))

        def begin_setGain(self, gain, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setGain.begin(self, ((gain, ), _response, _ex, _sent, _ctx))

        def end_setGain(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setGain.end(self, _r)

        def setInversion(self, inverted, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setInversion.invoke(self, ((inverted, ), _ctx))

        def begin_setInversion(self, inverted, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setInversion.begin(self, ((inverted, ), _response, _ex, _sent, _ctx))

        def end_setInversion(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setInversion.end(self, _r)

        def setCenterFreq(self, freq, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setCenterFreq.invoke(self, ((freq, ), _ctx))

        def begin_setCenterFreq(self, freq, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setCenterFreq.begin(self, ((freq, ), _response, _ex, _sent, _ctx))

        def end_setCenterFreq(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setCenterFreq.end(self, _r)

        def setBandwidth(self, bw, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setBandwidth.invoke(self, ((bw, ), _ctx))

        def begin_setBandwidth(self, bw, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setBandwidth.begin(self, ((bw, ), _response, _ex, _sent, _ctx))

        def end_setBandwidth(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setBandwidth.end(self, _r)

        def setInfo(self, k, v, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setInfo.invoke(self, ((k, v), _ctx))

        def begin_setInfo(self, k, v, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setInfo.begin(self, ((k, v), _response, _ex, _sent, _ctx))

        def end_setInfo(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner._op_setInfo.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.TunerPrx.ice_checkedCast(proxy, '::GNURadio::Frontend::Tuner', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.TunerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerPrx = IcePy.defineProxy('::GNURadio::Frontend::Tuner', TunerPrx)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_Tuner = IcePy.defineClass('::GNURadio::Frontend::Tuner', Tuner, -1, (), True, False, None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_Component,), ())
    Tuner._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_Tuner

    Tuner._op_configureTuner = IcePy.Operation('configureTuner', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerArgs, False, 0),), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerStatus, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))
    Tuner._op_status = IcePy.Operation('status', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerStatus, False, 0), ())
    Tuner._op_setGain = IcePy.Operation('setGain', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))
    Tuner._op_setInversion = IcePy.Operation('setInversion', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_bool, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))
    Tuner._op_setCenterFreq = IcePy.Operation('setCenterFreq', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))
    Tuner._op_setBandwidth = IcePy.Operation('setBandwidth', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))
    Tuner._op_setInfo = IcePy.Operation('setInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))

    _M_gnuradio.ctrlport.GNURadio.Frontend.Tuner = Tuner
    del Tuner

    _M_gnuradio.ctrlport.GNURadio.Frontend.TunerPrx = TunerPrx
    del TunerPrx

if 'Channel' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.Channel = Ice.createTempClass()
    class Channel(_M_gnuradio.ctrlport.GNURadio.Frontend.Tuner):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Frontend.Channel:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Frontend.Channel is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Frontend::Channel', '::GNURadio::Frontend::Component', '::GNURadio::Frontend::Tuner', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Frontend::Channel'

        def ice_staticId():
            return '::GNURadio::Frontend::Channel'
        ice_staticId = staticmethod(ice_staticId)

        def start(self, current=None):
            pass

        def stop(self, current=None):
            pass

        def destroyChannel(self, current=None):
            pass

        def active(self, current=None):
            pass

        def channelStat(self, current=None):
            pass

        def stream(self, current=None):
            pass

        def setComplex(self, complex, current=None):
            pass

        def setStreamInfo(self, k, v, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_Channel)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelPrx = Ice.createTempClass()
    class ChannelPrx(_M_gnuradio.ctrlport.GNURadio.Frontend.TunerPrx):

        def start(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_start.invoke(self, ((), _ctx))

        def begin_start(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_start.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_start(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_start.end(self, _r)

        def stop(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_stop.invoke(self, ((), _ctx))

        def begin_stop(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_stop.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_stop(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_stop.end(self, _r)

        def destroyChannel(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_destroyChannel.invoke(self, ((), _ctx))

        def begin_destroyChannel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_destroyChannel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_destroyChannel(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_destroyChannel.end(self, _r)

        def active(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_active.invoke(self, ((), _ctx))

        def begin_active(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_active.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_active(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_active.end(self, _r)

        def channelStat(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_channelStat.invoke(self, ((), _ctx))

        def begin_channelStat(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_channelStat.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_channelStat(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_channelStat.end(self, _r)

        def stream(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_stream.invoke(self, ((), _ctx))

        def begin_stream(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_stream.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_stream(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_stream.end(self, _r)

        def setComplex(self, complex, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_setComplex.invoke(self, ((complex, ), _ctx))

        def begin_setComplex(self, complex, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_setComplex.begin(self, ((complex, ), _response, _ex, _sent, _ctx))

        def end_setComplex(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_setComplex.end(self, _r)

        def setStreamInfo(self, k, v, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_setStreamInfo.invoke(self, ((k, v), _ctx))

        def begin_setStreamInfo(self, k, v, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_setStreamInfo.begin(self, ((k, v), _response, _ex, _sent, _ctx))

        def end_setStreamInfo(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channel._op_setStreamInfo.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelPrx.ice_checkedCast(proxy, '::GNURadio::Frontend::Channel', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelPrx = IcePy.defineProxy('::GNURadio::Frontend::Channel', ChannelPrx)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_Channel = IcePy.defineClass('::GNURadio::Frontend::Channel', Channel, -1, (), True, False, None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_Tuner,), ())
    Channel._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_Channel

    Channel._op_start = IcePy.Operation('start', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Channel._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Channel._op_destroyChannel = IcePy.Operation('destroyChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported,))
    Channel._op_active = IcePy.Operation('active', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Channel._op_channelStat = IcePy.Operation('channelStat', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelStatus, False, 0), ())
    Channel._op_stream = IcePy.Operation('stream', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StreamInfo, False, 0), ())
    Channel._op_setComplex = IcePy.Operation('setComplex', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_bool, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))
    Channel._op_setStreamInfo = IcePy.Operation('setStreamInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))

    _M_gnuradio.ctrlport.GNURadio.Frontend.Channel = Channel
    del Channel

    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelPrx = ChannelPrx
    del ChannelPrx

if '_t_TunerSeq' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerSeq = IcePy.defineSequence('::GNURadio::Frontend::TunerSeq', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerPrx)

if '_t_ChannelSeq' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelSeq = IcePy.defineSequence('::GNURadio::Frontend::ChannelSeq', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelPrx)

if 'Channelizer' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer = Ice.createTempClass()
    class Channelizer(_M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Frontend.Channelizer is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Frontend::AbstractReceiver', '::GNURadio::Frontend::Channelizer', '::GNURadio::Frontend::Component', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Frontend::Channelizer'

        def ice_staticId():
            return '::GNURadio::Frontend::Channelizer'
        ice_staticId = staticmethod(ice_staticId)

        def status(self, current=None):
            pass

        def getTuner(self, current=None):
            pass

        def getChannels(self, current=None):
            pass

        def getActiveChannels(self, current=None):
            pass

        def getInactiveChannels(self, current=None):
            pass

        def createChannel(self, freq, bw, args, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_Channelizer)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerPrx = Ice.createTempClass()
    class ChannelizerPrx(_M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiverPrx):

        def status(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_status.invoke(self, ((), _ctx))

        def begin_status(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_status.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_status(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_status.end(self, _r)

        def getTuner(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getTuner.invoke(self, ((), _ctx))

        def begin_getTuner(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getTuner.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getTuner(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getTuner.end(self, _r)

        def getChannels(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getChannels.invoke(self, ((), _ctx))

        def begin_getChannels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getChannels.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getChannels(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getChannels.end(self, _r)

        def getActiveChannels(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getActiveChannels.invoke(self, ((), _ctx))

        def begin_getActiveChannels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getActiveChannels.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getActiveChannels(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getActiveChannels.end(self, _r)

        def getInactiveChannels(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getInactiveChannels.invoke(self, ((), _ctx))

        def begin_getInactiveChannels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getInactiveChannels.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getInactiveChannels(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_getInactiveChannels.end(self, _r)

        def createChannel(self, freq, bw, args, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_createChannel.invoke(self, ((freq, bw, args), _ctx))

        def begin_createChannel(self, freq, bw, args, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_createChannel.begin(self, ((freq, bw, args), _response, _ex, _sent, _ctx))

        def end_createChannel(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer._op_createChannel.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerPrx.ice_checkedCast(proxy, '::GNURadio::Frontend::Channelizer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerPrx = IcePy.defineProxy('::GNURadio::Frontend::Channelizer', ChannelizerPrx)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_Channelizer = IcePy.defineClass('::GNURadio::Frontend::Channelizer', Channelizer, -1, (), True, False, None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_AbstractReceiver,), ())
    Channelizer._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_Channelizer

    Channelizer._op_status = IcePy.Operation('status', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerStatus, False, 0), ())
    Channelizer._op_getTuner = IcePy.Operation('getTuner', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_TunerPrx, False, 0), ())
    Channelizer._op_getChannels = IcePy.Operation('getChannels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelSeq, False, 0), ())
    Channelizer._op_getActiveChannels = IcePy.Operation('getActiveChannels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelSeq, False, 0), ())
    Channelizer._op_getInactiveChannels = IcePy.Operation('getInactiveChannels', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelSeq, False, 0), ())
    Channelizer._op_createChannel = IcePy.Operation('createChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_StrStrDict, False, 0)), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelPrx, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported,))

    _M_gnuradio.ctrlport.GNURadio.Frontend.Channelizer = Channelizer
    del Channelizer

    _M_gnuradio.ctrlport.GNURadio.Frontend.ChannelizerPrx = ChannelizerPrx
    del ChannelizerPrx

if '_t_ChannelizerSeq' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerSeq = IcePy.defineSequence('::GNURadio::Frontend::ChannelizerSeq', (), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerPrx)

if 'Receiver' not in _M_gnuradio.ctrlport.GNURadio.Frontend.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver = Ice.createTempClass()
    class Receiver(_M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiver):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Frontend.Receiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Frontend::AbstractReceiver', '::GNURadio::Frontend::Component', '::GNURadio::Frontend::Receiver', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Frontend::Receiver'

        def ice_staticId():
            return '::GNURadio::Frontend::Receiver'
        ice_staticId = staticmethod(ice_staticId)

        def getInputs(self, current=None):
            pass

        def getChannelByID(self, id, current=None):
            pass

        def getChannelizerByID(self, id, current=None):
            pass

        def setInfo(self, k, v, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Frontend._t_Receiver)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverPrx = Ice.createTempClass()
    class ReceiverPrx(_M_gnuradio.ctrlport.GNURadio.Frontend.AbstractReceiverPrx):

        def getInputs(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getInputs.invoke(self, ((), _ctx))

        def begin_getInputs(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getInputs.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getInputs(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getInputs.end(self, _r)

        def getChannelByID(self, id, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getChannelByID.invoke(self, ((id, ), _ctx))

        def begin_getChannelByID(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getChannelByID.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_getChannelByID(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getChannelByID.end(self, _r)

        def getChannelizerByID(self, id, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getChannelizerByID.invoke(self, ((id, ), _ctx))

        def begin_getChannelizerByID(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getChannelizerByID.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_getChannelizerByID(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_getChannelizerByID.end(self, _r)

        def setInfo(self, k, v, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_setInfo.invoke(self, ((k, v), _ctx))

        def begin_setInfo(self, k, v, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_setInfo.begin(self, ((k, v), _response, _ex, _sent, _ctx))

        def end_setInfo(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver._op_setInfo.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverPrx.ice_checkedCast(proxy, '::GNURadio::Frontend::Receiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverPrx = IcePy.defineProxy('::GNURadio::Frontend::Receiver', ReceiverPrx)

    _M_gnuradio.ctrlport.GNURadio.Frontend._t_Receiver = IcePy.defineClass('::GNURadio::Frontend::Receiver', Receiver, -1, (), True, False, None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_AbstractReceiver,), ())
    Receiver._ice_type = _M_gnuradio.ctrlport.GNURadio.Frontend._t_Receiver

    Receiver._op_getInputs = IcePy.Operation('getInputs', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerSeq, False, 0), ())
    Receiver._op_getChannelByID = IcePy.Operation('getChannelByID', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelPrx, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_NotExist,))
    Receiver._op_getChannelizerByID = IcePy.Operation('getChannelizerByID', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_gnuradio.ctrlport.GNURadio.Frontend._t_ChannelizerPrx, False, 0), (_M_gnuradio.ctrlport.GNURadio.Frontend._t_NotExist,))
    Receiver._op_setInfo = IcePy.Operation('setInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_ReceiverFailure, _M_gnuradio.ctrlport.GNURadio.Frontend._t_NotSupported, _M_gnuradio.ctrlport.GNURadio.Frontend._t_InvalidSetting))

    _M_gnuradio.ctrlport.GNURadio.Frontend.Receiver = Receiver
    del Receiver

    _M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverPrx = ReceiverPrx
    del ReceiverPrx

# End of module gnuradio.ctrlport.GNURadio.Frontend

__name__ = 'gnuradio.ctrlport.GNURadio'

# Start of module gnuradio.ctrlport.GNURadio.Booter
_M_gnuradio.ctrlport.GNURadio.Booter = Ice.openModule('gnuradio.ctrlport.GNURadio.Booter')
__name__ = 'gnuradio.ctrlport.GNURadio.Booter'

if '_t_WaveformArgs' not in _M_gnuradio.ctrlport.GNURadio.Booter.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformArgs = IcePy.defineDictionary('::GNURadio::Booter::WaveformArgs', (), IcePy._t_string, IcePy._t_string)

if 'WaveformRunningError' not in _M_gnuradio.ctrlport.GNURadio.Booter.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Booter.WaveformRunningError = Ice.createTempClass()
    class WaveformRunningError(Ice.UserException):
        def __init__(self, waveformClass='', centerFrequencyHz=0.0):
            self.waveformClass = waveformClass
            self.centerFrequencyHz = centerFrequencyHz

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'GNURadio::Booter::WaveformRunningError'

    _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformRunningError = IcePy.defineException('::GNURadio::Booter::WaveformRunningError', WaveformRunningError, (), False, None, (
        ('waveformClass', (), IcePy._t_string, False, 0),
        ('centerFrequencyHz', (), IcePy._t_float, False, 0)
    ))
    WaveformRunningError._ice_type = _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformRunningError

    _M_gnuradio.ctrlport.GNURadio.Booter.WaveformRunningError = WaveformRunningError
    del WaveformRunningError

if 'SignalSourceError' not in _M_gnuradio.ctrlport.GNURadio.Booter.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Booter.SignalSourceError = Ice.createTempClass()
    class SignalSourceError(Ice.UserException):
        def __init__(self, msg=''):
            self.msg = msg

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'GNURadio::Booter::SignalSourceError'

    _M_gnuradio.ctrlport.GNURadio.Booter._t_SignalSourceError = IcePy.defineException('::GNURadio::Booter::SignalSourceError', SignalSourceError, (), False, None, (('msg', (), IcePy._t_string, False, 0),))
    SignalSourceError._ice_type = _M_gnuradio.ctrlport.GNURadio.Booter._t_SignalSourceError

    _M_gnuradio.ctrlport.GNURadio.Booter.SignalSourceError = SignalSourceError
    del SignalSourceError

if 'WaveformBooter' not in _M_gnuradio.ctrlport.GNURadio.Booter.__dict__:
    _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter = Ice.createTempClass()
    class WaveformBooter(_M_gnuradio.ctrlport.GNURadio.Frontend.Receiver, _M_gnuradio.ctrlport.GNURadio.ControlPort):
        def __init__(self):
            if Ice.getType(self) == _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter:
                raise RuntimeError('gnuradio.ctrlport.GNURadio.Booter.WaveformBooter is an abstract class')

        def ice_ids(self, current=None):
            return ('::GNURadio::Booter::WaveformBooter', '::GNURadio::ControlPort', '::GNURadio::Frontend::AbstractReceiver', '::GNURadio::Frontend::Component', '::GNURadio::Frontend::Receiver', '::Ice::Object')

        def ice_id(self, current=None):
            return '::GNURadio::Booter::WaveformBooter'

        def ice_staticId():
            return '::GNURadio::Booter::WaveformBooter'
        ice_staticId = staticmethod(ice_staticId)

        def launchWaveform(self, waveformClass, args, current=None):
            pass

        def getDriverEnum(self, current=None):
            pass

        def getSourceInfo(self, current=None):
            pass

        def waveformRunning(self, current=None):
            pass

        def getWaveformClass(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformBooter)

        __repr__ = __str__

    _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooterPrx = Ice.createTempClass()
    class WaveformBooterPrx(_M_gnuradio.ctrlport.GNURadio.Frontend.ReceiverPrx, _M_gnuradio.ctrlport.GNURadio.ControlPortPrx):

        def launchWaveform(self, waveformClass, args, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_launchWaveform.invoke(self, ((waveformClass, args), _ctx))

        def begin_launchWaveform(self, waveformClass, args, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_launchWaveform.begin(self, ((waveformClass, args), _response, _ex, _sent, _ctx))

        def end_launchWaveform(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_launchWaveform.end(self, _r)

        def getDriverEnum(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getDriverEnum.invoke(self, ((), _ctx))

        def begin_getDriverEnum(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getDriverEnum.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDriverEnum(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getDriverEnum.end(self, _r)

        def getSourceInfo(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getSourceInfo.invoke(self, ((), _ctx))

        def begin_getSourceInfo(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getSourceInfo.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getSourceInfo(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getSourceInfo.end(self, _r)

        def waveformRunning(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_waveformRunning.invoke(self, ((), _ctx))

        def begin_waveformRunning(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_waveformRunning.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_waveformRunning(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_waveformRunning.end(self, _r)

        def getWaveformClass(self, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getWaveformClass.invoke(self, ((), _ctx))

        def begin_getWaveformClass(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getWaveformClass.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getWaveformClass(self, _r):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter._op_getWaveformClass.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooterPrx.ice_checkedCast(proxy, '::GNURadio::Booter::WaveformBooter', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooterPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformBooterPrx = IcePy.defineProxy('::GNURadio::Booter::WaveformBooter', WaveformBooterPrx)

    _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformBooter = IcePy.defineClass('::GNURadio::Booter::WaveformBooter', WaveformBooter, -1, (), True, False, None, (_M_gnuradio.ctrlport.GNURadio.Frontend._t_Receiver, _M_gnuradio.ctrlport.GNURadio._t_ControlPort), ())
    WaveformBooter._ice_type = _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformBooter

    WaveformBooter._op_launchWaveform = IcePy.Operation('launchWaveform', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformArgs, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_gnuradio.ctrlport.GNURadio.Booter._t_WaveformRunningError, _M_gnuradio.ctrlport.GNURadio.Booter._t_SignalSourceError))
    WaveformBooter._op_getDriverEnum = IcePy.Operation('getDriverEnum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio._t_WaveformArgMap, False, 0), ())
    WaveformBooter._op_getSourceInfo = IcePy.Operation('getSourceInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_gnuradio.ctrlport.GNURadio._t_WaveformArgMap, False, 0), ())
    WaveformBooter._op_waveformRunning = IcePy.Operation('waveformRunning', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    WaveformBooter._op_getWaveformClass = IcePy.Operation('getWaveformClass', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooter = WaveformBooter
    del WaveformBooter

    _M_gnuradio.ctrlport.GNURadio.Booter.WaveformBooterPrx = WaveformBooterPrx
    del WaveformBooterPrx

# End of module gnuradio.ctrlport.GNURadio.Booter

__name__ = 'gnuradio.ctrlport.GNURadio'

# End of module gnuradio.ctrlport.GNURadio
