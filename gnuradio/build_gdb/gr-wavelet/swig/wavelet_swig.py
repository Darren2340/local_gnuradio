# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wavelet_swig', [dirname(__file__)])
        except ImportError:
            import _wavelet_swig
            return _wavelet_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_wavelet_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wavelet_swig = swig_import_helper()
    del swig_import_helper
else:
    import _wavelet_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _wavelet_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _wavelet_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _wavelet_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _wavelet_swig.high_res_timer_epoch()
class squash_ff(object):
    """
    Implements cheap resampling of spectrum directly from spectral points, using gsl interpolation.

    Constructor Specific Documentation:



    Args:
        igrid : 
        ogrid : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float igrid, pmt_vector_float ogrid) -> squash_ff_sptr

        Implements cheap resampling of spectrum directly from spectral points, using gsl interpolation.

        Constructor Specific Documentation:



        Args:
            igrid : 
            ogrid : 
        """
        return _wavelet_swig.squash_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _wavelet_swig.delete_squash_ff
    __del__ = lambda self : None;
squash_ff_swigregister = _wavelet_swig.squash_ff_swigregister
squash_ff_swigregister(squash_ff)

def squash_ff_make(*args, **kwargs):
  """
    squash_ff_make(pmt_vector_float igrid, pmt_vector_float ogrid) -> squash_ff_sptr

    Implements cheap resampling of spectrum directly from spectral points, using gsl interpolation.

    Constructor Specific Documentation:



    Args:
        igrid : 
        ogrid : 
    """
  return _wavelet_swig.squash_ff_make(*args, **kwargs)

class wavelet_ff(object):
    """
    Compute wavelet transform using gsl routines.

    Constructor Specific Documentation:



    Args:
        size : 
        order : 
        forward : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(size=1024, order=20, forward=True):
        """
        make(int size=1024, int order=20, bool forward=True) -> wavelet_ff_sptr

        Compute wavelet transform using gsl routines.

        Constructor Specific Documentation:



        Args:
            size : 
            order : 
            forward : 
        """
        return _wavelet_swig.wavelet_ff_make(size, order, forward)

    make = staticmethod(make)
    __swig_destroy__ = _wavelet_swig.delete_wavelet_ff
    __del__ = lambda self : None;
wavelet_ff_swigregister = _wavelet_swig.wavelet_ff_swigregister
wavelet_ff_swigregister(wavelet_ff)

def wavelet_ff_make(size=1024, order=20, forward=True):
  """
    wavelet_ff_make(int size=1024, int order=20, bool forward=True) -> wavelet_ff_sptr

    Compute wavelet transform using gsl routines.

    Constructor Specific Documentation:



    Args:
        size : 
        order : 
        forward : 
    """
  return _wavelet_swig.wavelet_ff_make(size, order, forward)

class wvps_ff(object):
    """
    computes the Wavelet Power Spectrum from a set of wavelet coefficients

    Constructor Specific Documentation:



    Args:
        ilen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int ilen) -> wvps_ff_sptr

        computes the Wavelet Power Spectrum from a set of wavelet coefficients

        Constructor Specific Documentation:



        Args:
            ilen : 
        """
        return _wavelet_swig.wvps_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _wavelet_swig.delete_wvps_ff
    __del__ = lambda self : None;
wvps_ff_swigregister = _wavelet_swig.wvps_ff_swigregister
wvps_ff_swigregister(wvps_ff)

def wvps_ff_make(*args, **kwargs):
  """
    wvps_ff_make(int ilen) -> wvps_ff_sptr

    computes the Wavelet Power Spectrum from a set of wavelet coefficients

    Constructor Specific Documentation:



    Args:
        ilen : 
    """
  return _wavelet_swig.wvps_ff_make(*args, **kwargs)

class squash_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::wavelet::squash_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::wavelet::squash_ff)> self) -> squash_ff_sptr
        __init__(boost::shared_ptr<(gr::wavelet::squash_ff)> self, squash_ff p) -> squash_ff_sptr
        """
        this = _wavelet_swig.new_squash_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(squash_ff_sptr self) -> squash_ff"""
        return _wavelet_swig.squash_ff_sptr___deref__(self)

    __swig_destroy__ = _wavelet_swig.delete_squash_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(squash_ff_sptr self, pmt_vector_float igrid, pmt_vector_float ogrid) -> squash_ff_sptr

        Implements cheap resampling of spectrum directly from spectral points, using gsl interpolation.

        Constructor Specific Documentation:



        Args:
            igrid : 
            ogrid : 
        """
        return _wavelet_swig.squash_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(squash_ff_sptr self) -> unsigned int"""
        return _wavelet_swig.squash_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(squash_ff_sptr self, int which, int delay)
        declare_sample_delay(squash_ff_sptr self, unsigned int delay)
        """
        return _wavelet_swig.squash_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(squash_ff_sptr self, int which) -> unsigned int"""
        return _wavelet_swig.squash_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(squash_ff_sptr self) -> int"""
        return _wavelet_swig.squash_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(squash_ff_sptr self) -> double"""
        return _wavelet_swig.squash_ff_sptr_relative_rate(self)

    def start(self):
        """start(squash_ff_sptr self) -> bool"""
        return _wavelet_swig.squash_ff_sptr_start(self)

    def stop(self):
        """stop(squash_ff_sptr self) -> bool"""
        return _wavelet_swig.squash_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(squash_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _wavelet_swig.squash_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(squash_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _wavelet_swig.squash_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(squash_ff_sptr self) -> int"""
        return _wavelet_swig.squash_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(squash_ff_sptr self, int m)"""
        return _wavelet_swig.squash_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(squash_ff_sptr self)"""
        return _wavelet_swig.squash_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(squash_ff_sptr self) -> bool"""
        return _wavelet_swig.squash_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(squash_ff_sptr self, int m)"""
        return _wavelet_swig.squash_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(squash_ff_sptr self) -> int"""
        return _wavelet_swig.squash_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(squash_ff_sptr self, int i) -> long"""
        return _wavelet_swig.squash_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(squash_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(squash_ff_sptr self, int port, long max_output_buffer)
        """
        return _wavelet_swig.squash_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(squash_ff_sptr self, int i) -> long"""
        return _wavelet_swig.squash_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(squash_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(squash_ff_sptr self, int port, long min_output_buffer)
        """
        return _wavelet_swig.squash_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(squash_ff_sptr self, int which) -> float
        pc_input_buffers_full(squash_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.squash_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(squash_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(squash_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.squash_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(squash_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(squash_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.squash_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(squash_ff_sptr self, int which) -> float
        pc_output_buffers_full(squash_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.squash_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(squash_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(squash_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.squash_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(squash_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(squash_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.squash_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(squash_ff_sptr self) -> float"""
        return _wavelet_swig.squash_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(squash_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _wavelet_swig.squash_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(squash_ff_sptr self)"""
        return _wavelet_swig.squash_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(squash_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _wavelet_swig.squash_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(squash_ff_sptr self) -> int"""
        return _wavelet_swig.squash_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(squash_ff_sptr self) -> int"""
        return _wavelet_swig.squash_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(squash_ff_sptr self, int priority) -> int"""
        return _wavelet_swig.squash_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(squash_ff_sptr self) -> std::string"""
        return _wavelet_swig.squash_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(squash_ff_sptr self) -> std::string"""
        return _wavelet_swig.squash_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(squash_ff_sptr self) -> io_signature_sptr"""
        return _wavelet_swig.squash_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(squash_ff_sptr self) -> io_signature_sptr"""
        return _wavelet_swig.squash_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(squash_ff_sptr self) -> long"""
        return _wavelet_swig.squash_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(squash_ff_sptr self) -> basic_block_sptr"""
        return _wavelet_swig.squash_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(squash_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _wavelet_swig.squash_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(squash_ff_sptr self) -> std::string"""
        return _wavelet_swig.squash_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(squash_ff_sptr self, std::string name)"""
        return _wavelet_swig.squash_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(squash_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _wavelet_swig.squash_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(squash_ff_sptr self) -> swig_int_ptr"""
        return _wavelet_swig.squash_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(squash_ff_sptr self) -> swig_int_ptr"""
        return _wavelet_swig.squash_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(squash_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _wavelet_swig.squash_ff_sptr_message_subscribers(self, *args, **kwargs)

squash_ff_sptr_swigregister = _wavelet_swig.squash_ff_sptr_swigregister
squash_ff_sptr_swigregister(squash_ff_sptr)

squash_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
squash_ff = squash_ff.make;

class wavelet_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::wavelet::wavelet_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::wavelet::wavelet_ff)> self) -> wavelet_ff_sptr
        __init__(boost::shared_ptr<(gr::wavelet::wavelet_ff)> self, wavelet_ff p) -> wavelet_ff_sptr
        """
        this = _wavelet_swig.new_wavelet_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(wavelet_ff_sptr self) -> wavelet_ff"""
        return _wavelet_swig.wavelet_ff_sptr___deref__(self)

    __swig_destroy__ = _wavelet_swig.delete_wavelet_ff_sptr
    __del__ = lambda self : None;
    def make(self, size=1024, order=20, forward=True):
        """
        make(wavelet_ff_sptr self, int size=1024, int order=20, bool forward=True) -> wavelet_ff_sptr

        Compute wavelet transform using gsl routines.

        Constructor Specific Documentation:



        Args:
            size : 
            order : 
            forward : 
        """
        return _wavelet_swig.wavelet_ff_sptr_make(self, size, order, forward)

    def history(self):
        """history(wavelet_ff_sptr self) -> unsigned int"""
        return _wavelet_swig.wavelet_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(wavelet_ff_sptr self, int which, int delay)
        declare_sample_delay(wavelet_ff_sptr self, unsigned int delay)
        """
        return _wavelet_swig.wavelet_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(wavelet_ff_sptr self, int which) -> unsigned int"""
        return _wavelet_swig.wavelet_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(wavelet_ff_sptr self) -> int"""
        return _wavelet_swig.wavelet_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(wavelet_ff_sptr self) -> double"""
        return _wavelet_swig.wavelet_ff_sptr_relative_rate(self)

    def start(self):
        """start(wavelet_ff_sptr self) -> bool"""
        return _wavelet_swig.wavelet_ff_sptr_start(self)

    def stop(self):
        """stop(wavelet_ff_sptr self) -> bool"""
        return _wavelet_swig.wavelet_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(wavelet_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _wavelet_swig.wavelet_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(wavelet_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _wavelet_swig.wavelet_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(wavelet_ff_sptr self) -> int"""
        return _wavelet_swig.wavelet_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(wavelet_ff_sptr self, int m)"""
        return _wavelet_swig.wavelet_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(wavelet_ff_sptr self)"""
        return _wavelet_swig.wavelet_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(wavelet_ff_sptr self) -> bool"""
        return _wavelet_swig.wavelet_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(wavelet_ff_sptr self, int m)"""
        return _wavelet_swig.wavelet_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(wavelet_ff_sptr self) -> int"""
        return _wavelet_swig.wavelet_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(wavelet_ff_sptr self, int i) -> long"""
        return _wavelet_swig.wavelet_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(wavelet_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(wavelet_ff_sptr self, int port, long max_output_buffer)
        """
        return _wavelet_swig.wavelet_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(wavelet_ff_sptr self, int i) -> long"""
        return _wavelet_swig.wavelet_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(wavelet_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(wavelet_ff_sptr self, int port, long min_output_buffer)
        """
        return _wavelet_swig.wavelet_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(wavelet_ff_sptr self, int which) -> float
        pc_input_buffers_full(wavelet_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wavelet_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(wavelet_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(wavelet_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wavelet_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(wavelet_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(wavelet_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wavelet_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(wavelet_ff_sptr self, int which) -> float
        pc_output_buffers_full(wavelet_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wavelet_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(wavelet_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(wavelet_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wavelet_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(wavelet_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(wavelet_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wavelet_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(wavelet_ff_sptr self) -> float"""
        return _wavelet_swig.wavelet_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(wavelet_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _wavelet_swig.wavelet_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(wavelet_ff_sptr self)"""
        return _wavelet_swig.wavelet_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(wavelet_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _wavelet_swig.wavelet_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(wavelet_ff_sptr self) -> int"""
        return _wavelet_swig.wavelet_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(wavelet_ff_sptr self) -> int"""
        return _wavelet_swig.wavelet_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(wavelet_ff_sptr self, int priority) -> int"""
        return _wavelet_swig.wavelet_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(wavelet_ff_sptr self) -> std::string"""
        return _wavelet_swig.wavelet_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(wavelet_ff_sptr self) -> std::string"""
        return _wavelet_swig.wavelet_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(wavelet_ff_sptr self) -> io_signature_sptr"""
        return _wavelet_swig.wavelet_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(wavelet_ff_sptr self) -> io_signature_sptr"""
        return _wavelet_swig.wavelet_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(wavelet_ff_sptr self) -> long"""
        return _wavelet_swig.wavelet_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(wavelet_ff_sptr self) -> basic_block_sptr"""
        return _wavelet_swig.wavelet_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(wavelet_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _wavelet_swig.wavelet_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(wavelet_ff_sptr self) -> std::string"""
        return _wavelet_swig.wavelet_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(wavelet_ff_sptr self, std::string name)"""
        return _wavelet_swig.wavelet_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(wavelet_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _wavelet_swig.wavelet_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(wavelet_ff_sptr self) -> swig_int_ptr"""
        return _wavelet_swig.wavelet_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(wavelet_ff_sptr self) -> swig_int_ptr"""
        return _wavelet_swig.wavelet_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(wavelet_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _wavelet_swig.wavelet_ff_sptr_message_subscribers(self, *args, **kwargs)

wavelet_ff_sptr_swigregister = _wavelet_swig.wavelet_ff_sptr_swigregister
wavelet_ff_sptr_swigregister(wavelet_ff_sptr)

wavelet_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
wavelet_ff = wavelet_ff.make;

class wvps_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::wavelet::wvps_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::wavelet::wvps_ff)> self) -> wvps_ff_sptr
        __init__(boost::shared_ptr<(gr::wavelet::wvps_ff)> self, wvps_ff p) -> wvps_ff_sptr
        """
        this = _wavelet_swig.new_wvps_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(wvps_ff_sptr self) -> wvps_ff"""
        return _wavelet_swig.wvps_ff_sptr___deref__(self)

    __swig_destroy__ = _wavelet_swig.delete_wvps_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(wvps_ff_sptr self, int ilen) -> wvps_ff_sptr

        computes the Wavelet Power Spectrum from a set of wavelet coefficients

        Constructor Specific Documentation:



        Args:
            ilen : 
        """
        return _wavelet_swig.wvps_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(wvps_ff_sptr self) -> unsigned int"""
        return _wavelet_swig.wvps_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(wvps_ff_sptr self, int which, int delay)
        declare_sample_delay(wvps_ff_sptr self, unsigned int delay)
        """
        return _wavelet_swig.wvps_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(wvps_ff_sptr self, int which) -> unsigned int"""
        return _wavelet_swig.wvps_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(wvps_ff_sptr self) -> int"""
        return _wavelet_swig.wvps_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(wvps_ff_sptr self) -> double"""
        return _wavelet_swig.wvps_ff_sptr_relative_rate(self)

    def start(self):
        """start(wvps_ff_sptr self) -> bool"""
        return _wavelet_swig.wvps_ff_sptr_start(self)

    def stop(self):
        """stop(wvps_ff_sptr self) -> bool"""
        return _wavelet_swig.wvps_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(wvps_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _wavelet_swig.wvps_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(wvps_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _wavelet_swig.wvps_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(wvps_ff_sptr self) -> int"""
        return _wavelet_swig.wvps_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(wvps_ff_sptr self, int m)"""
        return _wavelet_swig.wvps_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(wvps_ff_sptr self)"""
        return _wavelet_swig.wvps_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(wvps_ff_sptr self) -> bool"""
        return _wavelet_swig.wvps_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(wvps_ff_sptr self, int m)"""
        return _wavelet_swig.wvps_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(wvps_ff_sptr self) -> int"""
        return _wavelet_swig.wvps_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(wvps_ff_sptr self, int i) -> long"""
        return _wavelet_swig.wvps_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(wvps_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(wvps_ff_sptr self, int port, long max_output_buffer)
        """
        return _wavelet_swig.wvps_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(wvps_ff_sptr self, int i) -> long"""
        return _wavelet_swig.wvps_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(wvps_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(wvps_ff_sptr self, int port, long min_output_buffer)
        """
        return _wavelet_swig.wvps_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(wvps_ff_sptr self, int which) -> float
        pc_input_buffers_full(wvps_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wvps_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(wvps_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(wvps_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wvps_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(wvps_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(wvps_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wvps_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(wvps_ff_sptr self, int which) -> float
        pc_output_buffers_full(wvps_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wvps_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(wvps_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(wvps_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wvps_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(wvps_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(wvps_ff_sptr self) -> pmt_vector_float
        """
        return _wavelet_swig.wvps_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(wvps_ff_sptr self) -> float"""
        return _wavelet_swig.wvps_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(wvps_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _wavelet_swig.wvps_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(wvps_ff_sptr self)"""
        return _wavelet_swig.wvps_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(wvps_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _wavelet_swig.wvps_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(wvps_ff_sptr self) -> int"""
        return _wavelet_swig.wvps_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(wvps_ff_sptr self) -> int"""
        return _wavelet_swig.wvps_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(wvps_ff_sptr self, int priority) -> int"""
        return _wavelet_swig.wvps_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(wvps_ff_sptr self) -> std::string"""
        return _wavelet_swig.wvps_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(wvps_ff_sptr self) -> std::string"""
        return _wavelet_swig.wvps_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(wvps_ff_sptr self) -> io_signature_sptr"""
        return _wavelet_swig.wvps_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(wvps_ff_sptr self) -> io_signature_sptr"""
        return _wavelet_swig.wvps_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(wvps_ff_sptr self) -> long"""
        return _wavelet_swig.wvps_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(wvps_ff_sptr self) -> basic_block_sptr"""
        return _wavelet_swig.wvps_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(wvps_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _wavelet_swig.wvps_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(wvps_ff_sptr self) -> std::string"""
        return _wavelet_swig.wvps_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(wvps_ff_sptr self, std::string name)"""
        return _wavelet_swig.wvps_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(wvps_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _wavelet_swig.wvps_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(wvps_ff_sptr self) -> swig_int_ptr"""
        return _wavelet_swig.wvps_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(wvps_ff_sptr self) -> swig_int_ptr"""
        return _wavelet_swig.wvps_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(wvps_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _wavelet_swig.wvps_ff_sptr_message_subscribers(self, *args, **kwargs)

wvps_ff_sptr_swigregister = _wavelet_swig.wvps_ff_sptr_swigregister
wvps_ff_sptr_swigregister(wvps_ff_sptr)

wvps_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
wvps_ff = wvps_ff.make;



