# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pager_swig', [dirname(__file__)])
        except ImportError:
            import _pager_swig
            return _pager_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pager_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pager_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pager_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _pager_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _pager_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _pager_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _pager_swig.high_res_timer_epoch()
class flex_frame(object):
    """
    flex_frame.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def make():
        """
        make() -> flex_frame_sptr

        flex_frame.

        Constructor Specific Documentation:


        """
        return _pager_swig.flex_frame_make()

    make = staticmethod(make)
    def __init__(self): 
        """__init__(gr::pager::flex_frame self) -> flex_frame"""
        this = _pager_swig.new_flex_frame()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pager_swig.delete_flex_frame
    __del__ = lambda self : None;
flex_frame_swigregister = _pager_swig.flex_frame_swigregister
flex_frame_swigregister(flex_frame)

def flex_frame_make():
  """
    flex_frame_make() -> flex_frame_sptr

    flex_frame.

    Constructor Specific Documentation:


    """
  return _pager_swig.flex_frame_make()

class slicer_fb(object):
    """
    slicer description

    Constructor Specific Documentation:

    Make a pager slicer.

    Args:
        alpha : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float alpha) -> slicer_fb_sptr

        slicer description

        Constructor Specific Documentation:

        Make a pager slicer.

        Args:
            alpha : 
        """
        return _pager_swig.slicer_fb_make(*args, **kwargs)

    make = staticmethod(make)
    def dc_offset(self):
        """dc_offset(slicer_fb self) -> float"""
        return _pager_swig.slicer_fb_dc_offset(self)

    __swig_destroy__ = _pager_swig.delete_slicer_fb
    __del__ = lambda self : None;
slicer_fb_swigregister = _pager_swig.slicer_fb_swigregister
slicer_fb_swigregister(slicer_fb)

def slicer_fb_make(*args, **kwargs):
  """
    slicer_fb_make(float alpha) -> slicer_fb_sptr

    slicer description

    Constructor Specific Documentation:

    Make a pager slicer.

    Args:
        alpha : 
    """
  return _pager_swig.slicer_fb_make(*args, **kwargs)

class flex_sync(object):
    """
    flex sync description

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> flex_sync_sptr

        flex sync description

        Constructor Specific Documentation:


        """
        return _pager_swig.flex_sync_make()

    make = staticmethod(make)
    __swig_destroy__ = _pager_swig.delete_flex_sync
    __del__ = lambda self : None;
flex_sync_swigregister = _pager_swig.flex_sync_swigregister
flex_sync_swigregister(flex_sync)

def flex_sync_make():
  """
    flex_sync_make() -> flex_sync_sptr

    flex sync description

    Constructor Specific Documentation:


    """
  return _pager_swig.flex_sync_make()

class flex_deinterleave(object):
    """
    flex deinterleave description

    Constructor Specific Documentation:

    Make flex deinterleaver.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> flex_deinterleave_sptr

        flex deinterleave description

        Constructor Specific Documentation:

        Make flex deinterleaver.
        """
        return _pager_swig.flex_deinterleave_make()

    make = staticmethod(make)
    __swig_destroy__ = _pager_swig.delete_flex_deinterleave
    __del__ = lambda self : None;
flex_deinterleave_swigregister = _pager_swig.flex_deinterleave_swigregister
flex_deinterleave_swigregister(flex_deinterleave)

def flex_deinterleave_make():
  """
    flex_deinterleave_make() -> flex_deinterleave_sptr

    flex deinterleave description

    Constructor Specific Documentation:

    Make flex deinterleaver.
    """
  return _pager_swig.flex_deinterleave_make()

class flex_parse(object):
    """
    flex parse description

    Constructor Specific Documentation:



    Args:
        queue : 
        freq : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(msg_queue_sptr queue, float freq) -> flex_parse_sptr

        flex parse description

        Constructor Specific Documentation:



        Args:
            queue : 
            freq : 
        """
        return _pager_swig.flex_parse_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _pager_swig.delete_flex_parse
    __del__ = lambda self : None;
flex_parse_swigregister = _pager_swig.flex_parse_swigregister
flex_parse_swigregister(flex_parse)

def flex_parse_make(*args, **kwargs):
  """
    flex_parse_make(msg_queue_sptr queue, float freq) -> flex_parse_sptr

    flex parse description

    Constructor Specific Documentation:



    Args:
        queue : 
        freq : 
    """
  return _pager_swig.flex_parse_make(*args, **kwargs)

class flex_frame_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pager::flex_frame)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pager::flex_frame)> self) -> flex_frame_sptr
        __init__(boost::shared_ptr<(gr::pager::flex_frame)> self, flex_frame p) -> flex_frame_sptr
        """
        this = _pager_swig.new_flex_frame_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(flex_frame_sptr self) -> flex_frame"""
        return _pager_swig.flex_frame_sptr___deref__(self)

    __swig_destroy__ = _pager_swig.delete_flex_frame_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(flex_frame_sptr self) -> flex_frame_sptr

        flex_frame.

        Constructor Specific Documentation:


        """
        return _pager_swig.flex_frame_sptr_make(self)

flex_frame_sptr_swigregister = _pager_swig.flex_frame_sptr_swigregister
flex_frame_sptr_swigregister(flex_frame_sptr)

flex_frame_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_frame = flex_frame.make;

class slicer_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pager::slicer_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pager::slicer_fb)> self) -> slicer_fb_sptr
        __init__(boost::shared_ptr<(gr::pager::slicer_fb)> self, slicer_fb p) -> slicer_fb_sptr
        """
        this = _pager_swig.new_slicer_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(slicer_fb_sptr self) -> slicer_fb"""
        return _pager_swig.slicer_fb_sptr___deref__(self)

    __swig_destroy__ = _pager_swig.delete_slicer_fb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(slicer_fb_sptr self, float alpha) -> slicer_fb_sptr

        slicer description

        Constructor Specific Documentation:

        Make a pager slicer.

        Args:
            alpha : 
        """
        return _pager_swig.slicer_fb_sptr_make(self, *args, **kwargs)

    def dc_offset(self):
        """dc_offset(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_dc_offset(self)

    def history(self):
        """history(slicer_fb_sptr self) -> unsigned int"""
        return _pager_swig.slicer_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(slicer_fb_sptr self, int which, int delay)
        declare_sample_delay(slicer_fb_sptr self, unsigned int delay)
        """
        return _pager_swig.slicer_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(slicer_fb_sptr self, int which) -> unsigned int"""
        return _pager_swig.slicer_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(slicer_fb_sptr self) -> int"""
        return _pager_swig.slicer_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(slicer_fb_sptr self) -> double"""
        return _pager_swig.slicer_fb_sptr_relative_rate(self)

    def start(self):
        """start(slicer_fb_sptr self) -> bool"""
        return _pager_swig.slicer_fb_sptr_start(self)

    def stop(self):
        """stop(slicer_fb_sptr self) -> bool"""
        return _pager_swig.slicer_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(slicer_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _pager_swig.slicer_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(slicer_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _pager_swig.slicer_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(slicer_fb_sptr self) -> int"""
        return _pager_swig.slicer_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(slicer_fb_sptr self, int m)"""
        return _pager_swig.slicer_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(slicer_fb_sptr self)"""
        return _pager_swig.slicer_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(slicer_fb_sptr self) -> bool"""
        return _pager_swig.slicer_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(slicer_fb_sptr self, int m)"""
        return _pager_swig.slicer_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(slicer_fb_sptr self) -> int"""
        return _pager_swig.slicer_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(slicer_fb_sptr self, int i) -> long"""
        return _pager_swig.slicer_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(slicer_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(slicer_fb_sptr self, int port, long max_output_buffer)
        """
        return _pager_swig.slicer_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(slicer_fb_sptr self, int i) -> long"""
        return _pager_swig.slicer_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(slicer_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(slicer_fb_sptr self, int port, long min_output_buffer)
        """
        return _pager_swig.slicer_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full(slicer_fb_sptr self) -> pmt_vector_float
        """
        return _pager_swig.slicer_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(slicer_fb_sptr self) -> pmt_vector_float
        """
        return _pager_swig.slicer_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(slicer_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(slicer_fb_sptr self) -> pmt_vector_float
        """
        return _pager_swig.slicer_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full(slicer_fb_sptr self) -> pmt_vector_float
        """
        return _pager_swig.slicer_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(slicer_fb_sptr self) -> pmt_vector_float
        """
        return _pager_swig.slicer_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(slicer_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(slicer_fb_sptr self) -> pmt_vector_float
        """
        return _pager_swig.slicer_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(slicer_fb_sptr self) -> float"""
        return _pager_swig.slicer_fb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(slicer_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pager_swig.slicer_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(slicer_fb_sptr self)"""
        return _pager_swig.slicer_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(slicer_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pager_swig.slicer_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(slicer_fb_sptr self) -> int"""
        return _pager_swig.slicer_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(slicer_fb_sptr self) -> int"""
        return _pager_swig.slicer_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(slicer_fb_sptr self, int priority) -> int"""
        return _pager_swig.slicer_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(slicer_fb_sptr self) -> std::string"""
        return _pager_swig.slicer_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(slicer_fb_sptr self) -> std::string"""
        return _pager_swig.slicer_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(slicer_fb_sptr self) -> io_signature_sptr"""
        return _pager_swig.slicer_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(slicer_fb_sptr self) -> io_signature_sptr"""
        return _pager_swig.slicer_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(slicer_fb_sptr self) -> long"""
        return _pager_swig.slicer_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(slicer_fb_sptr self) -> basic_block_sptr"""
        return _pager_swig.slicer_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(slicer_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _pager_swig.slicer_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(slicer_fb_sptr self) -> std::string"""
        return _pager_swig.slicer_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(slicer_fb_sptr self, std::string name)"""
        return _pager_swig.slicer_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(slicer_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pager_swig.slicer_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(slicer_fb_sptr self) -> swig_int_ptr"""
        return _pager_swig.slicer_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(slicer_fb_sptr self) -> swig_int_ptr"""
        return _pager_swig.slicer_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(slicer_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pager_swig.slicer_fb_sptr_message_subscribers(self, *args, **kwargs)

slicer_fb_sptr_swigregister = _pager_swig.slicer_fb_sptr_swigregister
slicer_fb_sptr_swigregister(slicer_fb_sptr)

slicer_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
slicer_fb = slicer_fb.make;

class flex_sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pager::flex_sync)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pager::flex_sync)> self) -> flex_sync_sptr
        __init__(boost::shared_ptr<(gr::pager::flex_sync)> self, flex_sync p) -> flex_sync_sptr
        """
        this = _pager_swig.new_flex_sync_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(flex_sync_sptr self) -> flex_sync"""
        return _pager_swig.flex_sync_sptr___deref__(self)

    __swig_destroy__ = _pager_swig.delete_flex_sync_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(flex_sync_sptr self) -> flex_sync_sptr

        flex sync description

        Constructor Specific Documentation:


        """
        return _pager_swig.flex_sync_sptr_make(self)

    def history(self):
        """history(flex_sync_sptr self) -> unsigned int"""
        return _pager_swig.flex_sync_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flex_sync_sptr self, int which, int delay)
        declare_sample_delay(flex_sync_sptr self, unsigned int delay)
        """
        return _pager_swig.flex_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(flex_sync_sptr self, int which) -> unsigned int"""
        return _pager_swig.flex_sync_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(flex_sync_sptr self) -> int"""
        return _pager_swig.flex_sync_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(flex_sync_sptr self) -> double"""
        return _pager_swig.flex_sync_sptr_relative_rate(self)

    def start(self):
        """start(flex_sync_sptr self) -> bool"""
        return _pager_swig.flex_sync_sptr_start(self)

    def stop(self):
        """stop(flex_sync_sptr self) -> bool"""
        return _pager_swig.flex_sync_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(flex_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _pager_swig.flex_sync_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(flex_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _pager_swig.flex_sync_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(flex_sync_sptr self) -> int"""
        return _pager_swig.flex_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(flex_sync_sptr self, int m)"""
        return _pager_swig.flex_sync_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flex_sync_sptr self)"""
        return _pager_swig.flex_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flex_sync_sptr self) -> bool"""
        return _pager_swig.flex_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(flex_sync_sptr self, int m)"""
        return _pager_swig.flex_sync_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(flex_sync_sptr self) -> int"""
        return _pager_swig.flex_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(flex_sync_sptr self, int i) -> long"""
        return _pager_swig.flex_sync_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flex_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(flex_sync_sptr self, int port, long max_output_buffer)
        """
        return _pager_swig.flex_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(flex_sync_sptr self, int i) -> long"""
        return _pager_swig.flex_sync_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flex_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(flex_sync_sptr self, int port, long min_output_buffer)
        """
        return _pager_swig.flex_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flex_sync_sptr self, int which) -> float
        pc_input_buffers_full(flex_sync_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flex_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(flex_sync_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flex_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(flex_sync_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flex_sync_sptr self, int which) -> float
        pc_output_buffers_full(flex_sync_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flex_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(flex_sync_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flex_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(flex_sync_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(flex_sync_sptr self) -> float"""
        return _pager_swig.flex_sync_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(flex_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pager_swig.flex_sync_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(flex_sync_sptr self)"""
        return _pager_swig.flex_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(flex_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pager_swig.flex_sync_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(flex_sync_sptr self) -> int"""
        return _pager_swig.flex_sync_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(flex_sync_sptr self) -> int"""
        return _pager_swig.flex_sync_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(flex_sync_sptr self, int priority) -> int"""
        return _pager_swig.flex_sync_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(flex_sync_sptr self) -> std::string"""
        return _pager_swig.flex_sync_sptr_name(self)

    def symbol_name(self):
        """symbol_name(flex_sync_sptr self) -> std::string"""
        return _pager_swig.flex_sync_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(flex_sync_sptr self) -> io_signature_sptr"""
        return _pager_swig.flex_sync_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(flex_sync_sptr self) -> io_signature_sptr"""
        return _pager_swig.flex_sync_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(flex_sync_sptr self) -> long"""
        return _pager_swig.flex_sync_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(flex_sync_sptr self) -> basic_block_sptr"""
        return _pager_swig.flex_sync_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(flex_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _pager_swig.flex_sync_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(flex_sync_sptr self) -> std::string"""
        return _pager_swig.flex_sync_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(flex_sync_sptr self, std::string name)"""
        return _pager_swig.flex_sync_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(flex_sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pager_swig.flex_sync_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(flex_sync_sptr self) -> swig_int_ptr"""
        return _pager_swig.flex_sync_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(flex_sync_sptr self) -> swig_int_ptr"""
        return _pager_swig.flex_sync_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(flex_sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pager_swig.flex_sync_sptr_message_subscribers(self, *args, **kwargs)

flex_sync_sptr_swigregister = _pager_swig.flex_sync_sptr_swigregister
flex_sync_sptr_swigregister(flex_sync_sptr)

flex_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_sync = flex_sync.make;

class flex_deinterleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pager::flex_deinterleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pager::flex_deinterleave)> self) -> flex_deinterleave_sptr
        __init__(boost::shared_ptr<(gr::pager::flex_deinterleave)> self, flex_deinterleave p) -> flex_deinterleave_sptr
        """
        this = _pager_swig.new_flex_deinterleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(flex_deinterleave_sptr self) -> flex_deinterleave"""
        return _pager_swig.flex_deinterleave_sptr___deref__(self)

    __swig_destroy__ = _pager_swig.delete_flex_deinterleave_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(flex_deinterleave_sptr self) -> flex_deinterleave_sptr

        flex deinterleave description

        Constructor Specific Documentation:

        Make flex deinterleaver.
        """
        return _pager_swig.flex_deinterleave_sptr_make(self)

    def history(self):
        """history(flex_deinterleave_sptr self) -> unsigned int"""
        return _pager_swig.flex_deinterleave_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flex_deinterleave_sptr self, int which, int delay)
        declare_sample_delay(flex_deinterleave_sptr self, unsigned int delay)
        """
        return _pager_swig.flex_deinterleave_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(flex_deinterleave_sptr self, int which) -> unsigned int"""
        return _pager_swig.flex_deinterleave_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(flex_deinterleave_sptr self) -> int"""
        return _pager_swig.flex_deinterleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(flex_deinterleave_sptr self) -> double"""
        return _pager_swig.flex_deinterleave_sptr_relative_rate(self)

    def start(self):
        """start(flex_deinterleave_sptr self) -> bool"""
        return _pager_swig.flex_deinterleave_sptr_start(self)

    def stop(self):
        """stop(flex_deinterleave_sptr self) -> bool"""
        return _pager_swig.flex_deinterleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(flex_deinterleave_sptr self, unsigned int which_input) -> uint64_t"""
        return _pager_swig.flex_deinterleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(flex_deinterleave_sptr self, unsigned int which_output) -> uint64_t"""
        return _pager_swig.flex_deinterleave_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(flex_deinterleave_sptr self) -> int"""
        return _pager_swig.flex_deinterleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(flex_deinterleave_sptr self, int m)"""
        return _pager_swig.flex_deinterleave_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flex_deinterleave_sptr self)"""
        return _pager_swig.flex_deinterleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flex_deinterleave_sptr self) -> bool"""
        return _pager_swig.flex_deinterleave_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(flex_deinterleave_sptr self, int m)"""
        return _pager_swig.flex_deinterleave_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(flex_deinterleave_sptr self) -> int"""
        return _pager_swig.flex_deinterleave_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(flex_deinterleave_sptr self, int i) -> long"""
        return _pager_swig.flex_deinterleave_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flex_deinterleave_sptr self, long max_output_buffer)
        set_max_output_buffer(flex_deinterleave_sptr self, int port, long max_output_buffer)
        """
        return _pager_swig.flex_deinterleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(flex_deinterleave_sptr self, int i) -> long"""
        return _pager_swig.flex_deinterleave_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flex_deinterleave_sptr self, long min_output_buffer)
        set_min_output_buffer(flex_deinterleave_sptr self, int port, long min_output_buffer)
        """
        return _pager_swig.flex_deinterleave_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flex_deinterleave_sptr self, int which) -> float
        pc_input_buffers_full(flex_deinterleave_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_deinterleave_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flex_deinterleave_sptr self, int which) -> float
        pc_input_buffers_full_avg(flex_deinterleave_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_deinterleave_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flex_deinterleave_sptr self, int which) -> float
        pc_input_buffers_full_var(flex_deinterleave_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_deinterleave_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flex_deinterleave_sptr self, int which) -> float
        pc_output_buffers_full(flex_deinterleave_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_deinterleave_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flex_deinterleave_sptr self, int which) -> float
        pc_output_buffers_full_avg(flex_deinterleave_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_deinterleave_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flex_deinterleave_sptr self, int which) -> float
        pc_output_buffers_full_var(flex_deinterleave_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_deinterleave_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(flex_deinterleave_sptr self) -> float"""
        return _pager_swig.flex_deinterleave_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(flex_deinterleave_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pager_swig.flex_deinterleave_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(flex_deinterleave_sptr self)"""
        return _pager_swig.flex_deinterleave_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(flex_deinterleave_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pager_swig.flex_deinterleave_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(flex_deinterleave_sptr self) -> int"""
        return _pager_swig.flex_deinterleave_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(flex_deinterleave_sptr self) -> int"""
        return _pager_swig.flex_deinterleave_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(flex_deinterleave_sptr self, int priority) -> int"""
        return _pager_swig.flex_deinterleave_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(flex_deinterleave_sptr self) -> std::string"""
        return _pager_swig.flex_deinterleave_sptr_name(self)

    def symbol_name(self):
        """symbol_name(flex_deinterleave_sptr self) -> std::string"""
        return _pager_swig.flex_deinterleave_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(flex_deinterleave_sptr self) -> io_signature_sptr"""
        return _pager_swig.flex_deinterleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(flex_deinterleave_sptr self) -> io_signature_sptr"""
        return _pager_swig.flex_deinterleave_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(flex_deinterleave_sptr self) -> long"""
        return _pager_swig.flex_deinterleave_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(flex_deinterleave_sptr self) -> basic_block_sptr"""
        return _pager_swig.flex_deinterleave_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(flex_deinterleave_sptr self, int ninputs, int noutputs) -> bool"""
        return _pager_swig.flex_deinterleave_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(flex_deinterleave_sptr self) -> std::string"""
        return _pager_swig.flex_deinterleave_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(flex_deinterleave_sptr self, std::string name)"""
        return _pager_swig.flex_deinterleave_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(flex_deinterleave_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pager_swig.flex_deinterleave_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(flex_deinterleave_sptr self) -> swig_int_ptr"""
        return _pager_swig.flex_deinterleave_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(flex_deinterleave_sptr self) -> swig_int_ptr"""
        return _pager_swig.flex_deinterleave_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(flex_deinterleave_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pager_swig.flex_deinterleave_sptr_message_subscribers(self, *args, **kwargs)

flex_deinterleave_sptr_swigregister = _pager_swig.flex_deinterleave_sptr_swigregister
flex_deinterleave_sptr_swigregister(flex_deinterleave_sptr)

flex_deinterleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_deinterleave = flex_deinterleave.make;

class flex_parse_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pager::flex_parse)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pager::flex_parse)> self) -> flex_parse_sptr
        __init__(boost::shared_ptr<(gr::pager::flex_parse)> self, flex_parse p) -> flex_parse_sptr
        """
        this = _pager_swig.new_flex_parse_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(flex_parse_sptr self) -> flex_parse"""
        return _pager_swig.flex_parse_sptr___deref__(self)

    __swig_destroy__ = _pager_swig.delete_flex_parse_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(flex_parse_sptr self, msg_queue_sptr queue, float freq) -> flex_parse_sptr

        flex parse description

        Constructor Specific Documentation:



        Args:
            queue : 
            freq : 
        """
        return _pager_swig.flex_parse_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(flex_parse_sptr self) -> unsigned int"""
        return _pager_swig.flex_parse_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flex_parse_sptr self, int which, int delay)
        declare_sample_delay(flex_parse_sptr self, unsigned int delay)
        """
        return _pager_swig.flex_parse_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(flex_parse_sptr self, int which) -> unsigned int"""
        return _pager_swig.flex_parse_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(flex_parse_sptr self) -> int"""
        return _pager_swig.flex_parse_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(flex_parse_sptr self) -> double"""
        return _pager_swig.flex_parse_sptr_relative_rate(self)

    def start(self):
        """start(flex_parse_sptr self) -> bool"""
        return _pager_swig.flex_parse_sptr_start(self)

    def stop(self):
        """stop(flex_parse_sptr self) -> bool"""
        return _pager_swig.flex_parse_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(flex_parse_sptr self, unsigned int which_input) -> uint64_t"""
        return _pager_swig.flex_parse_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(flex_parse_sptr self, unsigned int which_output) -> uint64_t"""
        return _pager_swig.flex_parse_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(flex_parse_sptr self) -> int"""
        return _pager_swig.flex_parse_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(flex_parse_sptr self, int m)"""
        return _pager_swig.flex_parse_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flex_parse_sptr self)"""
        return _pager_swig.flex_parse_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flex_parse_sptr self) -> bool"""
        return _pager_swig.flex_parse_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(flex_parse_sptr self, int m)"""
        return _pager_swig.flex_parse_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(flex_parse_sptr self) -> int"""
        return _pager_swig.flex_parse_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(flex_parse_sptr self, int i) -> long"""
        return _pager_swig.flex_parse_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flex_parse_sptr self, long max_output_buffer)
        set_max_output_buffer(flex_parse_sptr self, int port, long max_output_buffer)
        """
        return _pager_swig.flex_parse_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(flex_parse_sptr self, int i) -> long"""
        return _pager_swig.flex_parse_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flex_parse_sptr self, long min_output_buffer)
        set_min_output_buffer(flex_parse_sptr self, int port, long min_output_buffer)
        """
        return _pager_swig.flex_parse_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flex_parse_sptr self, int which) -> float
        pc_input_buffers_full(flex_parse_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_parse_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flex_parse_sptr self, int which) -> float
        pc_input_buffers_full_avg(flex_parse_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_parse_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flex_parse_sptr self, int which) -> float
        pc_input_buffers_full_var(flex_parse_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_parse_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flex_parse_sptr self, int which) -> float
        pc_output_buffers_full(flex_parse_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_parse_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flex_parse_sptr self, int which) -> float
        pc_output_buffers_full_avg(flex_parse_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_parse_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flex_parse_sptr self, int which) -> float
        pc_output_buffers_full_var(flex_parse_sptr self) -> pmt_vector_float
        """
        return _pager_swig.flex_parse_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(flex_parse_sptr self) -> float"""
        return _pager_swig.flex_parse_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(flex_parse_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pager_swig.flex_parse_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(flex_parse_sptr self)"""
        return _pager_swig.flex_parse_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(flex_parse_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pager_swig.flex_parse_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(flex_parse_sptr self) -> int"""
        return _pager_swig.flex_parse_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(flex_parse_sptr self) -> int"""
        return _pager_swig.flex_parse_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(flex_parse_sptr self, int priority) -> int"""
        return _pager_swig.flex_parse_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(flex_parse_sptr self) -> std::string"""
        return _pager_swig.flex_parse_sptr_name(self)

    def symbol_name(self):
        """symbol_name(flex_parse_sptr self) -> std::string"""
        return _pager_swig.flex_parse_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(flex_parse_sptr self) -> io_signature_sptr"""
        return _pager_swig.flex_parse_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(flex_parse_sptr self) -> io_signature_sptr"""
        return _pager_swig.flex_parse_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(flex_parse_sptr self) -> long"""
        return _pager_swig.flex_parse_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(flex_parse_sptr self) -> basic_block_sptr"""
        return _pager_swig.flex_parse_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(flex_parse_sptr self, int ninputs, int noutputs) -> bool"""
        return _pager_swig.flex_parse_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(flex_parse_sptr self) -> std::string"""
        return _pager_swig.flex_parse_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(flex_parse_sptr self, std::string name)"""
        return _pager_swig.flex_parse_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(flex_parse_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pager_swig.flex_parse_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(flex_parse_sptr self) -> swig_int_ptr"""
        return _pager_swig.flex_parse_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(flex_parse_sptr self) -> swig_int_ptr"""
        return _pager_swig.flex_parse_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(flex_parse_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pager_swig.flex_parse_sptr_message_subscribers(self, *args, **kwargs)

flex_parse_sptr_swigregister = _pager_swig.flex_parse_sptr_swigregister
flex_parse_sptr_swigregister(flex_parse_sptr)

flex_parse_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_parse = flex_parse.make;



